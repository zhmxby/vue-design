(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{70:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._m(1),t._m(2),a("p"),t._m(3),a("p"),t._m(4),t._m(5),t._m(6),t._m(7),t._m(8),t._m(9),t._m(10),t._m(11),a("p",[t._v("首先定义 "),a("code",[t._v("data")]),t._v(" 变量，它是 "),a("code",[t._v("vm.$options.data")]),t._v(" 的引用。在 "),a("router-link",{attrs:{to:"./5vue-merge.html"}},[t._v("Vue选项的合并")]),t._v(" 一节中我们知道 "),a("code",[t._v("vm.$options.data")]),t._v(" 其实最终被处理成了一个函数，且该函数的执行结果才是真正的数据。在上面的代码中我们发现其中依然存在一个使用 "),a("code",[t._v("typeof")]),t._v(" 语句判断 "),a("code",[t._v("data")]),t._v(" 数据类型的操作，我们知道经过 "),a("code",[t._v("mergeOptions")]),t._v(" 函数处理后 "),a("code",[t._v("data")]),t._v(" 选项必然是一个函数，那么这里的判断还有必要吗？答案是有，这是因为 "),a("code",[t._v("beforeCreate")]),t._v(" 生命周期钩子函数是在 "),a("code",[t._v("mergeOptions")]),t._v(" 函数之后 "),a("code",[t._v("initData")]),t._v(" 之前被调用的，如果在 "),a("code",[t._v("beforeCreate")]),t._v(" 生命周期钩子函数中修改了 "),a("code",[t._v("vm.$options.data")]),t._v(" 的值，那么在 "),a("code",[t._v("initData")]),t._v(" 函数中对于 "),a("code",[t._v("vm.$options.data")]),t._v(" 类型的判断就是必要的了。")],1),t._m(12),t._m(13),t._m(14),t._m(15),t._m(16),t._m(17),t._m(18),t._m(19),t._m(20),t._m(21),t._m(22),t._m(23),a("p",[t._v("再往下是这样一段代码：")]),t._m(24),t._m(25),t._m(26),t._m(27),t._m(28),t._m(29),t._m(30),t._m(31),t._m(32),a("p",[t._v("另外上面的代码中当 "),a("code",[t._v("if")]),t._v(" 语句的条件不成立，则会判断 "),a("code",[t._v("else if")]),t._v(" 语句中的条件："),a("code",[t._v("!isReserved(key)")]),t._v("，该条件的意思是判断定义在 "),a("code",[t._v("data")]),t._v(" 中的 "),a("code",[t._v("key")]),t._v(" 是否是保留键，大家可以在 "),a("router-link",{attrs:{to:"../appendix/core-util.html"}},[t._v("core/util 目录下的工具方法全解")]),t._v(" 中查看对于 "),a("code",[t._v("isReserved")]),t._v(" 函数的讲解。"),a("code",[t._v("isReserved")]),t._v(" 函数通过判断一个字符串的第一个字符是不是 "),a("code",[t._v("$")]),t._v(" 或 "),a("code",[t._v("_")]),t._v(" 来决定其是否是保留的，"),a("code",[t._v("Vue")]),t._v(" 是不会代理那些键名以 "),a("code",[t._v("$")]),t._v(" 或 "),a("code",[t._v("_")]),t._v(" 开头的字段的，因为 "),a("code",[t._v("Vue")]),t._v(" 自身的属性和方法都是以 "),a("code",[t._v("$")]),t._v(" 或 "),a("code",[t._v("_")]),t._v(" 开头的，所以这么做是为了避免与 "),a("code",[t._v("Vue")]),t._v(" 自身的属性和方法相冲突。")],1),t._m(33),t._m(34),t._m(35),t._m(36),t._m(37),t._m(38),t._m(39),t._m(40),t._m(41),t._m(42),t._m(43),t._m(44),a("p",[t._v("接下来我们将重点讲解数据响应系统的实现，在具体到源码之前我们有必要了解一下数据响应系统实现的基本思路，这有助于我们更好的理解源码的目的，毕竟每一行代码都有它存在的意义。")]),t._m(45),t._m(46),t._m(47),t._m(48),t._m(49),t._m(50),t._m(51),t._m(52),a("p",[t._v("要实现这个功能，说复杂也复杂说简单也简单，复杂在于我们需要考虑的内容比较多，比如如何避免收集重复的依赖，如何深度观测，如何处理数组以及其他边界条件等等。简单在于如果不考虑那么多边界条件的话，要实现这样一个功能还是很容易的，这一小节我们就从简入手，致力于让大家思路清晰，至于各种复杂情况的处理我们会在真正讲解源码的部分一一为大家解答。")]),t._m(53),t._m(54),t._m(55),t._m(56),t._m(57),t._m(58),t._m(59),t._m(60),t._m(61),t._m(62),t._m(63),t._m(64),t._m(65),t._m(66),t._m(67),t._m(68),t._m(69),t._m(70),t._m(71),t._m(72),t._m(73),t._m(74),t._m(75),t._m(76),t._m(77),t._m(78),t._m(79),t._m(80),t._m(81),t._m(82),t._m(83),t._m(84),t._m(85),t._m(86),t._m(87),t._m(88),t._m(89),t._m(90),t._m(91),t._m(92),t._m(93),t._m(94),t._m(95),t._m(96),t._m(97),t._m(98),t._m(99),t._m(100),t._m(101),t._m(102),t._m(103),t._m(104),t._m(105),t._m(106),t._m(107),t._m(108),t._m(109),t._m(110),a("p",[t._v("这个条件很好理解，只有当数据对象是数组或纯对象的时候，才有必要对其进行观测。")]),t._m(111),t._m(112),t._m(113),t._m(114),t._m(115),t._m(116),t._m(117),t._m(118),t._m(119),t._m(120),t._m(121),t._m(122),t._m(123),t._m(124),t._m(125),t._m(126),t._m(127),t._m(128),t._m(129),t._m(130),a("p",[t._v("假设我们的数据对象如下：")]),t._m(131),t._m(132),t._m(133),t._m(134),t._m(135),t._m(136),t._m(137),t._m(138),t._m(139),t._m(140),t._m(141),t._m(142),t._m(143),t._m(144),t._m(145),t._m(146),t._m(147),t._m(148),t._m(149),t._m(150),t._m(151),t._m(152),t._m(153),t._m(154),t._m(155),t._m(156),t._m(157),t._m(158),a("p",[t._v("再往下是这样一段代码：")]),t._m(159),t._m(160),t._m(161),t._m(162),t._m(163),t._m(164),t._m(165),t._m(166),t._m(167),t._m(168),t._m(169),t._m(170),t._m(171),t._m(172),t._m(173),a("p",[t._v("如下图所示：")]),t._m(174),t._m(175),t._m(176),t._m(177),t._m(178),t._m(179),t._m(180),t._m(181),t._m(182),t._m(183),t._m(184),t._m(185),t._m(186),t._m(187),t._m(188),t._m(189),t._m(190),t._m(191),t._m(192),t._m(193),t._m(194),t._m(195),t._m(196),t._m(197),t._m(198),t._m(199),t._m(200),t._m(201),t._m(202),t._m(203),t._m(204),t._m(205),t._m(206),t._m(207),t._m(208),t._m(209),t._m(210),t._m(211),t._m(212),t._m(213),t._m(214),t._m(215),t._m(216),t._m(217),t._m(218),t._m(219),t._m(220),t._m(221),t._m(222),t._m(223),t._m(224),t._m(225),t._m(226),t._m(227),t._m(228),t._m(229),t._m(230),t._m(231),t._m(232),t._m(233),t._m(234),t._m(235),t._m(236),t._m(237),t._m(238),t._m(239),t._m(240),t._m(241),a("p",[t._v("举个例子，如下：")]),t._m(242),t._m(243),t._m(244),t._m(245),t._m(246),t._m(247),t._m(248),t._m(249),t._m(250),t._m(251),t._m(252),t._m(253),t._m(254),t._m(255),t._m(256),t._m(257),t._m(258),t._m(259),t._m(260),t._m(261),t._m(262),t._m(263),t._m(264),t._m(265),t._m(266),t._m(267),t._m(268),t._m(269),t._m(270),a("p",[t._v("实际上兼容的方案有很多，其中一个比较好的方案是直接在数组实例上定义与变异方法同名的函数，如下代码：")]),t._m(271),t._m(272),t._m(273),a("p",[t._v("这样就完美了。")]),t._m(274),t._m(275),t._m(276),t._m(277),t._m(278),t._m(279),a("p",[t._v("首先定义了 "),a("code",[t._v("augment")]),t._v(" 常量，这个常量的值根据 "),a("code",[t._v("hasProto")]),t._v(" 的真假而定，如果 "),a("code",[t._v("hasProto")]),t._v(" 为真则 "),a("code",[t._v("augment")]),t._v(" 的值为 "),a("code",[t._v("protoAugment")]),t._v("，否则值为 "),a("code",[t._v("copyAugment")]),t._v("。那么 "),a("code",[t._v("hasProto")]),t._v(" 是什么呢？大家可以在附录 "),a("router-link",{attrs:{to:"../appendix/core-util.html"}},[t._v("core/util 目录下的工具方法全解")]),t._v(" 中查看其讲解，其实 "),a("code",[t._v("hasProto")]),t._v(" 是一个布尔值，它用来检测当前环境是否可以使用 "),a("code",[t._v("__proto__")]),t._v(" 属性，如果 "),a("code",[t._v("hasProto")]),t._v(" 为真则当前环境支持 "),a("code",[t._v("__proto__")]),t._v(" 属性，否则意味着当前环境不能够使用 "),a("code",[t._v("__proto__")]),t._v(" 属性。")],1),t._m(280),t._m(281),t._m(282),t._m(283),t._m(284),t._m(285),t._m(286),t._m(287),t._m(288),t._m(289),t._m(290),t._m(291),t._m(292),t._m(293),t._m(294),t._m(295),t._m(296),t._m(297),t._m(298),a("p",[t._v("上面的代码中，首先缓存了数组原本的变异方法：")]),t._m(299),t._m(300),t._m(301),t._m(302),a("p",[t._v("关键要注意这两句代码：")]),t._m(303),t._m(304),a("p",[t._v("注意上面的讲解中我们省略了中间部分，那么这部分代码的作用是什么呢？如下：")]),t._m(305),t._m(306),t._m(307),t._m(308),t._m(309),t._m(310),t._m(311),t._m(312),t._m(313),t._m(314),t._m(315),t._m(316),t._m(317),a("p",[t._v("但是如果数组中嵌套了其他的数组或对象，那么嵌套的数组或对象却不是响应的：")]),t._m(318),t._m(319),t._m(320),t._m(321),t._m(322),t._m(323),t._m(324),t._m(325),a("p",[t._v("为了弄清楚这个问题，假设我们有如下代码：")]),t._m(326),a("p",[t._v("首先我们观察一下数据对象：")]),t._m(327),t._m(328),t._m(329),t._m(330),t._m(331),t._m(332),t._m(333),t._m(334),t._m(335),t._m(336),t._m(337),t._m(338),t._m(339),t._m(340),a("p",[t._v("现在我们是时候讲解一下 "),a("code",[t._v("Vue.set")]),t._v(" 和 "),a("code",[t._v("Vue.delete")]),t._v(" 函数的实现了，我们知道 "),a("code",[t._v("Vue")]),t._v(" 数据响应系统的原理的核心是通过 "),a("code",[t._v("Object.defineProperty")]),t._v(" 函数将数据对象的属性转换为访问器属性，从而使得我们能够拦截到属性的读取和设置，但正如官方文档中介绍的那样，"),a("code",[t._v("Vue")]),t._v(" 是没有能力拦截到为一个对象(或数组)添加属性(或元素)的，而 "),a("code",[t._v("Vue.set")]),t._v(" 和 "),a("code",[t._v("Vue.delete")]),t._v(" 就是为了解决这个问题而诞生的。同时为了方便使用 "),a("code",[t._v("Vue")]),t._v(" 还在实例对象上定义了 "),a("code",[t._v("$set")]),t._v(" 和 "),a("code",[t._v("$delete")]),t._v(" 方法，实际上 "),a("code",[t._v("$set")]),t._v(" 和 "),a("code",[t._v("$delete")]),t._v(" 方法仅仅是 "),a("code",[t._v("Vue.set")]),t._v(" 和 "),a("code",[t._v("Vue.delete")]),t._v(" 的别名，为了证明这点，我们首先来看看 "),a("code",[t._v("$set")]),t._v(" 和 "),a("code",[t._v("$delete")]),t._v(" 的实现，还记得 "),a("code",[t._v("$set")]),t._v(" 和 "),a("code",[t._v("$delete")]),t._v(" 方法定义在哪里吗？不记得也没关系，我们可以通过查看附录 "),a("router-link",{attrs:{to:"/appendix/vue-prototype.html"}},[t._v("Vue 构造函数整理-原型")]),t._v(" 找到 "),a("code",[t._v("$set")]),t._v(" 和 "),a("code",[t._v("$delete")]),t._v(" 方法的定义位置，我们发现 "),a("code",[t._v("$set")]),t._v(" 和 "),a("code",[t._v("$delete")]),t._v(" 定义在 "),a("code",[t._v("src/core/instance/state.js")]),t._v(" 文件的 "),a("code",[t._v("stateMixin")]),t._v(" 函数中，如下代码：")],1),t._m(341),t._m(342),a("p",[t._v("接着我们再来看看 "),a("code",[t._v("Vue.set")]),t._v(" 和 "),a("code",[t._v("Vue.delete")]),t._v(" 函数的定义，如果你同样不记得这两个函数时在哪里定义的也没关系，可以查看附录 "),a("router-link",{attrs:{to:"/appendix/vue-global-api.html"}},[t._v("Vue 构造函数整理-全局API")]),t._v("，我们发现这两个函数是在 "),a("code",[t._v("initGlobalAPI")]),t._v(" 函数中定义的，打开 "),a("code",[t._v("src/core/global-api/index.js")]),t._v(" 文件，找到 "),a("code",[t._v("initGlobalAPI")]),t._v(" 函数如下：")],1),t._m(343),t._m(344),t._m(345),t._m(346),t._m(347),t._m(348),t._m(349),t._m(350),a("p",[t._v("该 "),a("code",[t._v("if")]),t._v(" 语句块的判断条件中包含两个函数，分别是 "),a("code",[t._v("isUndef")]),t._v(" 和 "),a("code",[t._v("isPrimitive")]),t._v("，可以在附录 "),a("router-link",{attrs:{to:"/appendix/shared-util.html"}},[t._v("shared/util.js 文件工具方法全解")]),t._v(" 中找到关于这两个函数的讲解。"),a("code",[t._v("isUndef")]),t._v(" 函数用来判断一个值是否是 "),a("code",[t._v("undefined")]),t._v(" 或 "),a("code",[t._v("null")]),t._v("，如果是则返回 "),a("code",[t._v("true")]),t._v("，"),a("code",[t._v("isPrimitive")]),t._v(" 函数用来判断一个值是否是原始类型值，如果是则返回 "),a("code",[t._v("true")]),t._v("。所以如上代码 "),a("code",[t._v("if")]),t._v(" 语句块的作用是："),t._m(351),t._v("。这么做是合理的，因为理论上只能为对象(或数组)添加属性(或元素)。")],1),t._m(352),t._m(353),a("p",[t._v("这段代码对 "),a("code",[t._v("target")]),t._v(" 和 "),a("code",[t._v("key")]),t._v(" 这两个参数做了校验，如果 "),a("code",[t._v("target")]),t._v(" 是一个数组，并且 "),a("code",[t._v("key")]),t._v(" 是一个有效的数组索引，那么就会执行 "),a("code",[t._v("if")]),t._v(" 语句块的内容。在校验 "),a("code",[t._v("key")]),t._v(" 是否是有效的数组索引时使用了 "),a("code",[t._v("isValidArrayIndex")]),t._v(" 函数，可以在附录 "),a("router-link",{attrs:{to:"/appendix/shared-util.html"}},[t._v("shared/util.js 文件工具方法全解")]),t._v(" 中查看详细讲解。也就是说当我们尝试使用 "),a("code",[t._v("Vue.set/$set")]),t._v(" 为数组设置某个元素值的时候就会执行 "),a("code",[t._v("if")]),t._v(" 语句块的内容，如下例子：")],1),t._m(354),t._m(355),t._m(356),t._m(357),t._m(358),t._m(359),t._m(360),t._m(361),t._m(362),t._m(363),t._m(364),t._m(365),t._m(366),t._m(367),t._m(368),t._m(369),t._m(370),a("p",[t._v("再看如下代码中高亮的部分：")]),t._m(371),t._m(372),t._m(373),t._m(374),t._m(375),t._m(376),t._m(377),t._m(378),t._m(379),t._m(380),t._m(381),t._m(382),t._m(383),t._m(384),t._m(385),t._m(386),t._m(387),t._m(388),t._m(389),t._m(390),t._m(391),t._m(392),t._m(393),t._m(394),t._m(395),t._m(396),t._m(397),t._m(398),t._m(399),t._m(400),t._m(401),t._m(402),t._m(403)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"揭开数据响应系统的面纱"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#揭开数据响应系统的面纱","aria-hidden":"true"}},[this._v("#")]),this._v(" 揭开数据响应系统的面纱")])},function(){var t=this.$createElement,s=this._self._c||t;return s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[this._v("注意")]),s("p",[this._v("本节中将频繁的使用 "),s("code",[this._v("依赖")]),this._v(" 和 "),s("code",[this._v("观察者")]),this._v(" 这两个词汇，它们的意义是相同的。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"完整目录"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#完整目录","aria-hidden":"true"}},[this._v("#")]),this._v(" 完整目录")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"table-of-contents"},[a("ul",[a("li",[a("a",{attrs:{href:"#完整目录"}},[t._v("完整目录")])]),a("li",[a("a",{attrs:{href:"#实例对象代理访问数据-data"}},[t._v("实例对象代理访问数据 data")])]),a("li",[a("a",{attrs:{href:"#数据响应系统的基本思路"}},[t._v("数据响应系统的基本思路")])]),a("li",[a("a",{attrs:{href:"#observe-工厂函数"}},[t._v("observe 工厂函数")])]),a("li",[a("a",{attrs:{href:"#observer-构造函数"}},[t._v("Observer 构造函数")]),a("ul",[a("li",[a("a",{attrs:{href:"#数据对象的-ob-属性"}},[t._v("数据对象的 `__ob__` 属性")])]),a("li",[a("a",{attrs:{href:"#响应式数据之纯对象的处理"}},[t._v("响应式数据之纯对象的处理")])]),a("li",[a("a",{attrs:{href:"#definereactive-函数"}},[t._v("defineReactive 函数")])]),a("li",[a("a",{attrs:{href:"#被观测后的数据对象的样子"}},[t._v("被观测后的数据对象的样子")])]),a("li",[a("a",{attrs:{href:"#在-get-函数中如何收集依赖"}},[t._v("在 get 函数中如何收集依赖")])]),a("li",[a("a",{attrs:{href:"#在-set-函数中如何触发依赖"}},[t._v("在 set 函数中如何触发依赖")])]),a("li",[a("a",{attrs:{href:"#保证定义响应式数据行为的一致性"}},[t._v("保证定义响应式数据行为的一致性")])]),a("li",[a("a",{attrs:{href:"#响应式数据之数组的处理"}},[t._v("响应式数据之数组的处理")])]),a("li",[a("a",{attrs:{href:"#拦截数组变异方法的思路"}},[t._v("拦截数组变异方法的思路")])]),a("li",[a("a",{attrs:{href:"#拦截数组变异方法在-vue-中的实现"}},[t._v("拦截数组变异方法在 Vue 中的实现")])]),a("li",[a("a",{attrs:{href:"#数组的特殊性"}},[t._v("数组的特殊性")])])])]),a("li",[a("a",{attrs:{href:"#vue-set-set-和-vue-delete-delete-的实现"}},[t._v("Vue.set($set) 和 Vue.delete($delete) 的实现")]),a("ul",[a("li",[a("a",{attrs:{href:"#vue-set-set"}},[t._v("Vue.set/$set")])]),a("li",[a("a",{attrs:{href:"#vue-delete-delete"}},[t._v("Vue.delete/$delete")])])])])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("相信很多同学都对 "),a("code",[t._v("Vue")]),t._v(" 的数据响应系统有或多或少的了解，本章将完整的覆盖 "),a("code",[t._v("Vue")]),t._v(" 响应系统的边边角角，让你对其拥有一个完善的认识。接下来我们还是接着上一章的话题，从 "),a("code",[t._v("initState")]),t._v(" 函数开始。我们知道 "),a("code",[t._v("initState")]),t._v(" 函数是很多选项初始化的汇总，在 "),a("code",[t._v("initState")]),t._v(" 函数内部使用 "),a("code",[t._v("initProps")]),t._v(" 函数初始化 "),a("code",[t._v("props")]),t._v(" 属性；使用 "),a("code",[t._v("initMethods")]),t._v(" 函数初始化 "),a("code",[t._v("methods")]),t._v(" 属性；使用 "),a("code",[t._v("initData")]),t._v(" 函数初始化 "),a("code",[t._v("data")]),t._v(" 选项；使用 "),a("code",[t._v("initComputed")]),t._v(" 函数和 "),a("code",[t._v("initWatch")]),t._v(" 函数初始化 "),a("code",[t._v("computed")]),t._v(" 和 "),a("code",[t._v("watch")]),t._v(" 选项。那么我们从哪里开始讲起呢？这里我们决定以 "),a("code",[t._v("initData")]),t._v(" 为切入点为大家讲解 "),a("code",[t._v("Vue")]),t._v(" 的响应系统，因为 "),a("code",[t._v("initData")]),t._v(" 几乎涉及了全部的数据响应相关的内容，这样将会让大家在理解 "),a("code",[t._v("props")]),t._v("、"),a("code",[t._v("computed")]),t._v("、"),a("code",[t._v("watch")]),t._v(" 等选项时不费吹灰之力，且会有一种水到渠成的感觉。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("话不多说，如下是 "),s("code",[this._v("initState")]),this._v(" 函数中用于初始化 "),s("code",[this._v("data")]),this._v(" 选项的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opts"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("initData")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("observe")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("/* asRootData */")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先判断 "),a("code",[t._v("opts.data")]),t._v(" 是否存在，即 "),a("code",[t._v("data")]),t._v(" 选项是否存在，如果存在则调用 "),a("code",[t._v("initData(vm)")]),t._v(" 函数初始化 "),a("code",[t._v("data")]),t._v(" 选项，否则通过 "),a("code",[t._v("observe")]),t._v(" 函数观测一个空的对象，并且 "),a("code",[t._v("vm._data")]),t._v(" 引用了该空对象。其中 "),a("code",[t._v("observe")]),t._v(" 函数是将 "),a("code",[t._v("data")]),t._v(" 转换成响应式数据的核心入口，另外实例对象上的 "),a("code",[t._v("_data")]),t._v(" 属性我们在前面的章节中讲解 "),a("code",[t._v("$data")]),t._v(" 属性的时候讲到过，"),a("code",[t._v("$data")]),t._v(" 属性是一个访问器属性，其代理的值就是 "),a("code",[t._v("_data")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("下面我们就从 "),s("code",[this._v("initData(vm)")]),this._v(" 开始开启数据响应系统的探索之旅。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"实例对象代理访问数据-data"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#实例对象代理访问数据-data","aria-hidden":"true"}},[this._v("#")]),this._v(" 实例对象代理访问数据 data")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们找到 "),a("code",[t._v("initData")]),t._v(" 函数，该函数与 "),a("code",[t._v("initState")]),t._v(" 函数定义在同一个文件中，即 "),a("code",[t._v("core/instance/state.js")]),t._v(" 文件，"),a("code",[t._v("initData")]),t._v(" 函数的一开始是这样一段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data\ndata "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" data "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v("\n  "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getData")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" data "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("回到上面那段代码，如果 "),a("code",[t._v("vm.$options.data")]),t._v(" 的类型为函数，则调用 "),a("code",[t._v("getData")]),t._v(" 函数获取真正的数据，"),a("code",[t._v("getData")]),t._v(" 函数就定义在 "),a("code",[t._v("initData")]),t._v(" 函数的下面，我们看看其作用是什么：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getData")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Function"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Component"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// #7573 disable dep collection when invoking data getters")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("pushTarget")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" data"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token class-name"}},[t._v("e")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("handleError")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`data()`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("finally")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("popTarget")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("getData")]),t._v(" 函数接收两个参数：第一个参数是 "),a("code",[t._v("data")]),t._v(" 选项，我们知道 "),a("code",[t._v("data")]),t._v(" 选项是一个函数，第二个参数是 "),a("code",[t._v("Vue")]),t._v(" 实例对象。"),a("code",[t._v("getData")]),t._v(" 函数的作用其实就是通过调用 "),a("code",[t._v("data")]),t._v(" 函数获取真正的数据对象并返回，即："),a("code",[t._v("data.call(vm, vm)")]),t._v("，而且我们注意到 "),a("code",[t._v("data.call(vm, vm)")]),t._v(" 被包裹在 "),a("code",[t._v("try...catch")]),t._v(" 语句块中，这是为了捕获 "),a("code",[t._v("data")]),t._v(" 函数中可能出现的错误。同时如果有错误发生那么则返回一个空对象作为数据对象："),a("code",[t._v("return {}")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("另外我们注意到在 "),a("code",[t._v("getData")]),t._v(" 函数的开头调用了 "),a("code",[t._v("pushTarget()")]),t._v(" 函数，并且在 "),a("code",[t._v("finally")]),t._v(" 语句块中调用了 "),a("code",[t._v("popTarget()")]),t._v("，这么做的目的是什么呢？这么做是为了防止使用 "),a("code",[t._v("props")]),t._v(" 数据初始化 "),a("code",[t._v("data")]),t._v(" 数据时收集冗余依赖的，等到我们分析 "),a("code",[t._v("Vue")]),t._v(" 是如何收集依赖的时候会回头来说明。总之 "),a("code",[t._v("getData")]),t._v(" 函数的作用就是："),a("strong",[t._v("“通过调用 "),a("code",[t._v("data")]),t._v(" 选项从而获取数据对象”")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们再回到 "),s("code",[this._v("initData")]),this._v(" 函数中：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getData")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("当通过 "),a("code",[t._v("getData")]),t._v(" 拿到最终的数据对象后，将该对象赋值给 "),a("code",[t._v("vm._data")]),t._v(" 属性，同时重写了 "),a("code",[t._v("data")]),t._v(" 变量，此时 "),a("code",[t._v("data")]),t._v(" 变量已经不是函数了，而是最终的数据对象。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("紧接着是一个 "),s("code",[this._v("if")]),this._v(" 语句块：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token function"}},[t._v("isPlainObject")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'data functions should return an object:\\n'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'https://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    vm\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面的代码中使用 "),a("code",[t._v("isPlainObject")]),t._v(" 函数判断变量 "),a("code",[t._v("data")]),t._v(" 是不是一个纯对象，如果不是纯对象那么在非生产环境会打印警告信息。我们知道，如果一切都按照预期进行，那么此时 "),a("code",[t._v("data")]),t._v(" 已经是一个最终的数据对象了，但这仅仅是我们的期望而已，毕竟 "),a("code",[t._v("data")]),t._v(" 选项是开发者编写的，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("data")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'我就是不返回对象'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上面的代码中 "),s("code",[this._v("data")]),this._v(" 函数返回了一个字符串而不是对象，所以我们需要判断一下 "),s("code",[this._v("data")]),this._v(" 函数返回值的类型。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// proxy data on instance")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" keys "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("keys")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" props "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" methods "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("methods\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" keys"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n"),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),a("span",{attrs:{class:"token operator"}},[t._v("--")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" keys"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("methods "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("hasOwn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("methods"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`Method "')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("key"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('" has already been defined as a data property.`')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        vm\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("hasOwn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`The data property "')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("key"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('" is already declared as a prop. `')])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n      "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`Use prop default value instead.`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      vm\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token function"}},[t._v("isReserved")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("proxy")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`_data`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面的代码中首先使用 "),a("code",[t._v("Object.keys")]),t._v(" 函数获取 "),a("code",[t._v("data")]),t._v(" 对象的所有键，并将由 "),a("code",[t._v("data")]),t._v(" 对象的键所组成的数组赋值给 "),a("code",[t._v("keys")]),t._v(" 常量。接着分别用 "),a("code",[t._v("props")]),t._v(" 常量和 "),a("code",[t._v("methods")]),t._v(" 常量引用 "),a("code",[t._v("vm.$options.props")]),t._v(" 和 "),a("code",[t._v("vm.$options.methods")]),t._v("。然后开启一个 "),a("code",[t._v("while")]),t._v(" 循环，该循环的用来遍历 "),a("code",[t._v("keys")]),t._v(" 数组，那么遍历 "),a("code",[t._v("keys")]),t._v(" 数组的目的是什么呢？我们来看循环体内的第一段 "),a("code",[t._v("if")]),t._v(" 语句：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" keys"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("methods "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("hasOwn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("methods"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`Method "')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("key"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('" has already been defined as a data property.`')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      vm\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面这段代码的意思是在非生产环境下如果发现在 "),a("code",[t._v("methods")]),t._v(" 对象上定义了同样的 "),a("code",[t._v("key")]),t._v("，也就是说 "),a("code",[t._v("data")]),t._v(" 数据的 "),a("code",[t._v("key")]),t._v(" 与 "),a("code",[t._v("methods")]),t._v(" 对象中定义的函数名称相同，那么会打印一个警告，提示开发者："),a("strong",[t._v("你定义在 "),a("code",[t._v("methods")]),t._v(" 对象中的函数名称已经被作为 "),a("code",[t._v("data")]),t._v(" 对象中某个数据字段的 "),a("code",[t._v("key")]),t._v(" 了，你应该换一个函数名字")]),t._v("。为什么要这么做呢？如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ins "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  data"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  methods"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("b")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nins"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a "),a("span",{attrs:{class:"token comment"}},[t._v("// 1")]),t._v("\nins"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("b "),a("span",{attrs:{class:"token comment"}},[t._v("// function")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在这个例子中无论是定义在 "),a("code",[t._v("data")]),t._v(" 数据对象，还是定义在 "),a("code",[t._v("methods")]),t._v(" 对象中的函数，都可以通过实例对象代理访问。所以当 "),a("code",[t._v("data")]),t._v(" 数据对象中的 "),a("code",[t._v("key")]),t._v(" 与 "),a("code",[t._v("methods")]),t._v(" 对象中的 "),a("code",[t._v("key")]),t._v(" 冲突时，岂不就会产生覆盖掉的现象，所以为了避免覆盖 "),a("code",[t._v("Vue")]),t._v(" 是不允许在 "),a("code",[t._v("methods")]),t._v(" 中定义与 "),a("code",[t._v("data")]),t._v(" 字段的 "),a("code",[t._v("key")]),t._v(" 重名的函数的。而这个工作就是在 "),a("code",[t._v("while")]),t._v(" 循环中第一个语句块中的代码去完成的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接着我们看 "),s("code",[this._v("while")]),this._v(" 循环中的第二个 "),s("code",[this._v("if")]),this._v(" 语句块：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("hasOwn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`The data property "')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("key"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('" is already declared as a prop. `')])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`Use prop default value instead.`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    vm\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token function"}},[t._v("isReserved")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("proxy")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`_data`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("同样的 "),a("code",[t._v("Vue")]),t._v(" 实例对象除了代理访问 "),a("code",[t._v("data")]),t._v(" 数据和 "),a("code",[t._v("methods")]),t._v(" 中的方法之外，还代理访问了 "),a("code",[t._v("props")]),t._v(" 中的数据，所以上面这段代码的作用是如果发现 "),a("code",[t._v("data")]),t._v(" 数据字段的 "),a("code",[t._v("key")]),t._v(" 已经在 "),a("code",[t._v("props")]),t._v(" 中有定义了，那么就会打印警告。另外这里有一个优先级的关系："),a("strong",[t._v("props优先级 > data优先级 > methods优先级")]),t._v("。即如果一个 "),a("code",[t._v("key")]),t._v(" 在 "),a("code",[t._v("props")]),t._v(" 中有定义了那么就不能在 "),a("code",[t._v("data")]),t._v(" 中出现；如果一个 "),a("code",[t._v("key")]),t._v(" 在 "),a("code",[t._v("data")]),t._v(" 中出现了那么就不能在 "),a("code",[t._v("methods")]),t._v(" 中出现了。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果 "),a("code",[t._v("key")]),t._v(" 既不是以 "),a("code",[t._v("$")]),t._v(" 开头，又不是以 "),a("code",[t._v("_")]),t._v(" 开头，那么将执行 "),a("code",[t._v("proxy")]),t._v(" 函数，实现实例对象的代理访问：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("proxy")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`_data`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("其中关键点在于 "),s("code",[this._v("proxy")]),this._v(" 函数，该函数同样定义在 "),s("code",[this._v("core/instance/state.js")]),this._v(" 文件中，其内容如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("proxy")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sourceKey"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  sharedPropertyDefinition"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function-variable function"}},[t._v("get")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("proxyGetter")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("sourceKey"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  sharedPropertyDefinition"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function-variable function"}},[t._v("set")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("proxySetter")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("sourceKey"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" val\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("defineProperty")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" sharedPropertyDefinition"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("proxy")]),t._v(" 函数的原理是通过 "),a("code",[t._v("Object.defineProperty")]),t._v(" 函数在实例对象 "),a("code",[t._v("vm")]),t._v(" 上定义与 "),a("code",[t._v("data")]),t._v(" 数据字段同名的访问器属性，并且这些属性代理的值是 "),a("code",[t._v("vm._data")]),t._v(" 上对应属性的值。举个例子，比如 "),a("code",[t._v("data")]),t._v(" 数据如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ins "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Vue")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  data"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当我们访问 "),s("code",[this._v("ins.a")]),this._v(" 时实际访问的是 "),s("code",[this._v("ins._data.a")]),this._v("。而 "),s("code",[this._v("ins._data")]),this._v(" 才是真正的数据对象。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后经过一系列的处理，"),s("code",[this._v("initData")]),this._v(" 函数来到了最后一句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// observe data")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("observe")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("/* asRootData */")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("调用 "),a("code",[t._v("observe")]),t._v(" 函数将 "),a("code",[t._v("data")]),t._v(" 数据对象转换成响应式的，可以说这句代码才是响应系统的开始，不过在我们讲解 "),a("code",[t._v("observe")]),t._v(" 函数之前我们有必要总结一下 "),a("code",[t._v("initData")]),t._v(" 函数所做的事情，通过前面分析 "),a("code",[t._v("initData")]),t._v(" 函数主要完成如下工作：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("根据 "),a("code",[t._v("vm.$options.data")]),t._v(" 选项获取真正想要的数据（注意：此时 "),a("code",[t._v("vm.$options.data")]),t._v(" 是函数）")]),a("li",[t._v("校验得到的数据是否是一个纯对象")]),a("li",[t._v("检查数据对象 "),a("code",[t._v("data")]),t._v(" 上的键是否与 "),a("code",[t._v("props")]),t._v(" 对象上的键冲突")]),a("li",[t._v("检查 "),a("code",[t._v("methods")]),t._v(" 对象上的键是否与 "),a("code",[t._v("data")]),t._v(" 对象上的键冲突")]),a("li",[t._v("在 "),a("code",[t._v("Vue")]),t._v(" 实例对象上添加代理访问数据对象的同名属性")]),a("li",[t._v("最后调用 "),a("code",[t._v("observe")]),t._v(" 函数开启响应式之路")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"数据响应系统的基本思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据响应系统的基本思路","aria-hidden":"true"}},[this._v("#")]),this._v(" 数据响应系统的基本思路")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("code",[this._v("Vue")]),this._v(" 中，我们可以使用 "),s("code",[this._v("$watch")]),this._v(" 观测一个字段，当字段的值发生变化的时候执行指定的观察者，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ins "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  data"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nins"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("$watch")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'修改了 a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这样当我们试图修改 "),a("code",[t._v("a")]),t._v(" 的值时："),a("code",[t._v("ins.a = 2")]),t._v("，在控制台将会打印 "),a("code",[t._v("'修改了 a'")]),t._v("。现在我们将这个问题抽象一下，假设我们有数据对象 "),a("code",[t._v("data")]),t._v("，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们还有一个叫做 "),s("code",[this._v("$watch")]),this._v(" 的函数：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("$watch")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token operator"}},[t._v("...")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("$watch")]),this._v(" 函数接收两个参数，第一个参数是要观测的字段，第二个参数是当该字段的值发生变化后要执行的函数，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("$watch")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'修改了 a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("要实现上文的功能，我们面临的第一个问题是，如何才能知道属性被修改了(或被设置了)。这时候我们就要依赖 "),s("code",[this._v("Object.defineProperty")]),this._v(" 函数，通过该函数为对象的每个属性设置一对 "),s("code",[this._v("getter/setter")]),this._v(" 从而得知属性被读取和被设置，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("defineProperty")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'设置了属性 a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'读取了属性 a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这样我们就实现了对属性 "),a("code",[t._v("a")]),t._v(" 的设置和获取操作的拦截，有了它我们就可以大胆的思考一些事情，比如： "),a("strong",[t._v("能不能在获取属性 "),a("code",[t._v("a")]),t._v(" 的时候收集依赖，然后在设置属性 "),a("code",[t._v("a")]),t._v(" 的时候触发之前收集的依赖呢？")]),t._v(" 嗯，这是一个好思路，不过既然要收集依赖，我们起码需要一个”筐“，然后将所有收集到的依赖通通放到这个”筐”里，当属性被设置的时候将“筐”里所有的依赖都拿出来执行就可以了，落实到代码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// dep 数组就是我们所谓的“筐”")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dep "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nObject"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("defineProperty")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 当属性被设置的时候，将“筐”里的依赖都执行一次")]),t._v("\n    dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("forEach")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("fn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 当属性被获取的时候，把依赖放到“筐”里")]),t._v("\n    dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上代码所示，我们定义了常量 "),a("code",[t._v("dep")]),t._v("，它是一个数组，这个数组就是我们所说的“筐”，当获取属性 "),a("code",[t._v("a")]),t._v(" 的值时将触发 "),a("code",[t._v("get")]),t._v(" 函数，在 "),a("code",[t._v("get")]),t._v(" 函数中，我们将收集到的依赖放入“筐”内，当设置属性 "),a("code",[t._v("a")]),t._v(" 的值时将触发 "),a("code",[t._v("set")]),t._v(" 函数，在 "),a("code",[t._v("set")]),t._v(" 函数内我们将“筐”里的依赖全部拿出来执行。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("但是新的问题出现了，上面的代码中我们假设 "),a("code",[t._v("fn")]),t._v(" 函数就是我们需要收集的依赖("),a("code",[t._v("观察者")]),t._v(")，但 "),a("code",[t._v("fn")]),t._v(" 从何而来呢？ "),a("strong",[t._v("也就是说如何在获取属性 "),a("code",[t._v("a")]),t._v(" 的值时收集依赖呢？")]),t._v(" 为了解决这个问题我们需要思考一下我们现在都掌握哪些条件，这个时候我们就需要在 "),a("code",[t._v("$watch")]),t._v(" 函数中做文章了，我们知道 "),a("code",[t._v("$watch")]),t._v(" 函数接收两个参数，第一个参数是一个字符串，即数据字段名,比如 "),a("code",[t._v("'a'")]),t._v("，第二个参数是依赖该字段的函数：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("$watch")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'设置了 a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("重点在于 "),a("strong",[a("code",[t._v("$watch")]),t._v(" 函数是知道当前正在观测的是哪一个字段的")]),t._v("，所以一个思路是我们在 "),a("code",[t._v("$watch")]),t._v(" 函数中读取该字段的值，从而触发字段的 "),a("code",[t._v("get")]),t._v(" 函数，同时将依赖收集，如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dep "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nObject"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("defineProperty")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("forEach")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("fn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 此时 Target 变量中保存的就是依赖函数")]),t._v("\n    dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Target"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// Target 是全局变量")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" Target "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("$watch")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fn"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 将 Target 的值设置为 fn")]),t._v("\n  Target "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" fn\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 读取字段值，触发 get 函数")]),t._v("\n  data"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面的代码中，首先我们定义了全局变量 "),a("code",[t._v("Target")]),t._v("，然后在 "),a("code",[t._v("$watch")]),t._v(" 中将 "),a("code",[t._v("Target")]),t._v(" 的值设置为 "),a("code",[t._v("fn")]),t._v(" 也就是依赖，接着读取字段的值 "),a("code",[t._v("data[exp]")]),t._v(" 从而触发被设置的属性的 "),a("code",[t._v("get")]),t._v(" 函数，在 "),a("code",[t._v("get")]),t._v(" 函数中，由于此时 "),a("code",[t._v("Target")]),t._v(" 变量就是我们要收集的依赖，所以将 "),a("code",[t._v("Target")]),t._v(" 添加到 "),a("code",[t._v("dep")]),t._v(" 数组。现在我们添加如下测试代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("$watch")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'第一个依赖'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("$watch")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'第二个依赖'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("此时当你尝试设置 "),a("code",[t._v("data.a = 3")]),t._v(" 时，在控制台将分别打印字符串 "),a("code",[t._v("'第一个依赖'")]),t._v(" 和 "),a("code",[t._v("'第二个依赖'")]),t._v("。我们仅仅用十几行代码就实现了这样一个最基本的功能，但其实现在的实现存在很多缺陷，比如目前的代码仅仅能够实现对字段 "),a("code",[t._v("a")]),t._v(" 的观测，如果添加一个字段 "),a("code",[t._v("b")]),t._v(" 呢？所以最起码我们应该使用一个循环将定义访问器属性的代码包裹起来，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  b"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" data"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dep "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("defineProperty")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("forEach")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("fn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Target"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这样我们就可以使用 "),s("code",[this._v("$watch")]),this._v(" 函数观测任意一个 "),s("code",[this._v("data")]),this._v(" 对象下的字段了，但是细心的同学可能早已发现上面代码的坑，即：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// undefined")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("直接在控制台打印 "),a("code",[t._v("data.a")]),t._v(" 输出的值为 "),a("code",[t._v("undefined")]),t._v("，这是因为 "),a("code",[t._v("get")]),t._v(" 函数没有任何返回值，所以获取任何属性的值都将是 "),a("code",[t._v("undefined")]),t._v("，其实这个问题很好解决，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" key "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" data"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dep "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" val "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" data"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 缓存字段原有的值")]),t._v("\n  Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("defineProperty")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 如果值没有变什么都不做")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" val"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 使用新值替换旧值")]),t._v("\n      val "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" newVal\n      dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("forEach")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("fn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Target"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" val  "),a("span",{attrs:{class:"token comment"}},[t._v("// 将该值返回")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("只需要在使用 "),a("code",[t._v("Object.defineProperty")]),t._v(" 函数定义访问器属性之前缓存一下原来的值即 "),a("code",[t._v("val")]),t._v("，然后在 "),a("code",[t._v("get")]),t._v(" 函数中将 "),a("code",[t._v("val")]),t._v(" 返回即可，除此之外还要记得在 "),a("code",[t._v("set")]),t._v(" 函数中使用新值("),a("code",[t._v("newVal")]),t._v(")重写旧值("),a("code",[t._v("val")]),t._v(")。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("但这样就完美了吗？当然没有，这距离完美可以说还相差十万八千里，比如当数据 "),s("code",[this._v("data")]),this._v(" 是嵌套的对象时，我们的程序只能检测到第一层对象的属性，如果数据对象如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    b"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("对于以上对象结构，我们的程序只能把 "),s("code",[this._v("data.a")]),this._v(" 字段转换成响应式属性，而 "),s("code",[this._v("data.a.b")]),this._v(" 依然不是响应式属性，但是这个问题还是比较容易解决的，只需要递归定义即可：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("walk")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" key "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" data"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dep "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" val "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" data"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 如果 val 是对象，递归调用 walk 函数将其转为访问器属性")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" nativeString "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("toString"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("nativeString "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'[object Object]'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("walk")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("defineProperty")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" val"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n        val "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" newVal\n        dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("forEach")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("fn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("get")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Target"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" val\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token function"}},[t._v("walk")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上代码我们将定义访问器属性的逻辑放到了函数 "),s("code",[this._v("walk")]),this._v(" 中，并增加了一段判断逻辑如果某个属性的值仍然是对象，则递归调用 "),s("code",[this._v("walk")]),this._v(" 函数。这样我们就实现了深度定义访问器属性。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("但是虽然经过上面的改造 "),s("code",[this._v("data.a.b")]),this._v(" 已经是访问器属性了，但是如下代码依然不能正确执行：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("$watch")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'a.b'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'修改了字段 a.b'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("来看看目前 "),s("code",[this._v("$watch")]),this._v(" 函数的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("$watch")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fn"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Target "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" fn\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 读取字段值，触发 set 函数")]),t._v("\n  data"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("读取字段值的时候我们直接使用 "),a("code",[t._v("data[exp]")]),t._v("，如果按照 "),a("code",[t._v("$watch('a.b', fn)")]),t._v(" 这样调用 "),a("code",[t._v("$watch")]),t._v(" 函数，那么 "),a("code",[t._v("data[exp]")]),t._v(" 等价于 "),a("code",[t._v("data['a.b']")]),t._v("，这显然是不正确的，正确的读取字段值的方式应该是 "),a("code",[t._v("data['a']['b']")]),t._v("。所以我们需要稍微做一点小小的改造：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    b"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("$watch")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fn"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Target "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" fn\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" pathArr"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      obj "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" data\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 检查 exp 中是否包含 .")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/\\./")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 将字符串转为数组，例：'a.b' => ['a', 'b']")]),t._v("\n    pathArr "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("split")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'.'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 使用循环读取到 data.a.b")]),t._v("\n    pathArr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("forEach")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      obj "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  data"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们对 "),a("code",[t._v("$watch")]),t._v(" 函数做了一些改造，首先检查要读取的字段是否包含 "),a("code",[t._v(".")]),t._v("，如果包含 "),a("code",[t._v(".")]),t._v(" 说明读取嵌套对象的字段，这时候我们使用字符串的 "),a("code",[t._v("split('.')")]),t._v(" 函数将字符串转为数组，所以如果访问的路径是 "),a("code",[t._v("a.b")]),t._v(" 那么转换后的数组就是 "),a("code",[t._v("['a', 'b']")]),t._v("，然后使用一个循环从而读取到嵌套对象的属性值，不过需要注意的是读取到嵌套对象的属性值之后应该立即 "),a("code",[t._v("return")]),t._v("，不需要再执行后面的代码。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("下面我们再进一步，我们思考一下 "),a("code",[t._v("$watch")]),t._v(" 函数的原理的是什么？其实 "),a("code",[t._v("$watch")]),t._v(" 函数所做的事情就是想方设法的访问到你要观测的字段，从而触发该字段的 "),a("code",[t._v("get")]),t._v(" 函数，进而收集依赖(观察者)。现在我们传递给 "),a("code",[t._v("$watch")]),t._v(" 函数的第一个参数是一个字符串，代表要访问数据的哪一个字段属性，那么除了字符串之外可不可以是一个函数呢？假设我们有一个函数叫做 "),a("code",[t._v("render")]),t._v("，如下")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'霍春阳'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  age"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("24")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("render")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" document"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("write")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`姓名：")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("name"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("; 年龄：")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("age"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到 "),a("code",[t._v("render")]),t._v(" 函数依赖了数据对象 "),a("code",[t._v("data")]),t._v("，那么 "),a("code",[t._v("render")]),t._v(" 函数的执行是不是会触发 "),a("code",[t._v("data.name")]),t._v(" 和 "),a("code",[t._v("data.age")]),t._v(" 这两个字段的 "),a("code",[t._v("get")]),t._v(" 拦截器呢？答案是肯定的，当然会！所以我们可以将 "),a("code",[t._v("render")]),t._v(" 函数作为 "),a("code",[t._v("$watch")]),t._v(" 函数的第一个参数：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token function"}},[this._v("$watch")]),s("span",{attrs:{class:"token punctuation"}},[this._v("(")]),this._v("render"),s("span",{attrs:{class:"token punctuation"}},[this._v(",")]),this._v(" render"),s("span",{attrs:{class:"token punctuation"}},[this._v(")")]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为了能够保证 "),s("code",[this._v("$watch")]),this._v(" 函数正常执行，我们需要对 "),s("code",[this._v("$watch")]),this._v(" 函数做如下修改：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("$watch")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fn"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Target "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" fn\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" pathArr"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      obj "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" data\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 如果 exp 是函数，直接执行该函数")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" exp "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("exp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/\\./")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    pathArr "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" exp"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("split")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'.'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    pathArr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("forEach")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("p "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      obj "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("p"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  data"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("exp"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在上面的代码中，我们检测了 "),a("code",[t._v("exp")]),t._v(" 的类型，如果是函数则直接执行之，由于 "),a("code",[t._v("render")]),t._v(" 函数的执行会触发数据字段的 "),a("code",[t._v("get")]),t._v(" 拦截器，所以依赖会被收集。同时我们要注意传递给 "),a("code",[t._v("$watch")]),t._v(" 函数的第二个参数：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token function"}},[this._v("$watch")]),s("span",{attrs:{class:"token punctuation"}},[this._v("(")]),this._v("render"),s("span",{attrs:{class:"token punctuation"}},[this._v(",")]),this._v(" render"),s("span",{attrs:{class:"token punctuation"}},[this._v(")")]),this._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("第二个参数依然是 "),a("code",[t._v("render")]),t._v(" 函数，也就是说当依赖发生变化时，会重新执行 "),a("code",[t._v("render")]),t._v(" 函数，这样我们就实现了数据变化，并将变化自动应用到 "),a("code",[t._v("DOM")]),t._v("。其实这大概就是 "),a("code",[t._v("Vue")]),t._v(" 的原理，但我们做的还远远不够，比如上面这句代码，第一个参数中 "),a("code",[t._v("render")]),t._v(" 函数的执行使得我们能够收集依赖，当依赖变化时会重新执行第二个参数中的 "),a("code",[t._v("render")]),t._v(" 函数，但不要忘了这又会触发一次数据字段的 "),a("code",[t._v("get")]),t._v(" 拦截器，所以此时已经收集了两遍重复的依赖，那么我们是不是要想办法避免收集冗余的依赖呢？除此之外我们也没有对数组做处理，我们将这些问题留到后面，看看在 "),a("code",[t._v("Vue")]),t._v(" 中它是如何处理的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在我们这个不严谨的实现暂时就到这里，意图在于让大家明白数据响应系统的整体思路，为接下来真正进入 "),s("code",[this._v("Vue")]),this._v(" 源码做必要的铺垫。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"observe-工厂函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#observe-工厂函数","aria-hidden":"true"}},[this._v("#")]),this._v(" observe 工厂函数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("了解了数据响应系统的基本思路，我们是时候回过头来深入研究 "),s("code",[this._v("Vue")]),this._v(" 的数据响应系统是如何实现的了，我们回到 "),s("code",[this._v("initData")]),this._v(" 函数的最后一句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// observe data")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("observe")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("/* asRootData */")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("调用了 "),a("code",[t._v("observe")]),t._v(" 函数观测数据，"),a("code",[t._v("observe")]),t._v(" 函数来自于 "),a("code",[t._v("core/observer/index.js")]),t._v(" 文件，打开该文件找到 "),a("code",[t._v("observe")]),t._v(" 函数：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("observe")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" asRootData"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("boolean"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Observer "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token function"}},[t._v("isObject")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" value "),a("span",{attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("VNode")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" ob"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Observer "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("hasOwn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'__ob__'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ob__ "),a("span",{attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Observer")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ob "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ob__\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    shouldObserve "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token function"}},[t._v("isServerRendering")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isPlainObject")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n    Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isExtensible")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_isVue\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ob "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Observer")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("asRootData "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" ob"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ob"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vmCount"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ob\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上是 "),a("code",[t._v("observe")]),t._v(" 函数的全部代码， "),a("code",[t._v("observe")]),t._v(" 函数接收两个参数，第一个参数是要观测的数据，第二个参数是一个布尔值，代表将要被观测的数据是否是根级数据。在 "),a("code",[t._v("observe")]),t._v(" 函数的一开始是一段 "),a("code",[t._v("if")]),t._v(" 判断语句：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token function"}},[t._v("isObject")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" value "),a("span",{attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("VNode")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("用来判断如果要观测的数据不是一个对象或者是 "),a("code",[t._v("VNode")]),t._v(" 实例，则直接 "),a("code",[t._v("return")]),t._v(" 。接着定义变量 "),a("code",[t._v("ob")]),t._v("，该变量用来保存 "),a("code",[t._v("Observer")]),t._v(" 实例，可以发现 "),a("code",[t._v("observe")]),t._v(" 函数的返回值就是 "),a("code",[t._v("ob")]),t._v("。紧接着又是一个 "),a("code",[t._v("if...else")]),t._v(" 分支：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("hasOwn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'__ob__'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ob__ "),a("span",{attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Observer")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  ob "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ob__\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  shouldObserve "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n  "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token function"}},[t._v("isServerRendering")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isPlainObject")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n  Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isExtensible")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n  "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_isVue\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  ob "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Observer")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们先看 "),a("code",[t._v("if")]),t._v(" 分支的判断条件，首先使用 "),a("code",[t._v("hasOwn")]),t._v(" 函数检测数据对象 "),a("code",[t._v("value")]),t._v(" 自身是否含有 "),a("code",[t._v("__ob__")]),t._v(" 属性，并且 "),a("code",[t._v("__ob__")]),t._v(" 属性应该是 "),a("code",[t._v("Observer")]),t._v(" 的实例。如果为真则直接将数据对象自身的 "),a("code",[t._v("__ob__")]),t._v(" 属性的值作为 "),a("code",[t._v("ob")]),t._v(" 的值："),a("code",[t._v("ob = value.__ob__")]),t._v("。那么 "),a("code",[t._v("__ob__")]),t._v(" 是什么呢？其实当一个数据对象被观测之后将会在该对象上定义 "),a("code",[t._v("__ob__")]),t._v(" 属性，所以 "),a("code",[t._v("if")]),t._v(" 分支的作用是用来避免重复观测一个数据对象。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("接着我们再来看看 "),a("code",[t._v("else...if")]),t._v(" 分支，如果数据对象上没有定义 "),a("code",[t._v("__ob__")]),t._v(" 属性，那么说明该对象没有被观测过，进而会判断 "),a("code",[t._v("else...if")]),t._v(" 分支，如果 "),a("code",[t._v("else...if")]),t._v(" 分支的条件为真，那么会执行 "),a("code",[t._v("ob = new Observer(value)")]),t._v(" 对数据对象进行观测。也就是说只有当数据对象满足所有 "),a("code",[t._v("else...if")]),t._v(" 分支的条件才会被观测，我们看看需要满足什么条件：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("第一个条件是 "),s("code",[this._v("shouldObserve")]),this._v(" 必须为 "),s("code",[this._v("true")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("shouldObserve")]),this._v(" 变量也定义在 "),s("code",[this._v("core/observer/index.js")]),this._v(" 文件内，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("/**\n * In some cases we may want to disable observation inside a component's\n * update computation.\n */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" shouldObserve"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boolean "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boolean"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  shouldObserve "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" value\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("该变量的初始值为 "),a("code",[t._v("true")]),t._v("，在 "),a("code",[t._v("shouldObserve")]),t._v(" 变量的下面定义了 "),a("code",[t._v("toggleObserving")]),t._v(" 函数，该函数接收一个布尔值参数，用来切换 "),a("code",[t._v("shouldObserve")]),t._v(" 变量的真假值，我们可以把 "),a("code",[t._v("shouldObserve")]),t._v(" 想象成一个开关，为 "),a("code",[t._v("true")]),t._v(" 时说明打开了开关，此时可以对数据进行观测，为 "),a("code",[t._v("false")]),t._v(" 时可以理解为关闭了开关，此时数据对象将不会被观测。为什么这么设计呢？原因是有一些场景下确实需要这个开关从而达到一些目的，后面我们遇到的时候再仔细来说。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("第二个条件是 "),s("code",[this._v("!isServerRendering()")]),this._v(" 必须为真")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("isServerRendering()")]),this._v(" 函数的返回值是一个布尔值，用来判断是否是服务端渲染。也就是说只有当不是服务端渲染的时候才会观测数据，关于这一点 "),s("code",[this._v("Vue")]),this._v(" 的服务端渲染文档中有相关介绍，我们不做过多说明。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("第三个条件是 "),s("code",[this._v("(Array.isArray(value) || isPlainObject(value))")]),this._v(" 必须为真")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("第四个条件是 "),s("code",[this._v("Object.isExtensible(value)")]),this._v(" 必须为真")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("也就是说要被观测的数据对象必须是"),a("strong",[t._v("可扩展的")]),t._v("。一个普通的对象默认就是可扩展的，以下三个方法都可以使得一个对象变得不可扩展："),a("code",[t._v("Object.preventExtensions()")]),t._v("、"),a("code",[t._v("Object.freeze()")]),t._v(" 以及 "),a("code",[t._v("Object.seal()")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("第五个条件是 "),s("code",[this._v("!value._isVue")]),this._v(" 必须为真")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们知道 "),s("code",[this._v("Vue")]),this._v(" 实例对象拥有 "),s("code",[this._v("_isVue")]),this._v(" 属性，所以这个条件用来避免 "),s("code",[this._v("Vue")]),this._v(" 实例对象被观测。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当一个对象满足了以上五个条件时，就会执行 "),s("code",[this._v("else...if")]),this._v(" 语句块的代码，即创建一个 "),s("code",[this._v("Observer")]),this._v(" 实例：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("ob "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Observer")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"observer-构造函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#observer-构造函数","aria-hidden":"true"}},[this._v("#")]),this._v(" Observer 构造函数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("其实真正将数据对象转换成响应式数据的是 "),s("code",[this._v("Observer")]),this._v(" 函数，它是一个构造函数，同样定义在 "),s("code",[this._v("core/observer/index.js")]),this._v(" 文件下，如下是简化后的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Observer")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  vmCount"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" number"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// number of vms that has this object as root $data")]),t._v("\n\n  "),a("span",{attrs:{class:"token function"}},[t._v("constructor")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token function"}},[t._v("walk")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  "),a("span",{attrs:{class:"token function"}},[t._v("observeArray")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("items"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("any"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以清晰的看到 "),a("code",[t._v("Observer")]),t._v(" 类的实例对象将拥有三个实例属性，分别是 "),a("code",[t._v("value")]),t._v("、"),a("code",[t._v("dep")]),t._v(" 和 "),a("code",[t._v("vmCount")]),t._v(" 以及两个实例方法 "),a("code",[t._v("walk")]),t._v(" 和 "),a("code",[t._v("observeArray")]),t._v("。"),a("code",[t._v("Observer")]),t._v(" 类的构造函数接收一个参数，即数据对象。下面我们就从 "),a("code",[t._v("constructor")]),t._v(" 方法开始，研究实例化一个 "),a("code",[t._v("Observer")]),t._v(" 类时都做了哪些事情。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"数据对象的-ob-属性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数据对象的-ob-属性","aria-hidden":"true"}},[this._v("#")]),this._v(" 数据对象的 "),s("code",[this._v("__ob__")]),this._v(" 属性")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如下是 "),s("code",[this._v("constructor")]),this._v(" 方法的全部代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("constructor")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" value\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dep "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Dep")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vmCount "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("def")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'__ob__'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" augment "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" hasProto\n      "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" protoAugment\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" copyAugment\n    "),a("span",{attrs:{class:"token function"}},[t._v("augment")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arrayMethods"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arrayKeys"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("observeArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("walk")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("constructor")]),this._v(" 方法的参数就是在实例化 "),s("code",[this._v("Observer")]),this._v(" 实例时传递的参数，即数据对象本身，可以发现，实例对象的 "),s("code",[this._v("value")]),this._v(" 属性引用了数据对象：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[this._v("this")]),s("span",{attrs:{class:"token punctuation"}},[this._v(".")]),this._v("value "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" value\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("实例对象的 "),s("code",[this._v("dep")]),this._v(" 属性，保存了一个新创建的 "),s("code",[this._v("Dep")]),this._v(" 实例对象：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dep "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Dep")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么这里的 "),s("code",[this._v("Dep")]),this._v(" 是什么呢？就像我们在了解数据响应系统基本思路中所讲到的，它就是一个收集依赖的“筐”。但这个“筐”并不属于某一个字段，后面我们会发现，这个框是属于某一个对象或数组的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("实例对象的 "),s("code",[this._v("vmCount")]),this._v(" 属性被设置为 "),s("code",[this._v("0")]),this._v("："),s("code",[this._v("this.vmCount = 0")]),this._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("初始化完成三个实例属性之后，使用 "),a("code",[t._v("def")]),t._v(" 函数，为数据对象定义了一个 "),a("code",[t._v("__ob__")]),t._v(" 属性，这个属性的值就是当前 "),a("code",[t._v("Observer")]),t._v(" 实例对象。其中 "),a("code",[t._v("def")]),t._v(" 函数其实就是 "),a("code",[t._v("Object.defineProperty")]),t._v(" 函数的简单封装，之所以这里使用 "),a("code",[t._v("def")]),t._v(" 函数定义 "),a("code",[t._v("__ob__")]),t._v(" 属性是因为这样可以定义不可枚举的属性，这样后面遍历数据对象的时候就能够防止遍历到 "),a("code",[t._v("__ob__")]),t._v(" 属性。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么经过 "),s("code",[this._v("def")]),this._v(" 函数处理之后，"),s("code",[this._v("data")]),this._v(" 对象应该变成如下这个样子：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// __ob__ 是不可枚举的属性")]),t._v("\n  __ob__"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" data"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// value 属性指向 data 数据对象本身，这是一个循环引用")]),t._v("\n    dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" dep实例对象"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// new Dep()")]),t._v("\n    vmCount"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"响应式数据之纯对象的处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#响应式数据之纯对象的处理","aria-hidden":"true"}},[this._v("#")]),this._v(" 响应式数据之纯对象的处理")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接着进入一个 "),s("code",[this._v("if...else")]),this._v(" 判断分支：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" augment "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" hasProto\n    "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" protoAugment\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" copyAugment\n  "),a("span",{attrs:{class:"token function"}},[t._v("augment")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arrayMethods"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arrayKeys"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("observeArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("walk")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("该判断用来区分数据对象到底是数组还是一个纯对象的，因为对于数组和纯对象的处理方式是不同的，为了更好理解我们先看数据对象是一个纯对象的情况，这个时候代码会走 "),s("code",[this._v("else")]),this._v(" 分支，即执行 "),s("code",[this._v("this.walk(value)")]),this._v(" 函数，我们知道这个函数实例对象方法，找到这个方法：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("walk")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" keys "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("keys")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" keys"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" keys"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("walk")]),t._v(" 方法很简单，首先使用 "),a("code",[t._v("Object.keys(obj)")]),t._v(" 获取对象属性所有可枚举的属性，然后使用 "),a("code",[t._v("for")]),t._v(" 循环遍历这些属性，同时为每个属性调用了 "),a("code",[t._v("defineReactive")]),t._v(" 函数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"definereactive-函数"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#definereactive-函数","aria-hidden":"true"}},[this._v("#")]),this._v(" defineReactive 函数")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那我们就看一看 "),s("code",[this._v("defineReactive")]),this._v(" 函数都做了什么，该函数也定义在 "),s("code",[this._v("core/observer/index.js")]),this._v(" 文件，内容如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  key"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  val"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  customSetter"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Function"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  shallow"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boolean\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dep "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Dep")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" property "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("getOwnPropertyDescriptor")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("property "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" property"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("configurable "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// cater for pre-defined getter/setters")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" getter "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" property "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" property"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("get")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" setter "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" property "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" property"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("getter "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" setter"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" arguments"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    val "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" childOb "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("shallow "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("observe")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("defineProperty")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    enumerable"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    configurable"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("get")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("reactiveGetter")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("reactiveSetter")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("defineReactive")]),t._v(" 函数的核心就是将"),a("strong",[t._v("数据对象的数据属性转换为访问器属性")]),t._v("，即为数据对象的属性设置一对 "),a("code",[t._v("getter/setter")]),t._v("，但其中做了很多处理边界条件的工作。"),a("code",[t._v("defineReactive")]),t._v(" 接收五个参数，但是在 "),a("code",[t._v("walk")]),t._v(" 方法中调用 "),a("code",[t._v("defineReactive")]),t._v(" 函数时只传递了前两个参数，即数据对象和属性的键名。我们看一下 "),a("code",[t._v("defineReactive")]),t._v(" 的函数体，首先定义了 "),a("code",[t._v("dep")]),t._v(" 常量，它是一个 "),a("code",[t._v("Dep")]),t._v(" 实例对象：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dep "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Dep")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们在讲解 "),a("code",[t._v("Observer")]),t._v(" 的 "),a("code",[t._v("constructor")]),t._v(" 方法时看到过，在 "),a("code",[t._v("constructor")]),t._v(" 方法中为数据对象定义了一个 "),a("code",[t._v("__ob__")]),t._v(" 属性，该属性是一个 "),a("code",[t._v("Observer")]),t._v(" 实例对象，且该对象包含一个 "),a("code",[t._v("Dep")]),t._v(" 实例对象：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  __ob__"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" data"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" dep实例对象"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// new Dep() , 包含 Dep 实例对象")]),t._v("\n    vmCount"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("当时我们说过 "),a("code",[t._v("__ob__.dep")]),t._v(" 这个 "),a("code",[t._v("Dep")]),t._v(" 实例对象的作用与我们在讲解数据响应系统基本思路一节中所说的“筐”的作用不同。至于他的作用是什么我们后面会讲到。其实与我们前面所说过的“筐”的作用相同的 "),a("code",[t._v("Dep")]),t._v(" 实例对象是在 "),a("code",[t._v("defineReactive")]),t._v(" 函数一开始定义的 "),a("code",[t._v("dep")]),t._v(" 常量，即：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dep "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Dep")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这个 "),a("code",[t._v("dep")]),t._v(" 常量所引用的 "),a("code",[t._v("Dep")]),t._v(" 实例对象才与我们前面讲过的“筐”的作用相同。细心的同学可能已经注意到了 "),a("code",[t._v("dep")]),t._v(" 在访问器属性的 "),a("code",[t._v("getter/setter")]),t._v(" 中被闭包引用，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  key"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  val"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  customSetter"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Function"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  shallow"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boolean\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" dep "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Dep")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n\n  Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("defineProperty")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    enumerable"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    configurable"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("get")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("reactiveGetter")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" value "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" getter "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" getter"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" val\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v("// 这里闭包引用了上面的 dep 常量")]),t._v("\n        dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("depend")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("reactiveSetter")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 这里闭包引用了上面的 dep 常量")]),t._v("\n      dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("notify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上面的代码中注释所写的那样，在访问器属性的 "),a("code",[t._v("getter/setter")]),t._v(" 中，通过闭包引用了前面定义的“筐”，即 "),a("code",[t._v("dep")]),t._v(" 常量。这里大家要明确一件事情，即"),a("strong",[t._v("每一个数据字段都通过闭包引用着属于自己的 "),a("code",[t._v("dep")]),t._v(" 常量")]),t._v("。因为在 "),a("code",[t._v("walk")]),t._v(" 函数中通过循环遍历了所有数据对象的属性，并调用 "),a("code",[t._v("defineReactive")]),t._v(" 函数，所以每次调用 "),a("code",[t._v("defineReactive")]),t._v(" 定义访问器属性时，该属性的 "),a("code",[t._v("setter/getter")]),t._v(" 都闭包引用了一个属于自己的“筐”。假设我们有如下数据字段：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  b"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么字段 "),s("code",[this._v("data.a")]),this._v(" 和 "),s("code",[this._v("data.b")]),this._v(" 都将通过闭包引用属于自己的 "),s("code",[this._v("Dep")]),this._v(" 实例对象，如下图所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"http://7xlolm.com1.z0.glb.clouddn.com/2018-04-05-032455.jpg",alt:""}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("每个字段的 "),s("code",[this._v("Dep")]),this._v(" 对象都被用来收集那些属于对应字段的依赖。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在定义 "),s("code",[this._v("dep")]),this._v(" 常量之后，是这样一段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" property "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("getOwnPropertyDescriptor")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("property "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" property"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("configurable "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先通过 "),a("code",[t._v("Object.getOwnPropertyDescriptor")]),t._v(" 函数获取该字段可能已有的属性描述对象，并将该对象保存在 "),a("code",[t._v("property")]),t._v(" 常量中，接着是一个 "),a("code",[t._v("if")]),t._v(" 语句块，判断该字段是否是可配置的，如果不可配置("),a("code",[t._v("property.configurable === false")]),t._v(")，那么直接 "),a("code",[t._v("return")]),t._v(" ，即不会继续执行 "),a("code",[t._v("defineReactive")]),t._v(" 函数。这么做也是合理的，因为一个不可配置的属性是不能使用也没必要使用 "),a("code",[t._v("Object.defineProperty")]),t._v(" 改变其属性定义的。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// cater for pre-defined getter/setters")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" getter "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" property "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" property"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("get")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" setter "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" property "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" property"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("getter "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" setter"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" arguments"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  val "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" childOb "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("shallow "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("observe")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码的前两句定义了 "),a("code",[t._v("getter")]),t._v(" 和 "),a("code",[t._v("setter")]),t._v(" 常量，分别保存了来自 "),a("code",[t._v("property")]),t._v(" 对象的 "),a("code",[t._v("get")]),t._v(" 和 "),a("code",[t._v("set")]),t._v(" 函数，我们知道 "),a("code",[t._v("property")]),t._v(" 对象是属性的描述对象，一个对象的属性很可能已经是一个访问器属性了，所以该属性很可能已经存在 "),a("code",[t._v("get")]),t._v(" 或 "),a("code",[t._v("set")]),t._v(" 方法。由于接下来会使用 "),a("code",[t._v("Object.defineProperty")]),t._v(" 函数重新定义属性的 "),a("code",[t._v("setter/getter")]),t._v("，这会导致属性原有的 "),a("code",[t._v("set")]),t._v(" 和 "),a("code",[t._v("get")]),t._v(" 方法被覆盖，所以要将属性原有的 "),a("code",[t._v("setter/getter")]),t._v(" 缓存，并在重新定义的 "),a("code",[t._v("set")]),t._v(" 和 "),a("code",[t._v("get")]),t._v(" 方法中调用缓存的函数，从而做到不影响属性的原有读写操作。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上面这段代码中比较难理解的是 "),s("code",[this._v("if")]),this._v(" 条件语句：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("getter "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" setter"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" arguments"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("其中 "),a("code",[t._v("arguments.length === 2")]),t._v(" 这个条件好理解，当只传递两个参数时，说明没有传递第三个参数 "),a("code",[t._v("val")]),t._v("，那么此时需要根据 "),a("code",[t._v("key")]),t._v(" 主动去对象上获取相应的值，即执行 "),a("code",[t._v("if")]),t._v(" 语句块内的代码："),a("code",[t._v("val = obj[key]")]),t._v("。那么 "),a("code",[t._v("(!getter || setter)")]),t._v(" 这个条件的意思是什么呢？要理解这个条件我们需要思考一些实际应用的场景，或者说边界条件，但是现在还不适合给大家讲解，我们等到讲解完整个 "),a("code",[t._v("defineReactive")]),t._v(" 函数之后，再回头来说。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("code",[this._v("if")]),this._v(" 语句块的下面，是这句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" childOb "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("shallow "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("observe")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("定义了 "),a("code",[t._v("childOb")]),t._v(" 变量，我们知道，在 "),a("code",[t._v("if")]),t._v(" 语句块里面，获取到了对象属性的值 "),a("code",[t._v("val")]),t._v("，但是 "),a("code",[t._v("val")]),t._v(" 本身有可能也是一个对象，那么此时应该继续调用 "),a("code",[t._v("observe(val)")]),t._v(" 函数观测该对象从而深度观测数据对象。但前提是 "),a("code",[t._v("defineReactive")]),t._v(" 函数的最后一个参数 "),a("code",[t._v("shallow")]),t._v(" 应该是假，即 "),a("code",[t._v("!shallow")]),t._v(" 为真时才会继续调用 "),a("code",[t._v("observe")]),t._v(" 函数深度观测，由于在 "),a("code",[t._v("walk")]),t._v(" 函数中调用 "),a("code",[t._v("defineReactive")]),t._v(" 函数时没有传递 "),a("code",[t._v("shallow")]),t._v(" 参数，所以该参数是 "),a("code",[t._v("undefined")]),t._v("，那么也就是说默认就是深度观测。其实非深度观测的场景我们早就遇到过了，即 "),a("code",[t._v("initRender")]),t._v(" 函数中在 "),a("code",[t._v("Vue")]),t._v(" 实例对象上定义 "),a("code",[t._v("$attrs")]),t._v(" 属性和 "),a("code",[t._v("$listeners")]),t._v(" 属性时就是非深度观测，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'$attrs'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" parentData "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" parentData"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrs "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" emptyObject"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 最后一个参数 shallow 为 true")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'$listeners'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_parentListeners "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" emptyObject"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("大家要注意一个问题，即使用 "),a("code",[t._v("observe(val)")]),t._v(" 深度观测数据对象时，这里的 "),a("code",[t._v("val")]),t._v(" 未必有值，因为必须在满足条件 "),a("code",[t._v("(!getter || setter) && arguments.length === 2")]),t._v(" 时，才会触发取值的动作："),a("code",[t._v("val = obj[key]")]),t._v("，所以一旦不满足条件即使属性是有值的但是由于没有触发取值的动作，所以 "),a("code",[t._v("val")]),t._v(" 依然是 "),a("code",[t._v("undefined")]),t._v("。这就会导致深度观测无效。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"被观测后的数据对象的样子"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#被观测后的数据对象的样子","aria-hidden":"true"}},[this._v("#")]),this._v(" 被观测后的数据对象的样子")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在我们需要明确一件事情，那就是一个数据对象经过了 "),s("code",[this._v("observe")]),this._v(" 函数处理之后变成了什么样子，假设我们有如下数据对象：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    b"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token function"}},[t._v("observe")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("数据对象 "),a("code",[t._v("data")]),t._v(" 拥有一个叫做 "),a("code",[t._v("a")]),t._v(" 的属性，且属性 "),a("code",[t._v("a")]),t._v(" 的值是另外一个对象，该对象拥有一个叫做 "),a("code",[t._v("b")]),t._v(" 的属性。那么经过 "),a("code",[t._v("observe")]),t._v(" 处理之后， "),a("code",[t._v("data")]),t._v(" 和 "),a("code",[t._v("data.a")]),t._v(" 这两个对象都被定义了 "),a("code",[t._v("__ob__")]),t._v(" 属性，并且访问器属性 "),a("code",[t._v("a")]),t._v(" 和 "),a("code",[t._v("b")]),t._v(" 的 "),a("code",[t._v("setter/getter")]),t._v(" 都通过闭包引用着属于自己的 "),a("code",[t._v("Dep")]),t._v(" 实例对象和 "),a("code",[t._v("childOb")]),t._v(" 对象：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 属性 a 通过 setter/getter 通过闭包引用着 dep 和 childOb")]),t._v("\n  a"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 属性 b 通过 setter/getter 通过闭包引用着 dep 和 childOb")]),t._v("\n    b"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n    __ob__"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("a"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vmCount"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  __ob__"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vmCount"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"http://7xlolm.com1.z0.glb.clouddn.com/2018-04-06-072754.jpg",alt:""}})])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("需要注意的是，属性 "),a("code",[t._v("a")]),t._v(" 闭包引用的 "),a("code",[t._v("childOb")]),t._v(" 实际上就是 "),a("code",[t._v("data.a.__ob__")]),t._v("。而属性 "),a("code",[t._v("b")]),t._v(" 闭包引用的 "),a("code",[t._v("childOb")]),t._v(" 是 "),a("code",[t._v("undefined")]),t._v("，因为属性 "),a("code",[t._v("b")]),t._v(" 是基本类型值，并不是对象也不是数组。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"在-get-函数中如何收集依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在-get-函数中如何收集依赖","aria-hidden":"true"}},[this._v("#")]),this._v(" 在 get 函数中如何收集依赖")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们回过头来继续查看 "),s("code",[this._v("defineReactive")]),this._v(" 函数的代码，接下来是 "),s("code",[this._v("defineReactive")]),this._v(" 函数的关键代码，即使用 "),s("code",[this._v("Object.defineProperty")]),this._v(" 函数定义访问器属性：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("defineProperty")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  enumerable"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  configurable"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("get")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("reactiveGetter")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("reactiveSetter")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("当执行完以上代码实际上 "),a("code",[t._v("defineReactive")]),t._v(" 函数就执行完毕了，对于访问器属性的 "),a("code",[t._v("get")]),t._v(" 和 "),a("code",[t._v("set")]),t._v(" 函数是不会执行的，因为此时没有触发属性的读取和设置操作。不过这不妨碍我们研究一下在 "),a("code",[t._v("get")]),t._v(" 和 "),a("code",[t._v("set")]),t._v(" 函数中都做了哪些事情，这里面就包含了我们在前面埋下伏笔的 "),a("code",[t._v("if")]),t._v(" 条件语句的答案。我们先从 "),a("code",[t._v("get")]),t._v(" 函数开始，看一看当属性被读取的时候都做了哪些事情，"),a("code",[t._v("get")]),t._v(" 函数如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("get")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("reactiveGetter")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" value "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" getter "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" getter"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" val\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("depend")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("childOb"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      childOb"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("depend")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token function"}},[t._v("dependArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("既然是 "),s("code",[this._v("getter")]),this._v("，那么当然要能够正确的返回属性的值才能，我们知道依赖的收集时机就是属性被读取的时候，所以 "),s("code",[this._v("get")]),this._v(" 函数做了两件事：正确的返回属性值以及收集依赖，我们具体看一下代码，"),s("code",[this._v("get")]),this._v(" 函数的第一句代码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" value "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" getter "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" getter"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" val\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先判断是否存在 "),a("code",[t._v("getter")]),t._v("，我们知道 "),a("code",[t._v("getter")]),t._v(" 常量中保存的属性原型的 "),a("code",[t._v("get")]),t._v(" 函数，如果 "),a("code",[t._v("getter")]),t._v(" 存在那么直接调用该函数，并以该函数的返回值作为属性的值，保证属性的原有读取操作正常运作。如果 "),a("code",[t._v("getter")]),t._v(" 不存在则使用 "),a("code",[t._v("val")]),t._v(" 作为属性的值。可以发现 "),a("code",[t._v("get")]),t._v(" 函数的最后一句将 "),a("code",[t._v("value")]),t._v(" 常量返回，这样 "),a("code",[t._v("get")]),t._v(" 函数需要做的第一件事就完成了，即正确的返回属性值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("除了正确的返回属性值，还要收集依赖，而处于 "),s("code",[this._v("get")]),this._v(" 函数第一行和最后一行代码中间的所有代码都是用来完成收集依赖这件事儿的，下面我们就看一下它是如何收集依赖的，由于我们还没有讲解过 "),s("code",[this._v("Dep")]),this._v(" 这个类，所以现在大家可以简单的认为 "),s("code",[this._v("dep.depend()")]),this._v(" 这句代码的执行就意味着依赖被收集了。接下来我们仔细看一下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("depend")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("childOb"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    childOb"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("depend")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("dependArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先判断 "),a("code",[t._v("Dep.target")]),t._v(" 是否存在，那么 "),a("code",[t._v("Dep.target")]),t._v(" 是什么呢？其实 "),a("code",[t._v("Dep.target")]),t._v(" 与我们在数据响应系统基本思路一节中所讲的 "),a("code",[t._v("Target")]),t._v(" 作用相同，所以 "),a("code",[t._v("Dep.target")]),t._v(" 中保存的值就是要被收集的依赖(观察者)。所以如果 "),a("code",[t._v("Dep.target")]),t._v(" 存在的话说明有依赖需要被收集，这个时候才需要执行 "),a("code",[t._v("if")]),t._v(" 语句块内的代码，如果 "),a("code",[t._v("Dep.target")]),t._v(" 不存在就意味着没有需要被收集的依赖，所以当然就不需要执行 "),a("code",[t._v("if")]),t._v(" 语句块内的代码了。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在 "),a("code",[t._v("if")]),t._v(" 语句块内第一句执行的代码就是："),a("code",[t._v("dep.depend()")]),t._v("，执行 "),a("code",[t._v("dep")]),t._v(" 对象的 "),a("code",[t._v("depend")]),t._v(" 方法将依赖收集到 "),a("code",[t._v("dep")]),t._v(" 这个“筐”中，这里的 "),a("code",[t._v("dep")]),t._v(" 对象就是属性的 "),a("code",[t._v("getter/setter")]),t._v(" 通过闭包引用的“筐”。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接着又判断了 "),s("code",[this._v("childOb")]),this._v(" 是否存在，如果存在那么就执行 "),s("code",[this._v("childOb.dep.depend()")]),this._v("，这段代码是什么意思呢？要想搞清楚这段代码的作用，你需要知道 "),s("code",[this._v("childOb")]),this._v(" 是什么，前面我们分析过，假设有如下数据对象：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    b"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("该数据对象经过观测处理之后，将被添加 "),s("code",[this._v("__ob__")]),this._v(" 属性，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  a"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    b"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    __ob__"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vmCount"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  __ob__"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vmCount"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("对于属性 "),a("code",[t._v("a")]),t._v(" 来讲，访问器属性 "),a("code",[t._v("a")]),t._v(" 的 "),a("code",[t._v("setter/getter")]),t._v(" 通过闭包引用了一个 "),a("code",[t._v("Dep")]),t._v(" 实例对象，即属性 "),a("code",[t._v("a")]),t._v(" 用来收集依赖的“筐”。除此之外访问器属性 "),a("code",[t._v("a")]),t._v(" 的 "),a("code",[t._v("setter/getter")]),t._v(" 还闭包引用着 "),a("code",[t._v("childOb")]),t._v("，且 "),a("code",[t._v("childOb === data.a.__ob__")]),t._v(" 所以 "),a("code",[t._v("childOb.dep === data.a.__ob__.dep")]),t._v("。也就是说 "),a("code",[t._v("childOb.dep.depend()")]),t._v(" 这句话的执行说明除了要将依赖收集到属性 "),a("code",[t._v("a")]),t._v(" 自己的“筐”里之外，还要将同样的依赖收集到 "),a("code",[t._v("data.a.__ob__.dep")]),t._v(" 这里”筐“里，为什么要将同样的依赖分别收集到这两个不同的”筐“里呢？其实答案就在于这两个”筐“里收集的依赖的触发时机是不同的，即作用不同，两个”筐“如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("第一个”筐“是 "),s("code",[this._v("dep")])]),s("li",[this._v("第二个”筐“是 "),s("code",[this._v("childOb.dep")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("第一个”筐“里收集的依赖的触发时机是当属性值被修改时触发，即在 "),a("code",[t._v("set")]),t._v(" 函数中触发："),a("code",[t._v("dep.notify()")]),t._v("。而第二个”筐“里收集的依赖的触发时机是在使用 "),a("code",[t._v("$set")]),t._v(" 或 "),a("code",[t._v("Vue.set")]),t._v(" 给数据对象添加新属性时触发，我们知道由于 "),a("code",[t._v("js")]),t._v(" 语言的限制，在没有 "),a("code",[t._v("Proxy")]),t._v(" 之前 "),a("code",[t._v("Vue")]),t._v(" 没办法拦截到给对象添加属性的操作。所以 "),a("code",[t._v("Vue")]),t._v(" 才提供了 "),a("code",[t._v("$set")]),t._v(" 和 "),a("code",[t._v("Vue.set")]),t._v(" 等方法让我们有能力给对象添加新属性的同时触发依赖，那么触发依赖是怎么做到的呢？就是通过数据对象的 "),a("code",[t._v("__ob__")]),t._v(" 属性做到的。因为 "),a("code",[t._v("__ob__.dep")]),t._v(" 这个”筐“里收集了与 "),a("code",[t._v("dep")]),t._v(" 这个”筐“同样的依赖。假设 "),a("code",[t._v("Vue.set")]),t._v(" 函数代码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Vue"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function-variable function"}},[t._v("set")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ob__"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("notify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上代码所示，当我们使用上面的代码给 "),s("code",[this._v("data.a")]),this._v(" 对象添加新的属性：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Vue"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'c'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上面的代码之所以能够触发依赖，就是因为 "),s("code",[this._v("Vue.set")]),this._v(" 函数中触发了收集在 "),s("code",[this._v("data.a.__ob__.dep")]),this._v(" 这个”筐“中的依赖：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Vue"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function-variable function"}},[t._v("set")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ob__"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("notify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 相当于 data.a.__ob__.dep.notify()")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nVue"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("a"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'c'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("所以 "),a("code",[t._v("__ob__")]),t._v(" 属性以及 "),a("code",[t._v("__ob__.dep")]),t._v(" 的主要作用是为了添加、删除属性时有能力触发依赖，而这就是 "),a("code",[t._v("Vue.set")]),t._v(" 或 "),a("code",[t._v("Vue.delete")]),t._v(" 的原理。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("code",[this._v("childOb.dep.depend()")]),this._v(" 这句话的下面还有一个 "),s("code",[this._v("if")]),this._v(" 条件语句，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("dependArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果读取的属性值是数组，那么需要调用 "),s("code",[this._v("dependArray")]),this._v(" 函数逐个触发数组每个元素的依赖收集，为什么这么做呢？那是因为 "),s("code",[this._v("Observer")]),this._v(" 类在定义响应式属性时对于纯对象和数组的处理方式是不同，对于上面这段 "),s("code",[this._v("if")]),this._v(" 语句的目的等到我们讲解到对于数组的处理时，会详细说明。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"在-set-函数中如何触发依赖"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#在-set-函数中如何触发依赖","aria-hidden":"true"}},[this._v("#")]),this._v(" 在 set 函数中如何触发依赖")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("code",[this._v("get")]),this._v(" 函数中收集了依赖之后，接下来我们就要看一下在 "),s("code",[this._v("set")]),this._v(" 函数中是如何触发依赖的，即当属性被修改的时候如何触发依赖。"),s("code",[this._v("set")]),this._v(" 函数如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("set")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("reactiveSetter")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" value "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" getter "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" getter"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" val\n  "),a("span",{attrs:{class:"token comment"}},[t._v("/* eslint-disable no-self-compare */")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" value "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newVal "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" newVal "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" value "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("/* eslint-enable no-self-compare */")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" customSetter"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("customSetter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("setter"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    setter"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    val "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" newVal\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  childOb "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("shallow "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("observe")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("notify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("与 "),s("code",[this._v("get")]),this._v(" 函数类似，我们知道 "),s("code",[this._v("get")]),this._v(" 函数主要完成了两部分重要的工作，一个是返回正确的属性值，另一个是收集依赖。同样的 "),s("code",[this._v("set")]),this._v(" 函数也要完成两个重要的事情，第一正确的为属性设置新值，第二是能够触发相应的依赖。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("首先 "),s("code",[this._v("set")]),this._v(" 函数接收一个参数 "),s("code",[this._v("newVal")]),this._v("，即该属性被设置的新值。在函数体内，先执行了这样一句话：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" value "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" getter "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" getter"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" val\n\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这句话与 "),s("code",[this._v("get")]),this._v(" 函数体的第一句话相同，即取得属性原有的值，为什么要取得属性原来的值呢？很简单，因为我们需要拿到原有的值与新的值作比较，并且只有在原有值与新设置的值不相等的情况下才需要触发依赖和重新设置属性值，否则意味着属性值并没有改变，当然不需要做额外的处理。如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("/* eslint-disable no-self-compare */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" value "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newVal "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" newVal "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" value "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里就对比了新值和旧值："),s("code",[this._v("newVal === value")]),this._v("。如果新旧值全等，那么函数直接 "),s("code",[this._v("return")]),this._v("，不做任何处理。但是除了对比新旧值之外，我们还注意到，另外一个条件：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newVal "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" newVal "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" value "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果满足该条件，同样不做任何处理，那么这个条件什么意思呢？"),s("code",[this._v("newVal !== newVal")]),this._v(" 说明新值与新值自身都不全等，同时旧值与旧值自身也不全等，大家想一下在 "),s("code",[this._v("js")]),this._v(" 中什么时候会出现一个值与自身都不全等的？答案就是 "),s("code",[this._v("NaN")]),this._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("NaN")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("所以我们现在重新分析一下这个条件，首先 "),a("code",[t._v("value !== value")]),t._v(" 成立那说明该属性的原有值就是 "),a("code",[t._v("NaN")]),t._v("，同时 "),a("code",[t._v("newVal !== newVal")]),t._v(" 说明为该属性设置的新值也是 "),a("code",[t._v("NaN")]),t._v("，所以这个时候新旧值都是 "),a("code",[t._v("NaN")]),t._v("，等价于属性的值没有变化，所以自然不需要做额外的处理了，"),a("code",[t._v("set")]),t._v(" 函数直接 "),a("code",[t._v("return")]),t._v(" 。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再往下又是一个 "),s("code",[this._v("if")]),this._v(" 语句块：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("/* eslint-enable no-self-compare */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" customSetter"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("customSetter")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面这段代码的作用是，如果 "),a("code",[t._v("customSetter")]),t._v(" 函数存在，那么在非生产环境下执行 "),a("code",[t._v("customSetter")]),t._v(" 函数。其中 "),a("code",[t._v("customSetter")]),t._v(" 函数是 "),a("code",[t._v("defineReactive")]),t._v(" 函数的第四个参数。那么 "),a("code",[t._v("customSetter")]),t._v(" 函数的作用是什么呢？其实我们在讲解 "),a("code",[t._v("initRender")]),t._v(" 函数的时候就讲解过 "),a("code",[t._v("customSetter")]),t._v(" 的作用，如下是 "),a("code",[t._v("initRender")]),t._v(" 函数中的一段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'$attrs'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" parentData "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" parentData"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrs "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" emptyObject"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("isUpdatingChildComponent "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`$attrs is readonly.`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面的代码中使用 "),a("code",[t._v("defineReactive")]),t._v(" 在 "),a("code",[t._v("Vue")]),t._v(" 实例对象 "),a("code",[t._v("vm")]),t._v(" 上定义了 "),a("code",[t._v("$attrs")]),t._v(" 属性，可以看到传递给 "),a("code",[t._v("defineReactive")]),t._v(" 函数的第四个参数是一个箭头函数，这个函数就是 "),a("code",[t._v("customSetter")]),t._v("，这个箭头函数的作用是当你尝试修改 "),a("code",[t._v("vm.$attrs")]),t._v(" 属性的值时，打印一段信息即："),a("strong",[a("code",[t._v("$attrs")]),t._v(" 属性是只读的")]),t._v("。这就是 "),a("code",[t._v("customSetter")]),t._v(" 函数的作用，用来打印辅助信息，当然除此之外你可以将 "),a("code",[t._v("customSetter")]),t._v(" 用在任何适合使用它的地方。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们回到 "),s("code",[this._v("set")]),this._v(" 函数，再往下是这样一段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("setter"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  setter"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  val "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" newVal\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面这段代码的意图很明显，即正确的设置属性值，首先判断 "),a("code",[t._v("setter")]),t._v(" 是否存在，我们知道 "),a("code",[t._v("setter")]),t._v(" 常量存储的是属性原有的 "),a("code",[t._v("set")]),t._v(" 函数。即如果属性原来拥有自身的 "),a("code",[t._v("set")]),t._v(" 函数，那么应该继续使用该函数来设置属性的值，从而保证属性原有的设置操作不受影响。如果属性原本就没有 "),a("code",[t._v("set")]),t._v(" 函数，那么就设置 "),a("code",[t._v("val")]),t._v(" 的值："),a("code",[t._v("val = newVal")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来就是 "),s("code",[this._v("set")]),this._v(" 函数的最后两句代码，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("childOb "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("shallow "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("observe")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\ndep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("notify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们知道，由于属性被设置了新的值，那么假如我们为属性设置的新值是一个数组或者纯对象，那么该数组或纯对象是未被观测的，所以需要对新值进行观测，这就是第一句代码的作用，同时使用新的观测对象重写 "),a("code",[t._v("childOb")]),t._v(" 的值。当然了，这些操作都是在 "),a("code",[t._v("!shallow")]),t._v(" 为真的情况下，即需要深度观测的时候才会执行。最后是时候触发依赖了，我们知道 "),a("code",[t._v("dep")]),t._v(" 是属性用来收集依赖的”筐“，现在我们需要把”筐“里的依赖都执行以下，而这就是 "),a("code",[t._v("dep.notify()")]),t._v(" 的作用。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("至此 "),s("code",[this._v("set")]),this._v(" 函数我们就讲解完毕了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"保证定义响应式数据行为的一致性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#保证定义响应式数据行为的一致性","aria-hidden":"true"}},[this._v("#")]),this._v(" 保证定义响应式数据行为的一致性")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("本节我们主要讲解 "),s("code",[this._v("defineReactive")]),this._v(" 函数中的一段代码，即：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("getter "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" setter"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" arguments"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  val "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在之前的讲解中，我们没有详细的讲解如上代码所示的这段 "),s("code",[this._v("if")]),this._v(" 语句块。该 "),s("code",[this._v("if")]),this._v(" 语句有两个条件：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("第一："),s("code",[this._v("(!getter || setter)")])]),s("li",[this._v("第二："),s("code",[this._v("arguments.length === 2")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("并且这两个条件要同时满足才能会根据 "),a("code",[t._v("key")]),t._v(" 去对象 "),a("code",[t._v("obj")]),t._v(" 上取值："),a("code",[t._v("val = obj[key]")]),t._v("，否则就不会触发取值的动作，触发不了取值的动作就意味着 "),a("code",[t._v("val")]),t._v(" 的值为 "),a("code",[t._v("undefined")]),t._v("，这会导致 "),a("code",[t._v("if")]),t._v(" 语句块后面的那句深度观测的代码无效，即不会深度观测：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// val 是 undefined，不会深度观测")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" childOb "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("shallow "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("observe")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("对于第二个条件，很好理解，当传递参数的数量为 "),a("code",[t._v("2")]),t._v(" 时，说明没有传递第三个参数 "),a("code",[t._v("val")]),t._v("，那么当然需要通过执行 "),a("code",[t._v("val = obj[key]")]),t._v(" 去获取属性值。比较难理解的是第一个条件，即 "),a("code",[t._v("(!getter || setter)")]),t._v("，要理解这个问题你需要知道 "),a("code",[t._v("Vue")]),t._v(" 代码的变更，以及为什么变更。其实在最初并没有上面这段 "),a("code",[t._v("if")]),t._v(" 语句块，在 "),a("code",[t._v("walk")]),t._v(" 函数中是这样调用 "),a("code",[t._v("defineReactive")]),t._v(" 函数的：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("walk")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" keys "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("keys")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" keys"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 这里传递了第三个参数")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" keys"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" obj"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("keys"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以发现在调用 "),s("code",[this._v("defineReactive")]),this._v(" 函数的时候传递了第三个参数，即属性值。这是最初的实现，后来变成了如下这样：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("walk")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" keys "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("keys")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" keys"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 在 walk 函数中调用 defineReactive 函数时暂时不获取属性值")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" keys"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// ================= 分割线 =================")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 在 defineReactive 函数内获取属性值")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("getter "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" arguments"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  val "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在 "),a("code",[t._v("walk")]),t._v(" 函数中调用 "),a("code",[t._v("defineReactive")]),t._v(" 函数时去掉了第三个参数，而是在 "),a("code",[t._v("defineReactive")]),t._v(" 函数体内增加了一段 "),a("code",[t._v("if")]),t._v(" 分支语句，当发现调用 "),a("code",[t._v("defineReactive")]),t._v(" 函数时传递了两个参数，同时只有在属性没有 "),a("code",[t._v("get")]),t._v(" 函数的情况下才会通过 "),a("code",[t._v("val = obj[key]")]),t._v(" 取值。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("为什么要这么做呢？具体可以查看这个 "),a("a",{attrs:{href:"https://github.com/vuejs/vue/pull/7302",target:"_blank",rel:"noopener noreferrer"}},[t._v("issue")]),t._v("。简单的说就是当属性原本存在 "),a("code",[t._v("get")]),t._v(" 拦截器函数时，在初始化的时候不要触发 "),a("code",[t._v("get")]),t._v(" 函数，只有当真正的获取该属性的值的时候，再通过调用缓存下来的属性原本的 "),a("code",[t._v("getter")]),t._v(" 函数取值即可。所以看到这里我们能够发现，如果数据对象的某个属性原本就拥有自己的 "),a("code",[t._v("get")]),t._v(" 函数，那么这个属性就不会被深度观测，因为当属性原本存在 "),a("code",[t._v("getter")]),t._v(" 时，是不会触发取值动作的，即 "),a("code",[t._v("val = obj[key]")]),t._v(" 不会执行，所以 "),a("code",[t._v("val")]),t._v(" 是 "),a("code",[t._v("undefined")]),t._v("，这就导致在后面深度观测的语句中传递给 "),a("code",[t._v("observe")]),t._v(" 函数的参数是 "),a("code",[t._v("undefined")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  getterProp"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  data"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  watch"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'getterProp.a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'这句话会输出'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面的代码中，我们定义了数据 "),a("code",[t._v("data")]),t._v("，"),a("code",[t._v("data")]),t._v(" 是一个嵌套的对象，在 "),a("code",[t._v("watch")]),t._v(" 选项中观察了属性 "),a("code",[t._v("getterProp.a")]),t._v("，当我们修改 "),a("code",[t._v("getterProp.a")]),t._v(" 的值时，以上代码是能够正常输出的，这也是预期行为。再看如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nObject"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("defineProperty")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'getterProp'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  enumerable"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("get")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      a"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ins "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  data"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  watch"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'getterProp.a'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'这句话不会输出'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们仅仅修改了定义数据对象 "),a("code",[t._v("data")]),t._v(" 的方式，此时 "),a("code",[t._v("data.getterProp")]),t._v(" 本身已经是一个访问器属性，且拥有 "),a("code",[t._v("get")]),t._v(" 方法。此时当我们尝试修改 "),a("code",[t._v("getterProp.a")]),t._v(" 的值时，在 "),a("code",[t._v("watch")]),t._v(" 中观察 "),a("code",[t._v("getterProp.a")]),t._v(" 的函数不会被执行。这是因为属性 "),a("code",[t._v("getterProp")]),t._v(" 是一个拥有 "),a("code",[t._v("get")]),t._v(" 拦截器函数的访问器属性，而当 "),a("code",[t._v("Vue")]),t._v(" 发现该属性拥有原本的 "),a("code",[t._v("getter")]),t._v(" 时，是不会深度观测的。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("那么为什么当属性拥有自己的 "),a("code",[t._v("getter")]),t._v(" 时就不会对其深度观测了呢？有两方面的原因，第一：由于当属性存在原本的 "),a("code",[t._v("getter")]),t._v(" 时在深度观测之前不会取值，所以在在深度观测语句执行之前取不到属性值从而无法深度观测。第二：之所以在深度观测之前不取值是因为属性原本的 "),a("code",[t._v("getter")]),t._v(" 由用户定义，用户可能在 "),a("code",[t._v("getter")]),t._v(" 中做任何意想不到的事情，这么做是出于避免引发不可预见行为的考虑。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们回过头来再看这段 "),s("code",[this._v("if")]),this._v(" 语句块：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("getter "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" arguments"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  val "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这么做难道不会有什么问题吗？当然有问题，我们知道当数据对象的某一个属性只拥有 "),a("code",[t._v("get")]),t._v(" 拦截器函数而没有 "),a("code",[t._v("set")]),t._v(" 拦截器函数时，此时该属性不会被深度观测。但是经过 "),a("code",[t._v("defineReactive")]),t._v(" 函数的处理之后，该属性将被重新定义 "),a("code",[t._v("getter")]),t._v(" 和 "),a("code",[t._v("setter")]),t._v("，此时该属性变成了既拥有 "),a("code",[t._v("get")]),t._v(" 函数又拥有 "),a("code",[t._v("set")]),t._v(" 函数。并且当我们尝试给该属性重新赋值时，那么新的值将会被观测。这时候矛盾就产生了："),a("strong",[t._v("原本该属性不会被深度观测，但是重新赋值之后，新的值却被观测了")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这就是所谓的"),s("strong",[this._v("定义响应式数据时行为的不一致")]),this._v("，为了解决这个问题，采用的办法是当属性拥有原本的 "),s("code",[this._v("setter")]),this._v(" 时，即使拥有 "),s("code",[this._v("getter")]),this._v(" 也要获取属性值并观测之，这样代码就变成了最终这个样子：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("getter "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" setter"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" arguments"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  val "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" obj"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"响应式数据之数组的处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#响应式数据之数组的处理","aria-hidden":"true"}},[this._v("#")]),this._v(" 响应式数据之数组的处理")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上就是响应式数据对于纯对象的处理方式，接下来我们将会对数组展开详细的讨论。回到 "),s("code",[this._v("Observer")]),this._v(" 类的 "),s("code",[this._v("constructor")]),this._v(" 函数，找到如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" augment "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" hasProto\n    "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" protoAugment\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" copyAugment\n  "),a("span",{attrs:{class:"token function"}},[t._v("augment")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arrayMethods"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arrayKeys"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("observeArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("walk")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在 "),a("code",[t._v("if")]),t._v(" 条件语句中，使用 "),a("code",[t._v("Array.isArray")]),t._v(" 函数检测被观测的值 "),a("code",[t._v("value")]),t._v(" 是否是数组，如果是数组则会执行 "),a("code",[t._v("if")]),t._v(" 语句块内的代码，从而实现对数组的观测。处理数组的方式与纯对象不同，我们知道数组是一个特殊的数据结构，它有很多实例方法，并且有些方法会改变数组自身的值，我们称其为变异方法，这些方法有："),a("code",[t._v("push")]),t._v("、"),a("code",[t._v("pop")]),t._v("、"),a("code",[t._v("shift")]),t._v("、"),a("code",[t._v("unshift")]),t._v("、"),a("code",[t._v("splice")]),t._v("、"),a("code",[t._v("sort")]),t._v(" 以及 "),a("code",[t._v("reverse")]),t._v(" 等。这个时候我们就要考虑一件事，即当用户调用这些变异方法改变数组时需要触发依赖。换句话说我们需要知道开发者何时调用了这些变异方法，只有这样我们才有可能在这些方法被调用时做出反应。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"拦截数组变异方法的思路"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拦截数组变异方法的思路","aria-hidden":"true"}},[this._v("#")]),this._v(" 拦截数组变异方法的思路")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么怎么样才能知道开发者何时调用了数组的变异方法呢？其实很简单，我们来思考这样一个问题，如下代码中 "),s("code",[this._v("sayHello")]),this._v(" 函数用来打印字符串 "),s("code",[this._v("'hello'")]),this._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("sayHello")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'hello'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("但是我们有这样一个需求，在不改动 "),s("code",[this._v("sayHello")]),this._v(" 函数源码的情况下，在打印字符串 "),s("code",[this._v("'hello'")]),this._v(" 之前先输出字符串 "),s("code",[this._v("'Hi'")]),this._v("。这时候我们可以这样做：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" originalSayHello "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" sayHello\n"),a("span",{attrs:{class:"token function-variable function"}},[t._v("sayHello")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'Hi'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("originalSayHello")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("看，这样就完美的实现了我们的需求，首先使用 "),a("code",[t._v("originalSayHello")]),t._v(" 变量缓存原来的 "),a("code",[t._v("sayHello")]),t._v(" 函数，然后重新定义 "),a("code",[t._v("sayHello")]),t._v(" 函数，并在新定义的 "),a("code",[t._v("sayHello")]),t._v(" 函数中调用缓存下来的 "),a("code",[t._v("originalSayHello")]),t._v("。这样我们就保证了在不改变 "),a("code",[t._v("sayHello")]),t._v(" 函数行为的前提现对其进行了功能扩展。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这其实是一个很通用也很常见的技巧，而 "),s("code",[this._v("Vue")]),this._v(" 正是通过这个技巧实现了对数据变异方法的拦截，即保持数组变异方法原有功能不变的前提下对其进行功能扩展。我们知道数组实例的变异方法是来自于数组构造函数的原型，如下图：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"http://7xlolm.com1.z0.glb.clouddn.com/2018-04-28-133359.jpg",alt:"http://7xlolm.com1.z0.glb.clouddn.com/2018-04-28-133359.jpg"}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("数组本身也是一个对象，所以它实例的 "),s("code",[this._v("__proto__")]),this._v(" 属性指向的就是数组构造函数的原型，即 "),s("code",[this._v("arr.__proto__ === Array.prototype")]),this._v(" 为真。我们的一个思路是通过设置 "),s("code",[this._v("__proto__")]),this._v(" 属性的值为一个新的对象，且该新对象的原型是数组构造函数原来的原型对象，如下图所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"http://7xlolm.com1.z0.glb.clouddn.com/2018-04-28-153539.jpg",alt:"http://7xlolm.com1.z0.glb.clouddn.com/2018-04-28-153539.jpg"}})])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们知道数组本身也是一个对象，既然是对象那么当然可以访问其 "),a("code",[t._v("__proto__")]),t._v(" 属性，上图中数组实例的 "),a("code",[t._v("__proto__")]),t._v(" 属性指向了 "),a("code",[t._v("arrayMethods")]),t._v(" 对象，同时 "),a("code",[t._v("arrayMethods")]),t._v(" 对象的 "),a("code",[t._v("__proto__")]),t._v(" 属性指向了真正的数组原型对象。并且 "),a("code",[t._v("arrayMethods")]),t._v(" 对象上定义了与数组变异方法同名的函数，这样当通过数组实例调用变异方法时，首先执行的是 "),a("code",[t._v("arrayMethods")]),t._v(" 上的同名函数，这样就能够实现对数组变异方法的拦截。用代码实现上图所示内容很简单，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 要拦截的数组变异方法")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" mutationMethods "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'push'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'pop'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'shift'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'unshift'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'splice'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'sort'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'reverse'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arrayMethods "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("create")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 实现 arrayMethods.__proto__ === Array.prototype")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arrayProto "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype  "),a("span",{attrs:{class:"token comment"}},[t._v("// 缓存 Array.prototype")]),t._v("\n\nmutationMethods"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("forEach")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("method "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  arrayMethods"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("method"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("args"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" arrayProto"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("method"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("apply")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`执行了代理原型的 ")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("method"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(" 函数`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上代码所示，我们通过 "),a("code",[t._v("Object.create(Array.prototype)")]),t._v(" 创建了 "),a("code",[t._v("arrayMethods")]),t._v(" 对象，这样就保证了 "),a("code",[t._v("arrayMethods.__proto__ === Array.prototype")]),t._v("。然后通过一个循环在 "),a("code",[t._v("arrayMethods")]),t._v(" 对象上定义了与数组变异方法同名的函数，并在这些函数内调用了真正数组原型上的相应方法。我们可以测试一下，如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\narr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" arrayMethods\n\narr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以发现控制台中打印了一句话："),a("code",[t._v("执行了代理原型的 push 函数")]),t._v("。很完美，但是这实际上是存在问题的，因为 "),a("code",[t._v("__proto__")]),t._v(" 属性是在 "),a("code",[t._v("IE11+")]),t._v(" 才开始支持，所以如果是低版本的 "),a("code",[t._v("IE")]),t._v(" 怎么办？比如 "),a("code",[t._v("IE9/10")]),t._v("，所以出于兼容考虑，我们需要做能力检测，如果当前环境支持 "),a("code",[t._v("__proto__")]),t._v(" 时我们就采用上述方式来实现对数组变异方法的拦截，如果当前环境不支持 "),a("code",[t._v("__proto__")]),t._v(" 那我们就需要另想办法了，接下来我们就介绍一下兼容的处理方案。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arr "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arrayKeys "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("getOwnPropertyNames")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrayMethods"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\narrayKeys"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("forEach")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("method "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  arr"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("method"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" arrayMethods"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("method"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面代码中，我们通过 "),a("code",[t._v("Object.getOwnPropertyNames")]),t._v(" 函数获取所有属于 "),a("code",[t._v("arrayMethods")]),t._v(" 对象自身的键，然后通过一个循环在数组实例上定义与变异方法同名的函数，这样当我们尝试调用 "),a("code",[t._v("arr.push()")]),t._v(" 时，首先执行的是定义在数组实例上的 "),a("code",[t._v("push")]),t._v(" 函数，也就是 "),a("code",[t._v("arrayMethods.push")]),t._v(" 函数。这样我们就实现了兼容版本的拦截。不过细心的同学可能已经注意到了，上面这种直接在数组实例上定义的属性是可枚举的，所以更好的做法是使用 "),a("code",[t._v("Object.defineProperty")]),t._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("arrayKeys"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("forEach")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("method "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("defineProperty")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arr"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" method"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    enumerable"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    writable"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    configurable"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" arrayMethods"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("method"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"拦截数组变异方法在-vue-中的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#拦截数组变异方法在-vue-中的实现","aria-hidden":"true"}},[this._v("#")]),this._v(" 拦截数组变异方法在 Vue 中的实现")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们已经了解了拦截数组变异方法的思路，接下来我们就可以具体的看一下 "),s("code",[this._v("Vue")]),this._v(" 源码是如何实现的。在这个过程中我们会讲解数组是如何通过变异方法触发依赖("),s("code",[this._v("观察者")]),this._v(")的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们回到 "),s("code",[this._v("Observer")]),this._v(" 类的 "),s("code",[this._v("constructor")]),this._v(" 函数：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("constructor")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" value\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dep "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Dep")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vmCount "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("def")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'__ob__'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" augment "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" hasProto\n      "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" protoAugment\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" copyAugment\n    "),a("span",{attrs:{class:"token function"}},[t._v("augment")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arrayMethods"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arrayKeys"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("observeArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("walk")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先大家注意一点：无论是对象还是数组，都将通过 "),a("code",[t._v("def")]),t._v(" 函数为其定义 "),a("code",[t._v("__ob__")]),t._v(" 属性。接着我们来看一下 "),a("code",[t._v("if")]),t._v(" 语句块的内容，如果被观测的值是一个数组，那么 "),a("code",[t._v("if")]),t._v(" 语句块内的代码将被执行，即如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" augment "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" hasProto\n  "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" protoAugment\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" copyAugment\n"),a("span",{attrs:{class:"token function"}},[t._v("augment")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arrayMethods"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arrayKeys"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("observeArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果当前环境支持使用 "),a("code",[t._v("__proto__")]),t._v(" 属性，那么 "),a("code",[t._v("augment")]),t._v(" 的值是 "),a("code",[t._v("protoAugment")]),t._v("，其中 "),a("code",[t._v("protoAugment")]),t._v(" 就定义在 "),a("code",[t._v("Observer")]),t._v(" 类的下方。源码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("protoAugment")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" src"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" keys"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("/* eslint-disable no-proto */")]),t._v("\n  target"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" src\n  "),a("span",{attrs:{class:"token comment"}},[t._v("/* eslint-enable no-proto */")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么 "),s("code",[this._v("protoAugment")]),this._v(" 函数的作用是什么呢？相信大家已经猜到了，正如我们在讲解拦截数据变异方法的思路中所说的那样，可以通过设置数组实例的 "),s("code",[this._v("__proto__")]),this._v(" 属性，让其指向一个代理原型，从而做到拦截。我们看下一 "),s("code",[this._v("protoAugment")]),this._v(" 函数是如何被调用的：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" augment "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" hasProto\n  "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" protoAugment\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" copyAugment\n"),a("span",{attrs:{class:"token function"}},[t._v("augment")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arrayMethods"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arrayKeys"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("当 "),a("code",[t._v("hasProto")]),t._v(" 为真时，"),a("code",[t._v("augment")]),t._v(" 引用的就是 "),a("code",[t._v("protoAugment")]),t._v(" 函数，所以调用 "),a("code",[t._v("augment")]),t._v(" 函数等价于调用 "),a("code",[t._v("protoAugment")]),t._v(" 函数，可以看到传递给 "),a("code",[t._v("protoAugment")]),t._v(" 函数的参数有三个。第一个参数是 "),a("code",[t._v("value")]),t._v("，其实就是数组实例本身；第二个参数是 "),a("code",[t._v("arrayMethods")]),t._v("，这里的 "),a("code",[t._v("arrayMethods")]),t._v(" 与我们在拦截数据变异方法的思路中所讲解的 "),a("code",[t._v("arrayMethods")]),t._v(" 是一样的，它就是代理原型；第三个参数是 "),a("code",[t._v("arrayKeys")]),t._v("，我们可以在 "),a("code",[t._v("src/core/observer/array.js")]),t._v(" 文件中找到这样一行代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arrayKeys "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("getOwnPropertyNames")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrayMethods"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("其实 "),s("code",[this._v("arrayKeys")]),this._v(" 是一个包含了所有定义在 "),s("code",[this._v("arrayMethods")]),this._v(" 对象上的 "),s("code",[this._v("key")]),this._v("，其实也就是所有我们要拦截的数组变异方法的名字：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("arrayKeys "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'push'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'pop'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'shift'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'unshift'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'splice'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'sort'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'reverse'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("但实际上 "),s("code",[this._v("protoAugment")]),this._v(" 函数虽然接收三个参数，但它并没有使用第三个参数。可能有的同学会问为什么 "),s("code",[this._v("protoAugment")]),this._v(" 函数没有使用第三个参数却依然声明了第三个参数呢？原因是为了让 "),s("code",[this._v("flow")]),this._v(" 更好的工作。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们回到 "),s("code",[this._v("protoAugment")]),this._v(" 函数，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("/**\n * Augment an target Object or Array by intercepting\n * the prototype chain using __proto__\n */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("protoAugment")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" src"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" keys"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("/* eslint-disable no-proto */")]),t._v("\n  target"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__proto__ "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" src\n  "),a("span",{attrs:{class:"token comment"}},[t._v("/* eslint-enable no-proto */")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("该函数的函数体只有一行代码："),a("code",[t._v("target.__proto__ = src")]),t._v("。这行代码用来将数组实例的原型指向代理原型("),a("code",[t._v("arrayMethods")]),t._v(")。下面我们具体看一下 "),a("code",[t._v("arrayMethods")]),t._v(" 是如何实现的。打开 "),a("code",[t._v("src/core/observer/array.js")]),t._v(" 文件：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("/*\n * not type checking this file because flow doesn't play well with\n * dynamically accessing methods on Array prototype\n */")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" def "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'../util/index'")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arrayProto "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype\n"),a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arrayMethods "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("create")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrayProto"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" methodsToPatch "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'push'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'pop'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'shift'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'unshift'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'splice'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'sort'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'reverse'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("/**\n * Intercept mutating methods and emit events\n */")]),t._v("\nmethodsToPatch"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("forEach")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("method"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// cache original method")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" original "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" arrayProto"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("method"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("def")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrayMethods"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" method"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mutator")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("args"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" original"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("apply")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ob "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ob__\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" inserted\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("method"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'push'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'unshift'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        inserted "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" args\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'splice'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n        inserted "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inserted"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ob"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("observeArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inserted"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// notify change")]),t._v("\n    ob"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("notify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上是 "),s("code",[this._v("src/core/observer/array.js")]),this._v(" 文件的全部代码，该文件只做了一件事情，那就是导出 "),s("code",[this._v("arrayMethods")]),this._v(" 对象：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arrayProto "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype\n"),a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" arrayMethods "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("create")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrayProto"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以发现，"),s("code",[this._v("arrayMethods")]),this._v(" 对象的原型是真正的数组构造函数的原型。接着定义了 "),s("code",[this._v("methodsToPatch")]),this._v(" 常量：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" methodsToPatch "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'push'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'pop'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'shift'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'unshift'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'splice'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'sort'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'reverse'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("methodsToPatch")]),t._v(" 常量是一个数组，包含了所有需要拦截的数组变异方法的名字。再往下是一个 "),a("code",[t._v("forEach")]),t._v(" 循环，用来遍历 "),a("code",[t._v("methodsToPatch")]),t._v(" 数组。该循环的主要目的就是使用 "),a("code",[t._v("def")]),t._v(" 函数在 "),a("code",[t._v("arrayMethods")]),t._v(" 对象上定义与数组变异方法同名的函数，从而做到拦截的目的，如下是简化后的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("methodsToPatch"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("forEach")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("method"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// cache original method")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" original "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" arrayProto"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("method"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("def")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrayMethods"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" method"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mutator")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("args"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" original"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("apply")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ob "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ob__\n    \n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略中间部分...")]),t._v("\n\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// notify change")]),t._v("\n    ob"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("notify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" original "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" arrayProto"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("method"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("然后使用 "),s("code",[this._v("def")]),this._v(" 函数在 "),s("code",[this._v("arrayMethods")]),this._v(" 上定义与数组变异方法同名的函数，在函数体内优先调用了缓存下来的数组变异方法：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" original"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("apply")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("并将数组原本变异方法的返回值赋值给 "),s("code",[this._v("result")]),this._v(" 常量，并且我们发现函数体的最后一行代码将 "),s("code",[this._v("result")]),this._v(" 作为返回值返回。这就保证了拦截函数的功能与数组原本变异方法的功能是一致的。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ob "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ob__\n    \n"),a("span",{attrs:{class:"token comment"}},[t._v("// 省略中间部分...")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// notify change")]),t._v("\nob"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("notify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("定义了 "),a("code",[t._v("ob")]),t._v(" 常量，它是 "),a("code",[t._v("this.__ob__")]),t._v(" 的引用，其中 "),a("code",[t._v("this")]),t._v(" 其实就是数组实例本身，我们知道无论是数组还是对象，都将会被定义一个 "),a("code",[t._v("__ob__")]),t._v(" 属性，并且 "),a("code",[t._v("__ob__.dep")]),t._v(" 中收集了所以该对象(或数组)的依赖(观察者)。所以上面两句代码的目的其实很简单，当调用数组变异方法时，必然修改了数组，所以这个时候需要将该数组的所有依赖(观察者)全部拿出来执行，即："),a("code",[t._v("ob.dep.notify()")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("def")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("arrayMethods"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" method"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mutator")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("args"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" inserted\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("switch")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("method"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'push'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'unshift'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      inserted "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" args\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("case")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'splice'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n      inserted "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inserted"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ob"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("observeArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inserted"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先我们需要思考一下数组变异方法对数组的影响是什么？无非是"),a("strong",[t._v("增加元素")]),t._v("、"),a("strong",[t._v("删除元素")]),t._v("以及"),a("strong",[t._v("变更元素顺序")]),t._v("。有的同学可能会说还有"),a("strong",[t._v("替换元素")]),t._v("，实际上替换可以理解为删除和增加的复合操作。那么在这些变更中，我们需要重点关注的是"),a("strong",[t._v("增加元素")]),t._v("的操作，即 "),a("code",[t._v("push")]),t._v("、"),a("code",[t._v("unshift")]),t._v(" 和 "),a("code",[t._v("splice")]),t._v("，这三个变异方法都可以为数组添加新的元素，那么为什么要重点关注呢？原因很简单，因为新增加的元素是非响应式的，所以我们需要获取到这些新元素，并将其变为响应式数据才行，而这就是上面代码的目的。下面我们看下一具体实现，首先定义了 "),a("code",[t._v("inserted")]),t._v(" 变量，这个变量用来保存那些被新添加进来的数组元素："),a("code",[t._v("let inserted")]),t._v("。接着是一个 "),a("code",[t._v("switch")]),t._v(" 语句，在 "),a("code",[t._v("switch")]),t._v(" 语句中，当遇到 "),a("code",[t._v("push")]),t._v(" 和 "),a("code",[t._v("unshift")]),t._v(" 操作时，那么新增的元素实际上就是传递给这两个方法的参数，所以可以直接将 "),a("code",[t._v("inserted")]),t._v(" 的值设置为 "),a("code",[t._v("args")]),t._v("："),a("code",[t._v("inserted = args")]),t._v("。当遇到 "),a("code",[t._v("splice")]),t._v(" 操作时，我们知道 "),a("code",[t._v("splice")]),t._v(" 函数从第三个参数开始到最后一个参数都是数组的新增元素，所以直接使用 "),a("code",[t._v("args.slice(2)")]),t._v(" 作为 "),a("code",[t._v("inserted")]),t._v(" 的值即可。最后 "),a("code",[t._v("inserted")]),t._v(" 变量中所保存的就是新增的数组元素，我们只需要调用 "),a("code",[t._v("observeArray")]),t._v(" 函数对其进行观测即可：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inserted"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" ob"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("observeArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inserted"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("以上是在当前环境支持 "),a("code",[t._v("__proto__")]),t._v(" 属性的情况，如果不支持则 "),a("code",[t._v("augment")]),t._v(" 的值为 "),a("code",[t._v("copyAugment")]),t._v(" 函数，"),a("code",[t._v("copyAugment")]),t._v(" 定义在 "),a("code",[t._v("protoAugment")]),t._v(" 函数的下方：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("/**\n * Augment an target Object or Array by defining\n * hidden properties.\n */")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("/* istanbul ignore next */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("copyAugment")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" src"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" keys"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("string"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" keys"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" l"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" keys"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("def")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" src"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("copyAugment")]),t._v(" 函数接收的参数与 "),a("code",[t._v("protoAugment")]),t._v(" 函数相同，不同的是 "),a("code",[t._v("copyAugment")]),t._v(" 使用到了全部三个参数。在拦截数组变异方法的思路一节中我们讲解了在当前环境不支持 "),a("code",[t._v("__proto__")]),t._v(" 属性的时候如何做兼容处理，实际上这就是 "),a("code",[t._v("copyAugment")]),t._v(" 函数的作用。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们知道 "),a("code",[t._v("copyAugment")]),t._v(" 函数的第三个参数 "),a("code",[t._v("keys")]),t._v(" 就是定义在 "),a("code",[t._v("arrayMethods")]),t._v(" 对象上的所有函数的键，即所有要拦截的数组变异方法的名称。这样通过 "),a("code",[t._v("for")]),t._v(" 循环对其进行遍历，并使用 "),a("code",[t._v("def")]),t._v(" 函数在数组实例上定义与数组变异方法同名的且不可枚举的函数，这样就实现了拦截操作。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("总之无论是 "),a("code",[t._v("protoAugment")]),t._v(" 函数还是 "),a("code",[t._v("copyAugment")]),t._v(" 函数，他们的目的只有一个："),a("strong",[t._v("把数组实例与代理原型或与代理原型中定义的函数联系起来，从而拦截数组变异方法")]),t._v("。下面我们在回到 "),a("code",[t._v("Observer")]),t._v(" 类的 "),a("code",[t._v("constructor")]),t._v(" 函数中，看如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" augment "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" hasProto\n    "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" protoAugment\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" copyAugment\n  "),a("span",{attrs:{class:"token function"}},[t._v("augment")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arrayMethods"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" arrayKeys"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("observeArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以发现在 "),s("code",[this._v("augment")]),this._v(" 函数调用语句之后，还以该数组实例作为参数调用了 "),s("code",[this._v("Observer")]),this._v(" 实例对象的 "),s("code",[this._v("observeArray")]),this._v(" 方法：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[this._v("this")]),s("span",{attrs:{class:"token punctuation"}},[this._v(".")]),s("span",{attrs:{class:"token function"}},[this._v("observeArray")]),s("span",{attrs:{class:"token punctuation"}},[this._v("(")]),this._v("value"),s("span",{attrs:{class:"token punctuation"}},[this._v(")")]),this._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这句话的作用是什么呢？或者说 "),a("code",[t._v("observeArray")]),t._v(" 方法的作用是什么呢？我们知道，当被观测的数据("),a("code",[t._v("value")]),t._v(")是数组时，会执行 "),a("code",[t._v("if")]),t._v(" 语句块的代码，并调用 "),a("code",[t._v("augment")]),t._v(" 函数从而拦截数组的变异方法，这样当我们尝试通过这些变异方法修改数组时是会触发相应的依赖("),a("code",[t._v("观察者")]),t._v(")的，比如下面的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ins "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  data"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    arr"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nins"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 能够触发响应")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ins "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  data"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    arr"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\nins"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arr"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 能够触发响应")]),t._v("\nins"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arr"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 不能触发响应")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面的代码中，直接调用 "),a("code",[t._v("arr")]),t._v(" 数组的 "),a("code",[t._v("push")]),t._v(" 方法是能够触发响应的，但调用 "),a("code",[t._v("arr")]),t._v(" 数组内嵌套数组的 "),a("code",[t._v("push")]),t._v(" 方法是不能触发响应的。为了使嵌套的数组或对象同样是响应式数据，我们需要递归的观测那些类型为数组或对象的数组元素，而这就是 "),a("code",[t._v("observeArray")]),t._v(" 方法的作用，如下是 "),a("code",[t._v("observeArray")]),t._v(" 方法的全部代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("/**\n  * Observe a list of Array items.\n  */")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("observeArray")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("items"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("any"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" items"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" l"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("observe")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("items"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以发现 "),s("code",[this._v("observeArray")]),this._v(" 方法的实现很简单，只需要对数组进行遍历，并对数组元素逐个应用 "),s("code",[this._v("observe")]),this._v(" 工厂函数即可，这样就会递归观测数组元素了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"数组的特殊性"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组的特殊性","aria-hidden":"true"}},[this._v("#")]),this._v(" 数组的特殊性")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("本小节我们补讲 "),s("code",[this._v("defineReactive")]),this._v(" 函数中的一段代码，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("get")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("reactiveGetter")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" value "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" getter "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" getter"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" val\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("depend")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("childOb"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      childOb"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("depend")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("        "),a("span",{attrs:{class:"token function"}},[t._v("dependArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("a",{attrs:{href:"#%E5%9C%A8-get-%E5%87%BD%E6%95%B0%E4%B8%AD%E5%A6%82%E4%BD%95%E6%94%B6%E9%9B%86%E4%BE%9D%E8%B5%96"}},[this._v("get 函数中如何收集依赖")]),this._v(" 一节中我们已经讲解了关于依赖收集的内容，但是当时我们留下了如上代码段中高亮的那三行代码没有讲，现在我们就重点看一下高亮的三句代码，为什么当被读取的属性是数组的时候需要调用 "),s("code",[this._v("dependArray")]),this._v(" 函数？")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("div id"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"demo"')]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("arr"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ins "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'#demo'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  data"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    arr"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  arr"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("数据对象中的 "),s("code",[this._v("arr")]),this._v(" 属性是一个数组，并且数组的一个元素是另外一个对象。我们 "),s("a",{attrs:{href:"#%E8%A2%AB%E8%A7%82%E6%B5%8B%E5%90%8E%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%A0%B7%E5%AD%90"}},[this._v("被观测后的数据对象的样子")]),this._v(" 一节中将过了，上面的对象在经过观测后将变成如下这个样子：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  arr"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" __ob__ "),a("span",{attrs:{class:"token comment"}},[t._v("/* 我们将该 __ob__ 称为 ob2 */")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    __ob__ "),a("span",{attrs:{class:"token comment"}},[t._v("/* 我们将该 __ob__ 称为 ob1 */")])]),t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上代码的注释所示，为了便于区别和讲解，我们分别称这两个 "),s("code",[this._v("__ob__")]),this._v(" 属性为 "),s("code",[this._v("ob1")]),this._v(" 和 "),s("code",[this._v("ob2")]),this._v("，然后我们再来观察一下模板：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("div id"),a("span",{attrs:{class:"token operator"}},[t._v("=")]),a("span",{attrs:{class:"token string"}},[t._v('"demo"')]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("arr"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("div"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在模板使用了数据 "),a("code",[t._v("arr")]),t._v("，这将会触发数据对象的 "),a("code",[t._v("arr")]),t._v(" 属性的 "),a("code",[t._v("get")]),t._v(" 函数，我们知道 "),a("code",[t._v("arr")]),t._v(" 属性的 "),a("code",[t._v("get")]),t._v(" 函数通过闭包引用了两个用来收集依赖的”筐“，一个是属于 "),a("code",[t._v("arr")]),t._v(" 属性自身的 "),a("code",[t._v("dep")]),t._v(" 对象，另一个是 "),a("code",[t._v("childOb.dep")]),t._v(" 对象，其中 "),a("code",[t._v("childOb")]),t._v(" 就是 "),a("code",[t._v("ob1")]),t._v("。这时依赖会被收集到这两个”筐“中，但大家要注意的是 "),a("code",[t._v("ob2.dep")]),t._v(" 这个”筐“中，是没有收集到依赖的。有的同学会说：”模板中依赖的数据是 "),a("code",[t._v("arr")]),t._v("，并不是 "),a("code",[t._v("arr")]),t._v(" 数组的第一个对象元素，所以 "),a("code",[t._v("ob2")]),t._v(" 没有收集到依赖很正常啊“，这是一个错误的想法，因为依赖了数组 "),a("code",[t._v("arr")]),t._v(" 就等价于依赖了数组内的所有元素，数组内所有元素的改变都可以看做是数组的改变。但由于 "),a("code",[t._v("ob2")]),t._v(" 没有收集到依赖，所以现在就导致如下代码触发不了响应：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("ins"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ins"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$data"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arr"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'b'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们使用 "),a("code",[t._v("$set")]),t._v(" 函数为 "),a("code",[t._v("arr")]),t._v(" 数组的第一对象元素添加了一个属性 "),a("code",[t._v("b")]),t._v("，这是触发不了响应的。为了能够使得这段代码可以触发响应，就必须让 "),a("code",[t._v("ob2")]),t._v(" 收集到依赖，而这就是 "),a("code",[t._v("dependArray")]),t._v(" 函数的作用。如下是 "),a("code",[t._v("dependArray")]),t._v(" 函数的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("dependArray")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("any"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" e"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" l"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    e "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    e "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" e"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ob__ "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" e"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ob__"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("depend")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("dependArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("当被读取的数据对象的属性值是数组时，会调用 "),a("code",[t._v("dependArray")]),t._v(" 函数，该函数将通过 "),a("code",[t._v("for")]),t._v(" 循环遍历数组，并取得数组每一个元素的值，如果该元素的值拥有 "),a("code",[t._v("__ob__")]),t._v(" 对象和 "),a("code",[t._v("__ob__.dep")]),t._v(" 对象，那说明该元素也是一个对象或数组，此时只需要手动执行 "),a("code",[t._v("__ob__.dep.depend()")]),t._v(" 即可达到收集依赖的目的。同时如果发现数组的元素仍然是一个数组，那么需要递归调用 "),a("code",[t._v("dependArray")]),t._v(" 继续收集依赖。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么为什么数组需要这样处理，而纯对象不需要呢？那是因为"),s("strong",[this._v("数组的索引是非响应式的")]),this._v("。现在我们已经知道了数据响应系统对纯对象和数组的处理方式是不同，对于纯对象只需要逐个将对象的属性重定义为访问器属性，并且当属性的值同样为纯对象时进行递归定义即可，而对于数组的处理则是通过拦截数组变异方法的方式，也就是说如下代码是触发不了响应的：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ins "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  data"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    arr"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("ins"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arr"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// 不能触发响应")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上面的代码中我们试图修改 "),s("code",[this._v("arr")]),this._v(" 数组的第一个元素，但这么做是触发不了响应的，因为对于数组来讲，其索引并不是“访问器属性”。正是因为数组的索引不是”访问器属性“，所以当有观察者依赖数组的某一个元素时是触发不了这个元素的 "),s("code",[this._v("get")]),this._v(" 函数的，当然也就收集不到依赖。这个时候就是 "),s("code",[this._v("dependArray")]),this._v(" 函数发挥作用的时候了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"vue-set-set-和-vue-delete-delete-的实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-set-set-和-vue-delete-delete-的实现","aria-hidden":"true"}},[this._v("#")]),this._v(" Vue.set($set) 和 Vue.delete($delete) 的实现")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("stateMixin")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Vue"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Class"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Component"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  Vue"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("set")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  Vue"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),a("span",{attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" del")]),t._v("\n  Vue"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function-variable function"}},[t._v("$watch")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    expOrFn"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" Function"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    cb"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    options"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Function "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到 "),a("code",[t._v("$set")]),t._v(" 和 "),a("code",[t._v("$delete")]),t._v(" 的值分别是是 "),a("code",[t._v("set")]),t._v(" 和 "),a("code",[t._v("del")]),t._v("，根据文件头部的引用关系可知 "),a("code",[t._v("set")]),t._v(" 和 "),a("code",[t._v("del")]),t._v(" 来自 "),a("code",[t._v("src/core/observer/index.js")]),t._v(" 文件中定义的 "),a("code",[t._v("set")]),t._v(" 函数和 "),a("code",[t._v("del")]),t._v(" 函数。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("initGlobalAPI")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Vue"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" GlobalAPI"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  Vue"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("set")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  Vue"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" del")]),t._v("  \n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以发现 "),a("code",[t._v("Vue.set")]),t._v(" 函数和 "),a("code",[t._v("Vue.delete")]),t._v(" 函数的值同样是来自 "),a("code",[t._v("src/core/observer/index.js")]),t._v(" 文件中定义的 "),a("code",[t._v("set")]),t._v(" 函数和 "),a("code",[t._v("del")]),t._v(" 函数。现在我们可以坚信 "),a("code",[t._v("Vue.set")]),t._v(" 其实就是 "),a("code",[t._v("$set")]),t._v("，而 "),a("code",[t._v("Vue.delete")]),t._v(" 就是 "),a("code",[t._v("$delete")]),t._v("，所以现在我们只需要搞清楚定义在 "),a("code",[t._v("src/core/observer/index.js")]),t._v(" 文件中的 "),a("code",[t._v("set")]),t._v(" 函数和 "),a("code",[t._v("del")]),t._v(" 函数是如何实现的就可以了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"vue-set-set"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-set-set","aria-hidden":"true"}},[this._v("#")]),this._v(" Vue.set/$set")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先我们来看一下 "),a("code",[t._v("Vue.set/$set")]),t._v(" 函数，打开 "),a("code",[t._v("src/core/observer/index.js")]),t._v(" 文件，找到 "),a("code",[t._v("set")]),t._v(" 函数，它定义在 "),a("code",[t._v("defineReactive")]),t._v(" 函数的下面，如下是 "),a("code",[t._v("set")]),t._v(" 函数的定义：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("any"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("set")]),t._v(" 函数接收三个参数，相信很多同学都有使用过 "),a("code",[t._v("Vue.set/$set")]),t._v(" 函数的经验，那么大家对这三个参数应该不陌生。第一个参数 "),a("code",[t._v("target")]),t._v(" 是将要被添加属性的对象，第二个参数 "),a("code",[t._v("key")]),t._v(" 以及第三个参数 "),a("code",[t._v("val")]),t._v(" 分别是要添加属性的键名和值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("下面我们一点点来看 "),s("code",[this._v("set")]),this._v(" 函数的代码，首先是一个 "),s("code",[this._v("if")]),this._v(" 语句块：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("isUndef")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isPrimitive")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`Cannot set reactive property on undefined, null, or primitive value: ")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("strong",[this._v("如果 "),s("code",[this._v("set")]),this._v(" 函数的第一个参数是 "),s("code",[this._v("undefined")]),this._v(" 或 "),s("code",[this._v("null")]),this._v(" 或者是原始类型值，那么在非生产环境下会打印警告信息")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("紧接着又是一段 "),s("code",[this._v("if")]),this._v(" 语句块，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"highlighted-line"}},[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isValidArrayIndex")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),t._v("  target"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("max")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  target"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("splice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" val\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ins "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  data"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    arr"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")])]),t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("ins"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$data"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arr"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 不能触发响应")])]),t._v("ins"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$"),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ins"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$data"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("arr"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("// 能够触发响应")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面的代码中我们直接修改 "),a("code",[t._v("arr[0]")]),t._v(" 的值不不能够触发响应的，但是如果我们使用 "),a("code",[t._v("$set")]),t._v(" 函数重新设置 "),a("code",[t._v("arr")]),t._v(" 数组索引为 "),a("code",[t._v("0")]),t._v(" 的元素的值，这样是能够触发响应的，我们看看 "),a("code",[t._v("$set")]),t._v(" 函数是如何实现的，注意如下高亮代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isValidArrayIndex")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  target"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("max")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  target"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("splice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" val")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("原理其实很简单，我们知道数组的 "),s("code",[this._v("splice")]),this._v(" 变异方法能够完成数组元素的删除、添加、替换等操作。而 "),s("code",[this._v("target.splice(key, 1, val)")]),this._v(" 就利用了替换元素的能力，将指定位置元素的值替换为新值，同时由于 "),s("code",[this._v("splice")]),this._v(" 方法本身是能够触发响应的，所以一切看起来如此简单。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("另外大家注意在调用 "),s("code",[this._v("target.splice")]),this._v(" 函数之前，需要修改数组的长度：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Math"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("max")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("将数组的长度修改为 "),s("code",[this._v("target.length")]),this._v(" 和 "),s("code",[this._v("key")]),this._v(" 中的较大者，否则如果当要设置的元素的索引大于数组长度时 "),s("code",[this._v("splice")]),this._v(" 无效。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再往下依然是一个 "),s("code",[this._v("if")]),this._v(" 语句块，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" target "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("prototype"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  target"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" val\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" val\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果 "),s("code",[this._v("target")]),this._v(" 不是一个数组，那么必然就是纯对象了，当给一个纯对象设置属性的时候，假设该属性已经在对象上有定义了，那么只需要直接设置该属性的值即可，这将自动触发响应，因为已存在的属性是响应式的。但这里要注意的是 "),s("code",[this._v("if")]),this._v(" 语句的两个条件：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[s("code",[this._v("key in target")])]),s("li",[s("code",[this._v("!(key in Object.prototype)")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这两个条件保证了 "),a("code",[t._v("key")]),t._v(" 在 "),a("code",[t._v("target")]),t._v(" 对象上，或在 "),a("code",[t._v("target")]),t._v(" 的原型链上，同时必须不能在 "),a("code",[t._v("Object.prototype")]),t._v(" 上。这里我们需要提一点，上面这段代码为什么不像如下代码这样做：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("hasOwn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  target"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" val\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" val\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("使用 "),a("code",[t._v("hasOwn")]),t._v(" 检测 "),a("code",[t._v("key")]),t._v(" 是不是属于 "),a("code",[t._v("target")]),t._v(" 自身的属性不就好了？其实原本代码的确是这样写的，后来因为一个 "),a("code",[t._v("issue")]),t._v(" 代码变成了现在这个样子，可以 "),a("a",{attrs:{href:"https://github.com/vuejs/vue/issues/6845",target:"_blank",rel:"noopener noreferrer"}},[t._v("点击这里查看 issue")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们继续看代码，接下来是这样一段代码，这是 "),s("code",[this._v("set")]),this._v(" 函数剩余的全部代码，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"highlighted-line"}},[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ob "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ob__")]),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_isVue "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ob "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" ob"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vmCount"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'Avoid adding reactive properties to a Vue instance or its root $data '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'at runtime - declare it upfront in the data option.'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" val\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("ob"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  target"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" val\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" val\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[a("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ob"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("ob"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("notify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" val\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果代码运行到了这里，那说明正在给对象添加一个全新的属性，注意上面代码中高亮的三句代码，第一句高亮的代码定义了 "),a("code",[t._v("ob")]),t._v(" 常量，它是数据对象 "),a("code",[t._v("__ob__")]),t._v(" 属性的引用。第二句高亮的代码使用 "),a("code",[t._v("defineReactive")]),t._v(" 函数设置属性值，这是为了保证新添加的属性是响应式的。第三局高亮的代码调用了 "),a("code",[t._v("__ob__.dep.notify()")]),t._v(" 从而触发响应。这就是添加全新属性触发响应的原理。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ob "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ob__\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_isVue "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ob "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" ob"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vmCount"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'Avoid adding reactive properties to a Vue instance or its root $data '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'at runtime - declare it upfront in the data option.'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" val\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("ob"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  target"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" val")]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" val")]),a("span",{attrs:{class:"highlighted-line"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ob"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" val"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nob"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("notify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" val\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("高亮的部分是一个 "),a("code",[t._v("if")]),t._v(" 语句块，我们知道 "),a("code",[t._v("target")]),t._v(" 也许原本就是非响应的，这个时候 "),a("code",[t._v("target.__ob__")]),t._v(" 是不存在的，所以当发现 "),a("code",[t._v("target.__ob__")]),t._v(" 不存在时，就简单的赋值即可。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后我们来看一下剩下的这段 "),s("code",[this._v("if")]),this._v(" 语句块：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ob "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ob__\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_isVue "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ob "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" ob"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vmCount"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'Avoid adding reactive properties to a Vue instance or its root $data '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'at runtime - declare it upfront in the data option.'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" val\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这个 "),a("code",[t._v("if")]),t._v(" 语句块有两个条件，只要有一个条件成立，就会执行 "),a("code",[t._v("if")]),t._v(" 语句块内的代码。我们来看第一个条件 "),a("code",[t._v("target._isVue")]),t._v("，我们知道 "),a("code",[t._v("Vue")]),t._v(" 实例对象拥有 "),a("code",[t._v("_isVue")]),t._v(" 属性，所以当第一个条件成立时，那么说明你正在使用 "),a("code",[t._v("Vue.set/$set")]),t._v(" 函数为 "),a("code",[t._v("Vue")]),t._v(" 实例对象添加属性，为了避免属性覆盖的情况出现，"),a("code",[t._v("Vue.set/$set")]),t._v(" 函数不允许这么做，在非生产环境下会打印警告信息。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("第二个条件是："),a("code",[t._v("(ob && ob.vmCount)")]),t._v("，我们知道 "),a("code",[t._v("ob")]),t._v(" 就是 "),a("code",[t._v("target.__ob__")]),t._v(" 那么 "),a("code",[t._v("ob.vmCount")]),t._v(" 是什么呢？为了搞清这个问题，我们回到 "),a("code",[t._v("observe")]),t._v(" 工厂函数中，如下高亮代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("observe")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" asRootData"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("boolean"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Observer "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("asRootData "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" ob"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    ob"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vmCount"),a("span",{attrs:{class:"token operator"}},[t._v("++")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ob\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("observe")]),t._v(" 函数接收两个参数，第二个参数指示着被观测的数据对象是否是根数据对象，什么叫根数据对象呢？那就看 "),a("code",[t._v("asRootData")]),t._v(" 什么时候为 "),a("code",[t._v("true")]),t._v(" 即可了，我们找到 "),a("code",[t._v("initData")]),t._v(" 函数中，他在 "),a("code",[t._v("src/core/instance/state.js")]),t._v(" 文件中，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("initData")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Component"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data\n  data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" data "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("getData")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" data "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  \n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// observe data")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("observe")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),a("span",{attrs:{class:"token comment"}},[t._v("/* asRootData */")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到在调用 "),a("code",[t._v("observe")]),t._v(" 观测 "),a("code",[t._v("data")]),t._v(" 对象的时候 "),a("code",[t._v("asRootData")]),t._v(" 参数为 "),a("code",[t._v("true")]),t._v("。而在后续的递归观测中调用 "),a("code",[t._v("observe")]),t._v(" 的时候省略了 "),a("code",[t._v("asRootData")]),t._v(" 参数。所以所谓的根数据对象就是 "),a("code",[t._v("data")]),t._v(" 对象。这时候我们再来看如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("observe")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" asRootData"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("boolean"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Observer "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("asRootData "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" ob"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    ob"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vmCount"),a("span",{attrs:{class:"token operator"}},[t._v("++")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ob\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以发现，根数据对象将有用一个特质，即 "),a("code",[t._v("target.__ob__.vmCount > 0")]),t._v("，这样条件 "),a("code",[t._v("(ob && ob.vmCount)")]),t._v(" 是成立的，也就是说："),a("strong",[t._v("当使用 "),a("code",[t._v("Vue.set/$set")]),t._v(" 函数为根数据对象添加属性时，是不被允许的")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么为什么不允许在根数据对象上添加属性呢？因为这样做是永远触发不了依赖的。原因就是根数据对象的 "),s("code",[this._v("Observer")]),this._v(" 实例收集不到依赖(观察者)，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" data "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  obj"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    a"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("    __ob__ "),a("span",{attrs:{class:"token comment"}},[t._v("// ob2")])]),t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  __ob__ "),a("span",{attrs:{class:"token comment"}},[t._v("// ob1")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  data\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上代码所示，"),s("code",[this._v("ob1")]),this._v(" 就是属于根数据的 "),s("code",[this._v("Observer")]),this._v(" 实例对象，如果想要在根数据上使用 "),s("code",[this._v("Vue.set/$set")]),this._v(" 并触发响应：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Vue"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("data"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'someProperty'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'someVal'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("那么 "),a("code",[t._v("data")]),t._v(" 字段必须是响应式数据才行，这样当 "),a("code",[t._v("data")]),t._v(" 字段被依赖时，才能够收集依赖(观察者)到两个“筐”中("),a("code",[t._v("data属性自身的 dep")]),t._v("以及"),a("code",[t._v("data.__ob__")]),t._v(")。这样在 "),a("code",[t._v("Vue.set/$set")]),t._v(" 函数中才有机会触发根数据的响应。但 "),a("code",[t._v("data")]),t._v(" 本身并不是响应的，这就是问题所在。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"vue-delete-delete"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-delete-delete","aria-hidden":"true"}},[this._v("#")]),this._v(" Vue.delete/$delete")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来我们继续看一下 "),s("code",[this._v("Vue.delete/$delete")]),this._v(" 函数的实现，仍然是 "),s("code",[this._v("src/core/observer/index.js")]),this._v(" 文件，找到 "),s("code",[this._v("del")]),this._v(" 函数：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("del")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("any"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("del")]),t._v(" 函数接收两个参数，分别是将要被删除属性的目标对象 "),a("code",[t._v("target")]),t._v(" 以及要删除属性的键名 "),a("code",[t._v("key")]),t._v("，与 "),a("code",[t._v("set")]),t._v(" 函数相同，在函数体的开头是如下 "),a("code",[t._v("if")]),t._v(" 语句块：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("isUndef")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isPrimitive")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`Cannot delete reactive property on undefined, null, or primitive value: ")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("检测 "),s("code",[this._v("target")]),this._v(" 是否是 "),s("code",[this._v("undefined")]),this._v(" 或 "),s("code",[this._v("null")]),this._v(" 或者是原始类型值，如果是的话那么在非生产环境下会打印警告信息。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接着是如下这段 "),s("code",[this._v("if")]),this._v(" 语句块：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isValidArrayIndex")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  target"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("splice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("很显然，如果我们使用 "),s("code",[this._v("Vue.delete/$delete")]),this._v(" 去删除一个数组的索引时，如上这段代码将被执行，当然了前提是参数 "),s("code",[this._v("key")]),this._v(" 需要是一个有效的数组索引。与为数组添加元素类似，移除数组元素同样使用了数组的 "),s("code",[this._v("splice")]),this._v(" 方法，大家知道这样是能够触发响应的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再往下是如下这段 "),s("code",[this._v("if")]),this._v(" 语句块：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ob "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ob__\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_isVue "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ob "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" ob"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("vmCount"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'Avoid deleting properties on a Vue instance or its root $data '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'- just set it to null.'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("与不能使用 "),a("code",[t._v("Vue.set/$set")]),t._v(" 函数一样为根数据或 "),a("code",[t._v("Vue")]),t._v(" 实例对象添加属性一样，同样不能使用 "),a("code",[t._v("Vue.delete/$delete")]),t._v(" 删除 "),a("code",[t._v("Vue")]),t._v(" 实例对象或根数据的属性。不允许删除 "),a("code",[t._v("Vue")]),t._v(" 实例对象的属性，是出于安全因素的考虑。而不允许删除根数据对象的属性，是因为这样做也是触发不了响应的，关于触发不了响应的原因，我们在讲解 "),a("code",[t._v("Vue.set/$set")]),t._v(" 时已经分析过了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来是 "),s("code",[this._v("Vue.delete/$delete")]),this._v(" 函数的最后一段代码，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token function"}},[t._v("hasOwn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("target"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" target"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("ob"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nob"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("dep"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("notify")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先使用 "),a("code",[t._v("hasOwn")]),t._v(" 函数检测 "),a("code",[t._v("key")]),t._v(" 是否是 "),a("code",[t._v("target")]),t._v(" 对象自身拥有的属性，如果不是那么直接返回("),a("code",[t._v("return")]),t._v(")。很好理解，如果你将要删除的属性原本就不在该对象上，那么自然什么都不需要做。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果 "),a("code",[t._v("key")]),t._v(" 存在于 "),a("code",[t._v("target")]),t._v(" 对象上，那么代码将继续运行，此时将使用 "),a("code",[t._v("delete")]),t._v(" 语句从 "),a("code",[t._v("target")]),t._v(" 上删除属性 "),a("code",[t._v("key")]),t._v("。最后判断 "),a("code",[t._v("ob")]),t._v(" 对象是否存在，如果不存在说明 "),a("code",[t._v("target")]),t._v(" 对象原本就不是响应的，所以直接返回("),a("code",[t._v("return")]),t._v(")即可。如果 "),a("code",[t._v("ob")]),t._v(" 对象存在，说明 "),a("code",[t._v("target")]),t._v(" 对象是响应的，需要触发响应才行，即执行 "),a("code",[t._v("ob.dep.notify()")]),t._v("。")])}],!1,null,null,null);s.default=e.exports}}]);