(window.webpackJsonp=window.webpackJsonp||[]).push([[5],{78:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._m(1),t._m(2),t._m(3),t._m(4),t._m(5),t._m(6),t._m(7),t._m(8),n("p",[t._v("在讲解 "),n("code",[t._v("initProps")]),t._v(" 函数的具体实现之前，我们需要回顾一下 "),n("code",[t._v("opts.props")]),t._v(" 的数据结构是什么样子的，在 "),n("router-link",{attrs:{to:"./4vue-normalize.html"}},[t._v("Vue 选项的规范化")]),t._v(" 一节中我们了解到 "),n("code",[t._v("props")]),t._v(" 选项是经过规范化处理的，并且规范后的数据是纯对象格式，假如我们像如下代码这样使用 "),n("code",[t._v("props")]),t._v(" 选项：")],1),t._m(9),t._m(10),t._m(11),t._m(12),t._m(13),t._m(14),t._m(15),t._m(16),t._m(17),t._m(18),t._m(19),t._m(20),n("p",[t._v("举个例子，如下是使用自定义组件并向组件传递数据的例子：")]),t._m(21),t._m(22),t._m(23),t._m(24),t._m(25),t._m(26),t._m(27),t._m(28),t._m(29),t._m(30),t._m(31),t._m(32),t._m(33),n("p",[t._v("再来看第三个常量：")]),t._m(34),t._m(35),t._m(36),t._m(37),t._m(38),n("p",[t._v("在这些常量的下面，是如下这段代码：")]),t._m(39),t._m(40),t._m(41),t._m(42),t._m(43),t._m(44),n("p",[t._v("再回到如下代码：")]),t._m(45),t._m(46),t._m(47),n("p",[t._v("在循环内的一开头是如下两句代码：")]),t._m(48),t._m(49),t._m(50),t._m(51),t._m(52),t._m(53),t._m(54),t._m(55),t._m(56),t._m(57),t._m(58),t._m(59),t._m(60),t._m(61),n("p",[t._v("最后大家还要注意一点，如下：")]),t._m(62),t._m(63),t._m(64),t._m(65),t._m(66),t._m(67),t._m(68),t._m(69),t._m(70),t._m(71),t._m(72),t._m(73),t._m(74),t._m(75),t._m(76),n("p",[t._v("上面代码中的 "),n("code",[t._v("hyphenate")]),t._v(" 和 "),n("code",[t._v("isReservedAttribute")]),t._v(" 还是都来自于 "),n("code",[t._v("src/shared/util.js")]),t._v(" 文件，可以在附录 "),n("router-link",{attrs:{to:"../appendix/shared-util.html"}},[t._v("shared/util.js 文件工具方法全解")]),t._v(" 中查看讲解。")],1),t._m(77),t._m(78),t._m(79),t._m(80),n("p",[t._v("在这一小节我们主要聚焦在如下这句代码：")]),t._m(81),t._m(82),t._m(83),n("p",[t._v("假如我们定义了如下组件：")]),t._m(84),n("p",[t._v("并像如下代码这样使用：")]),t._m(85),t._m(86),t._m(87),t._m(88),t._m(89),t._m(90),t._m(91),t._m(92),t._m(93),t._m(94),t._m(95),t._m(96),t._m(97),t._m(98),t._m(99),t._m(100),t._m(101),t._m(102),t._m(103),t._m(104),t._m(105),t._m(106),t._m(107),t._m(108),t._m(109),t._m(110),t._m(111),t._m(112),t._m(113),t._m(114),t._m(115),t._m(116),t._m(117),t._m(118),t._m(119),t._m(120),t._m(121),n("p",[t._v("再回过头来看这段代码：")]),t._m(122),t._m(123),t._m(124),t._m(125),t._m(126),t._m(127),t._m(128),t._m(129),t._m(130),t._m(131),t._m(132),t._m(133),t._m(134),t._m(135),t._m(136),t._m(137),t._m(138),t._m(139),t._m(140),t._m(141),t._m(142),t._m(143),t._m(144),t._m(145),t._m(146),t._m(147),t._m(148),t._m(149),t._m(150),t._m(151),t._m(152),t._m(153),t._m(154),t._m(155),t._m(156),t._m(157),t._m(158),n("p",[t._v("再往下是这样一段代码：")]),t._m(159),t._m(160),t._m(161),t._m(162),t._m(163),n("p",[t._v("这么做的目的是防止多个组件实例共享一份数据所造成的问题。")]),n("p",[t._v("再往下是这样一段代码：")]),t._m(164),t._m(165),t._m(166),t._m(167),t._m(168),t._m(169),t._m(170),t._m(171),t._m(172),t._m(173),t._m(174),t._m(175),t._m(176),t._m(177),t._m(178),t._m(179),t._m(180),t._m(181),t._m(182),t._m(183),t._m(184),t._m(185),t._m(186),t._m(187),t._m(188),t._m(189),t._m(190),t._m(191),t._m(192),n("p",[t._v("再往下是这样一段代码：")]),t._m(193),t._m(194),n("p",[t._v("再往下是这样一段代码：")]),t._m(195),t._m(196),t._m(197),t._m(198),t._m(199),t._m(200),t._m(201),t._m(202),t._m(203),t._m(204),t._m(205),n("p",[t._v("再回头看如下代码：")]),t._m(206),t._m(207),t._m(208),t._m(209),t._m(210),t._m(211),t._m(212),t._m(213),t._m(214),t._m(215),t._m(216),t._m(217),t._m(218),t._m(219),t._m(220),t._m(221),t._m(222),t._m(223),t._m(224),t._m(225),t._m(226),t._m(227),t._m(228),t._m(229),t._m(230),t._m(231),t._m(232),t._m(233),t._m(234),n("p",[t._v("处理完了以上类型的检查，还要处理对象和数组已经自定义类型的检查，如下：")]),t._m(235),t._m(236),t._m(237),n("p",[t._v("对于自定义类型，只需要检查值是否为该自定义类型构造函数的实例即可。")]),t._m(238),t._m(239),t._m(240),t._m(241),t._m(242),t._m(243),t._m(244),t._m(245),t._m(246),t._m(247),t._m(248),n("p",[t._v("这段代码用来检测该方法是否真正的有定义，如果没有定义则打印警告信息，提示开发者是否正确的引用了函数。")]),n("p",[t._v("接着是如下这段检测代码：")]),t._m(249),t._m(250),t._m(251),t._m(252),n("p",[t._v("再往下是最后一段检测代码，我们看看它做了什么检测工作：")]),t._m(253),n("p",[t._v("上面代码中首先检测方法名字 "),n("code",[t._v("key")]),t._v(" 是否已经在组件实例对象 "),n("code",[t._v("vm")]),t._v(" 中有了定义，并且该名字 "),n("code",[t._v("key")]),t._v(" 为保留的属性名，什么是保留的属性名呢？根据 "),n("router-link",{attrs:{to:"../appendix/core-util.html#isreserved"}},[t._v("isReserved")]),t._v(" 函数可知以字符 "),n("code",[t._v("$")]),t._v(" 或 "),n("code",[t._v("_")]),t._v(" 开头的名字为保留名，如果这两个条件都成立，说明你定义的方法与 "),n("code",[t._v("Vue")]),t._v(" 原生提供的内置方法冲突，比如：")],1),t._m(254),t._m(255),t._m(256),t._m(257),t._m(258),t._m(259),t._m(260),t._m(261),t._m(262),t._m(263),t._m(264),t._m(265),t._m(266),t._m(267),t._m(268),t._m(269),t._m(270),t._m(271),t._m(272),t._m(273),t._m(274),t._m(275),t._m(276),t._m(277),t._m(278),n("p",[t._v("这段代码定义了 "),n("code",[t._v("result")]),t._v(" 常量，该常量的值为通过 "),n("code",[t._v("Object.create(null)")]),t._v(" 创建的空对象，并且 "),n("code",[t._v("result")]),t._v(" 常量的值将来会作为返回值被返回。接着定义了 "),n("code",[t._v("keys")]),t._v(" 常量，它的值是一个数组，即由 "),n("code",[t._v("inject")]),t._v(" 选项对象所有键名组成的数组，在 "),n("router-link",{attrs:{to:"./4vue-normalize.html#规范化-inject（normalizeinject）"}},[t._v("Vue 选项的规范化")]),t._v(" 一节中我们讲到了 "),n("code",[t._v("inject")]),t._v(" 选项被规范化后将会是一个对象，并且该对象必然会包含 "),n("code",[t._v("from")]),t._v(" 属性。例如如果你的 "),n("code",[t._v("inject")]),t._v(" 选项是一个字符串数组：")],1),t._m(279),t._m(280),t._m(281),t._m(282),t._m(283),n("p",[t._v("如上这两种最终都将被格式化为：")]),t._m(284),t._m(285),t._m(286),t._m(287),t._m(288),t._m(289),n("p",[t._v("现在我们知道 "),n("code",[t._v("keys")]),t._v(" 常量中保存中 "),n("code",[t._v("inject")]),t._v(" 选项对象的每一个键值，但我们注意到这里有一个对 "),n("router-link",{attrs:{to:"../appendix/core-util.html#hassymbol"}},[t._v("hasSymbol")]),t._v(" 的判断，其目的是保证 "),n("code",[t._v("Symbol")]),t._v(" 类型与 "),n("code",[t._v("Reflect.ownKeys")]),t._v(" 可用且为宿主环境原生提供，如果 "),n("code",[t._v("hasSymbol")]),t._v(" 为真，则说明可用，此时会使用 "),n("code",[t._v("Reflect.ownKeys")]),t._v(" 获取 "),n("code",[t._v("inject")]),t._v(" 对象中所有可枚举的键名，否则使用 "),n("code",[t._v("Object.keys")]),t._v(" 作为降级处理。实际上 "),n("code",[t._v("Reflect.ownKeys")]),t._v(" 配合可枚举过滤等价于 "),n("code",[t._v("Object.keys")]),t._v(" 与 "),n("code",[t._v("Object.getOwnPropertySymbols")]),t._v(" 配合可枚举过滤之和，其好处是支持 "),n("code",[t._v("Symbol")]),t._v(" 类型作为键名，当然了这一切都建立在宿主环境的支持之上，所以 "),n("code",[t._v("Vue")]),t._v(" 官网中提到了**"),n("code",[t._v("inject")]),t._v(" 选项对象的属性可以使用 "),n("code",[t._v("ES2015 Symbols")]),t._v(" 作为 "),n("code",[t._v("key")]),t._v("，但是只在原生支持 "),n("code",[t._v("Symbol")]),t._v(" 和 "),n("code",[t._v("Reflect.ownKeys")]),t._v(" 的环境下可工作**。")],1),t._m(290),t._m(291),n("p",[t._v("在循环内部首先定义了两个常量以及一个变量：")]),t._m(292),t._m(293),t._m(294),t._m(295),t._m(296),t._m(297),t._m(298),t._m(299),t._m(300),t._m(301),t._m(302),t._m(303),t._m(304),t._m(305),t._m(306),t._m(307),t._m(308),t._m(309),t._m(310),t._m(311),t._m(312)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"其他重要选项的初始化及实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#其他重要选项的初始化及实现","aria-hidden":"true"}},[this._v("#")]),this._v(" 其他重要选项的初始化及实现")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在前面的章节中，我们以 "),s("code",[this._v("initState")]),this._v(" 函数为切入点讲解了数据响应系统，又通过数据响应系统讲解了 "),s("code",[this._v("watch")]),this._v(" 和计算属性的实现，现在我们重新审视一下 "),s("code",[this._v("initState")]),this._v(" 函数，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("initState")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Component"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_watchers "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" opts "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options\n"),n("span",{attrs:{class:"highlighted-line"}},[t._v("  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opts"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("initProps")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" opts"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),n("span",{attrs:{class:"highlighted-line"}},[t._v("  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opts"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("methods"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("initMethods")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" opts"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("methods"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opts"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("data"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("initData")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("observe")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_data "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("/* asRootData */")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opts"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("computed"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("initComputed")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" opts"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("computed"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opts"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("watch "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" opts"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("watch "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" nativeWatch"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("initWatch")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" opts"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("watch"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上高亮的代码所示，到目前为止整个 "),s("code",[this._v("initState")]),this._v(" 函数中我们还剩下 "),s("code",[this._v("props")]),this._v(" 以及 "),s("code",[this._v("method")]),this._v(" 等选项的初始化和实现没有讲，接下来的内容我们将继续探索剩余选项的初始化及实现。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"props-的初始化及实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#props-的初始化及实现","aria-hidden":"true"}},[this._v("#")]),this._v(" props 的初始化及实现")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"props-的初始化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#props-的初始化","aria-hidden":"true"}},[this._v("#")]),this._v(" props 的初始化")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("首先我们要讲的是 "),s("code",[this._v("props")]),this._v(" 选项的初始化及实现，在 "),s("code",[this._v("initState")]),this._v(" 函数中可以看到如下这句代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("opts"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("initProps")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" opts"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("可以发现，只有当 "),n("code",[t._v("opts.props")]),t._v(" 选项存在时才会调用 "),n("code",[t._v("initProps")]),t._v(" 函数进行初始化工作。"),n("code",[t._v("initProps")]),t._v(" 函数与其他选项的初始化函数类似，接收两个参数分别是组件实例对象 "),n("code",[t._v("vm")]),t._v(" 和选项 "),n("code",[t._v("opts.props")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("props"),s("span",{attrs:{class:"token punctuation"}},[this._v(":")]),this._v(" "),s("span",{attrs:{class:"token punctuation"}},[this._v("[")]),s("span",{attrs:{class:"token string"}},[this._v('"someData"')]),s("span",{attrs:{class:"token punctuation"}},[this._v("]")]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么最终 "),s("code",[this._v("props")]),this._v(" 选项将会被规范化为：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  someData"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果我们像如下代码这样使用 "),s("code",[this._v("props")]),this._v(" 选项：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  someData1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Number\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么 "),s("code",[this._v("props")]),this._v(" 选项将被规范化为：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  someData1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Number\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("总之在被规范化后的 "),s("code",[this._v("props")]),this._v(" 选项将会是一个对象，并且该对象每个属性的键名就是对应 "),s("code",[this._v("prop")]),this._v(" 的名字，而且每个属性的值都是一个至少会包含一个 "),s("code",[this._v("type")]),this._v(" 属性的对象。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("明白了这些我们就可以开始研究 "),s("code",[this._v("initProps")]),this._v(" 函数了，找到 "),s("code",[this._v("initProps")]),this._v(" 函数，该函数的开头定义了四个常量：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" propsData "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("propsData "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" props "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_props "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// cache prop keys so that future props updates can iterate using Array")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// instead of dynamic object key enumeration.")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" keys "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_propKeys "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isRoot "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$parent\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("首先定义了 "),n("code",[t._v("propsData")]),t._v(" 常量，如果 "),n("code",[t._v("vm.$options.propsData")]),t._v(" 存在，则使用 "),n("code",[t._v("vm.$options.propsData")]),t._v(" 的值作为 "),n("code",[t._v("propsData")]),t._v(" 常量的值，否则 "),n("code",[t._v("propsData")]),t._v(" 常量的值为空对象。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("那么 "),n("code",[t._v("vm.$options.propsData")]),t._v(" 是什么呢？顾名思义 "),n("code",[t._v("propsData")]),t._v(" 就是 "),n("code",[t._v("props")]),t._v(" 数据，我们知道组件的 "),n("code",[t._v("props")]),t._v(" 代表接收来自外界传递进来的数据，这些数据总要存在某个地方，使得我们在组件内使用，而 "),n("code",[t._v("vm.$options.propsData")]),t._v(" 就是用来存储来自外界的组件数据的。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("some-comp")]),t._v(" "),n("span",{attrs:{class:"token attr-name"}},[t._v("prop1")]),n("span",{attrs:{class:"token attr-value"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("1"),n("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),n("span",{attrs:{class:"token attr-name"}},[t._v("prop2")]),n("span",{attrs:{class:"token attr-value"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("2"),n("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上面的代码中我们向自定义组件 "),s("code",[this._v("some-comp")]),this._v(" 传递了两个属性，注意此时组件并没有把这两个属性作为 "),s("code",[this._v("props")]),this._v(" 看待，但是如果自定义组件中显示声明了 "),s("code",[this._v("props")]),this._v("：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'someCopm'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  props"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v("'prop1'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'prop2'")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这时自定义组件 "),s("code",[this._v("some-comp")]),this._v(" 才会把外界传递进来的属性作为 "),s("code",[this._v("props")]),this._v(" 对待，并解析相应 "),s("code",[this._v("props")]),this._v(" 数据。如何解析呢？拿上面的例子来说，会从如下模板中：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("some-comp")]),t._v(" "),n("span",{attrs:{class:"token attr-name"}},[t._v("prop1")]),n("span",{attrs:{class:"token attr-value"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("1"),n("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),n("span",{attrs:{class:"token attr-name"}},[t._v("prop2")]),n("span",{attrs:{class:"token attr-value"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("2"),n("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("解析出两个 "),s("code",[this._v("props")]),this._v(" 的键值对，并生成一个对象：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  prop1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'1'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  prop2"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'2'")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("实际上这个对象就是 "),s("code",[this._v("vm.$options.propsData")]),this._v(" 的值：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("propsData "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  prop1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'1'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  prop2"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'2'")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上说明只是为了让大家明白 "),s("code",[this._v("propsData")]),this._v(" 的作用和来历，有很多不严谨的地方，但足够让大家理解。更具体的内容我们会在编译器和子组件的创建相关章节中为大家详细说明。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这样我们就明白了第一个常量 "),s("code",[this._v("propsData")]),this._v(" 的作用，它存储着外界传递进来的 "),s("code",[this._v("props")]),this._v(" 的值。接着我们看一下第二个常量：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" props "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_props "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("定义了 "),n("code",[t._v("props")]),t._v(" 常量和 "),n("code",[t._v("vm._props")]),t._v(" 属性，它和 "),n("code",[t._v("vm._props")]),t._v(" 属性具有相同的引用并且初始值为空对象："),n("code",[t._v("{}")]),t._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" keys "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_propKeys "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("定义了常量 "),n("code",[t._v("keys")]),t._v("，同时在 "),n("code",[t._v("vm.options")]),t._v(" 上添加 "),n("code",[t._v("_propKeys")]),t._v(" 属性，并且常量 "),n("code",[t._v("keys")]),t._v(" 与 "),n("code",[t._v("vm.$options._propKeys")]),t._v(" 属性具有相同的引用，且初始值是一个空数组："),n("code",[t._v("[]")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后一个常量为 "),s("code",[this._v("isRoot")]),this._v("：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isRoot "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$parent\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("isRoot")]),this._v(" 常量用来标识是否是根组件，因为根组件实例的 "),s("code",[this._v("$parent")]),this._v(" 属性的值是不存在的，所以当 "),s("code",[this._v("vm.$parent")]),this._v(" 为假时说明当前组件实例时根组件。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("isRoot"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("false")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" propsOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这段代码的重点在 "),n("code",[t._v("for...in")]),t._v(" 循环语句块内，为了结构清晰如上代码中我们省略了 "),n("code",[t._v("for...in")]),t._v(" 循环语句块内的代码。可以看到在 "),n("code",[t._v("for...in")]),t._v(" 循环执行之前执行一段 "),n("code",[t._v("if")]),t._v(" 条件语句块：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("isRoot"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("false")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("只要当前组件实例不是根节点，那么该 "),n("code",[t._v("if")]),t._v(" 语句块内的代码将会被执行，即调用 "),n("code",[t._v("toggleObserving")]),t._v(" 函数并传递 "),n("code",[t._v("false")]),t._v(" 作为参数。另外我们也可以发现，在 "),n("code",[t._v("for...in")]),t._v(" 循环之后再次调用了 "),n("code",[t._v("toggleObserving")]),t._v(" 函数，只不过这一次所传递的参数是 "),n("code",[t._v("true")]),t._v("。我们前面遇到过 "),n("code",[t._v("toggleObserving")]),t._v(" 函数，我们知道这个函数的作用类似一个开关，它会修改 "),n("code",[t._v("src/core/observer/index.js")]),t._v(" 文件中 "),n("code",[t._v("shouldObserve")]),t._v(" 变量的值。并且我们注意到 "),n("code",[t._v("observe")]),t._v(" 函数中的这段代码，如下高亮代码所示：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("observe")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" asRootData"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("boolean"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Observer "),n("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token function"}},[t._v("hasOwn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'__ob__'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" value"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ob__ "),n("span",{attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("Observer")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ob "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" value"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("__ob__\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[t._v("    shouldObserve "),n("span",{attrs:{class:"token operator"}},[t._v("&&")])]),t._v("    "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),n("span",{attrs:{class:"token function"}},[t._v("isServerRendering")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Array"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("isArray")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("isPlainObject")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n    Object"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("isExtensible")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n    "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_isVue\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ob "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("Observer")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ob\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这意味着当你调用 "),n("code",[t._v("observe")]),t._v(" 函数去观测一个数据对象时，只有当变量 "),n("code",[t._v("shouldObserve")]),t._v(" 为真的时候才会进行观测。所以我们才说 "),n("code",[t._v("toggleObserving")]),t._v(" 函数是一个开关，因为它能修改 "),n("code",[t._v("shouldObserve")]),t._v(" 变量的值。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("isRoot"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[t._v("  "),n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("false")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" propsOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为什么这里在 "),s("code",[this._v("for...in")]),this._v(" 循环之前“关闭开关”，在循环结束之后又“打开开关”呢？这么做肯定是有原因的，不过我们需要先弄清楚 "),s("code",[this._v("for...in")]),this._v(" 循环语句块内做了什么事情才行，接下来我们开始研究这个 "),s("code",[this._v("for...in")]),this._v(" 循环。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("首先该 "),n("code",[t._v("for...in")]),t._v(" 循环所遍历的对象是 "),n("code",[t._v("propsOptions")]),t._v("，它就是 "),n("code",[t._v("props")]),t._v(" 选项参数，我们前面分析了它的格式，所以 "),n("code",[t._v("for...in")]),t._v(" 循环中的 "),n("code",[t._v("key")]),t._v(" 就是每个 "),n("code",[t._v("prop")]),t._v(" 的名字。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("keys"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("push")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" value "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("validateProp")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" propsOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" propsData"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("首先将 "),n("code",[t._v("prop")]),t._v(" 的名字("),n("code",[t._v("key")]),t._v(")添加到 "),n("code",[t._v("keys")]),t._v(" 数组中，我们知道常量 "),n("code",[t._v("keys")]),t._v(" 与 "),n("code",[t._v("vm.$options._propKeys")]),t._v(" 属性具有相同的引用，所以这等价于将 "),n("code",[t._v("key")]),t._v(" 添加到 "),n("code",[t._v("vm.$options._propKeys")]),t._v(" 属性中，至于为什么添加到 "),n("code",[t._v("vm.$options._propKeys")]),t._v(" 属性，我们会在后面讲到。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("接着定义了 "),n("code",[t._v("value")]),t._v(" 常量，该常量的值为 "),n("code",[t._v("validateProp")]),t._v(" 函数的返回值。一句话概括 "),n("code",[t._v("validateProp")]),t._v(" 函数的作用：用来校验名字给定的 "),n("code",[t._v("prop")]),t._v(" 数据是否符合预期的类型，并返回相应 "),n("code",[t._v("prop")]),t._v(" 的值(或默认值)。至于 "),n("code",[t._v("validateProp")]),t._v(" 函数的具体实现我们放到后面讲，现在大家只需要知道 "),n("code",[t._v("validateProp")]),t._v(" 函数会返回给定名字的 "),n("code",[t._v("prop")]),t._v(" 的值即可，也就是说常量 "),n("code",[t._v("value")]),t._v(" 中保存着 "),n("code",[t._v("prop")]),t._v(" 的值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接着是一个 "),s("code",[this._v("if...else")]),this._v(" 语句块：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'production'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hyphenatedKey "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("hyphenate")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token function"}},[t._v("isReservedAttribute")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hyphenatedKey"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v("\n      config"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("isReservedAttr")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hyphenatedKey"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v('`"')]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("hyphenatedKey"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v('" is a reserved attribute and cannot be used as component prop.`')])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      vm\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$parent "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("isUpdatingChildComponent"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`Avoid mutating a prop directly since the value will be `")])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`overwritten whenever the parent component re-renders. `")])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`Instead, use a data or computed property based on the prop's `")])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v('`value. Prop being mutated: "')]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("key"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v('"`')])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        vm\n      "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在非生产环境下 "),n("code",[t._v("if")]),t._v(" 语句块的代码将被执行，反之 "),n("code",[t._v("else")]),t._v(" 语句块内的代码将被执行，前面我们说过，无论是生产环境还是非生产环境，应该保证行为一致才是最关键的一点。在如上代码中虽然 "),n("code",[t._v("if")]),t._v(" 语句块内的代码很多，而 "),n("code",[t._v("else")]),t._v(" 语句块只有一句代码，但其实他们的行为是一致的，之所以 "),n("code",[t._v("if")]),t._v(" 语句块的代码会比较多，那是因为在非生产环境下要做很多打印警告信息使开发更加友好的工作。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以如上 "),s("code",[this._v("if...else")]),this._v(" 语句块最终的目的可以用一句代码来代替，即：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("使用 "),n("code",[t._v("defineReactive")]),t._v(" 函数将 "),n("code",[t._v("prop")]),t._v(" 定义到常量 "),n("code",[t._v("props")]),t._v(" 上，我们知道 "),n("code",[t._v("props")]),t._v(" 常量与 "),n("code",[t._v("vm._props")]),t._v(" 属性具有相同的引用，所以这等价于在 "),n("code",[t._v("vm._props")]),t._v(" 上定义了 "),n("code",[t._v("prop")]),t._v(" 数据。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("同时大家注意 "),s("code",[this._v("defineReactive")]),this._v(" 函数的调用被 "),s("code",[this._v("toggleObserving")]),this._v(" 函数的调用所包围，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("isRoot"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[t._v("  "),n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("false")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" propsOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'production'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[t._v("    "),n("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("为了搞清楚其目的，我们需要找到 "),s("code",[this._v("defineReactive")]),this._v(" 函数，注意如下高亮的代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  obj"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  key"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  val"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  customSetter"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Function"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  shallow"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boolean\n"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n\n"),n("span",{attrs:{class:"highlighted-line"}},[t._v("  "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" childOb "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("shallow "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("observe")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  Object"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("defineProperty")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("obj"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    enumerable"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    configurable"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("get")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("reactiveGetter")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("set")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("reactiveSetter")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newVal"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("如上那句高亮的代码所示，在使用 "),n("code",[t._v("defineReactive")]),t._v(" 函数定义属性时，会调用 "),n("code",[t._v("observe")]),t._v(" 函数对值继续进行观测。但由于之前使用了 "),n("code",[t._v("toggleObserving(false)")]),t._v(" 函数关闭了开关，所以上面高亮代码中调用 "),n("code",[t._v("observe")]),t._v(" 函数是一个无效调用。所以我们可以得出一个结论："),n("strong",[t._v("在定义 "),n("code",[t._v("props")]),t._v(" 数据时，不将 "),n("code",[t._v("prop")]),t._v(" 值转换为响应式数据")]),t._v("，这里要注意的是："),n("strong",[t._v("由于 "),n("code",[t._v("props")]),t._v(" 本身是通过 "),n("code",[t._v("defineReactive")]),t._v(" 定义的，所以 "),n("code",[t._v("props")]),t._v(" 本身是响应式的，但没有对值进行深度定义")]),t._v("。为什么这样做呢？很简单，我们知道 "),n("code",[t._v("props")]),t._v(" 是来自外界的数据，或者更具体一点的说，"),n("code",[t._v("props")]),t._v(" 是来自父组件的数据，这个数据如果是一个对象(包括纯对象和数组)，那么它本身可能已经是响应式的了，所以不再需要重复定义。另外在定义 "),n("code",[t._v("props")]),t._v(" 数据之后，又调用 "),n("code",[t._v("toggleObserving(true)")]),t._v(" 函数将开关开启，这么做的目的是不影响后续代码的功能，因为这个开关是全局的。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("isRoot"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("false")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这段代码说明，只有当不是根组件的时候才会关闭开关，这说明如果当前组件实例是根组件的话，那么定义的 "),s("code",[this._v("props")]),this._v(" 的值也会被定义为响应式数据。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("通过以上内容的讲解，我们应该知道的是 "),n("code",[t._v("props")]),t._v(" 本质上与 "),n("code",[t._v("data")]),t._v(" 是相同的，区别就在于二者数据来源不同，其中 "),n("code",[t._v("data")]),t._v(" 数据定义的组件自身，我们称其为本地数据，而 "),n("code",[t._v("props")]),t._v(" 数据来自于外界。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("另外我们还有一段代码没有讲解，就是 "),s("code",[this._v("for...in")]),this._v(" 循环的最后一段代码，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("proxy")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`_props`")])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在讲解 "),s("code",[this._v("data")]),this._v(" 选项初始化的时候我们见过类似的代码，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token function"}},[t._v("proxy")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`_data`")])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("所以这么做的目的就是在组件实例对象上第一与 "),n("code",[t._v("props")]),t._v(" 同名的属性，使得我们能够通过组件实例对象直接访问 "),n("code",[t._v("props")]),t._v(" 数据，但其最终代理的值仍然是 "),n("code",[t._v("vm._props")]),t._v(" 对象下定义的 "),n("code",[t._v("props")]),t._v(" 数据。另外我们要注意这里 "),n("code",[t._v("if")]),t._v(" 语句条件：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"highlighted-line"}},[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),t._v("  "),n("span",{attrs:{class:"token function"}},[t._v("proxy")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`_props`")])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("只有当 "),n("code",[t._v("key")]),t._v(" 不在组件实例对象上以及其原型链上有定义时才会进行代理，这是一个针对子组件的优化操作，对于子组件来讲这个代理工作在创建子组件构造函数时就完成了，即在 "),n("code",[t._v("Vue.extend")]),t._v(" 函数中完成的，这么做的目的是避免每次创建子组件实例时都会调用 "),n("code",[t._v("proxy")]),t._v(" 函数去做代理，由于 "),n("code",[t._v("proxy")]),t._v(" 函数中使用了 "),n("code",[t._v("Object.defineProperty")]),t._v(" 函数，该函数的性能表现不佳，所以这么做能够提升一定的性能指标。更多这部分的详细信息我们会在后面讲解 "),n("code",[t._v("Vue.extend")]),t._v(" 函数及相关子组件创建时间的时候为大家详细说明。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后我们再来看一下初始化 "),s("code",[this._v("props")]),this._v(" 部分打印警告信息相关的内容，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'production'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hyphenatedKey "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("hyphenate")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token function"}},[t._v("isReservedAttribute")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hyphenatedKey"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v("\n      config"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("isReservedAttr")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hyphenatedKey"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v('`"')]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("hyphenatedKey"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v('" is a reserved attribute and cannot be used as component prop.`')])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      vm\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$parent "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("isUpdatingChildComponent"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`Avoid mutating a prop directly since the value will be `")])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`overwritten whenever the parent component re-renders. `")])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`Instead, use a data or computed property based on the prop's `")])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v('`value. Prop being mutated: "')]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("key"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v('"`')])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        vm\n      "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在非生产环境下会执行 "),s("code",[this._v("if")]),this._v(" 语句块的代码，首先执行的如下这段代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" hyphenatedKey "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("hyphenate")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token function"}},[t._v("isReservedAttribute")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hyphenatedKey"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v("\n    config"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("isReservedAttr")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hyphenatedKey"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v('`"')]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("hyphenatedKey"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v('" is a reserved attribute and cannot be used as component prop.`')])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    vm\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("首先使用 "),n("code",[t._v("hyphenate")]),t._v(" 将 "),n("code",[t._v("prop")]),t._v(" 的名字转为连字符加小写的形式，并将转换后的值赋值给 "),n("code",[t._v("hyphenatedKey")]),t._v(" 常量，紧接着又是一个 "),n("code",[t._v("if")]),t._v(" 条件语句块，其条件是在判断 "),n("code",[t._v("prop")]),t._v(" 的名字是否是保留的属性("),n("code",[t._v("attribute")]),t._v(")，如果是则会打印警告信息，警告你不能使用保留的属性("),n("code",[t._v("attribute")]),t._v(")名作为 "),n("code",[t._v("prop")]),t._v(" 的名字。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接着使用了 "),s("code",[this._v("defineReactive")]),this._v(" 函数定义 "),s("code",[this._v("props")]),this._v(" 数据：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$parent "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("isUpdatingChildComponent"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`Avoid mutating a prop directly since the value will be `")])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n      "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`overwritten whenever the parent component re-renders. `")])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n      "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`Instead, use a data or computed property based on the prop's `")])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n      "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v('`value. Prop being mutated: "')]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("key"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v('"`')])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      vm\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("可以看到与生产环境不同的是，在调用 "),n("code",[t._v("defineReactive")]),t._v(" 函数时多传递了第四个参数，我们知道 "),n("code",[t._v("defineReactive")]),t._v(" 函数的第三个参数是 "),n("code",[t._v("customSetter")]),t._v("，即自定义的 "),n("code",[t._v("setter")]),t._v("，这个 "),n("code",[t._v("setter")]),t._v(" 会在你尝试修改 "),n("code",[t._v("props")]),t._v(" 数据时触发，并打印警告信息提示你不要直接修改 "),n("code",[t._v("props")]),t._v(" 数据。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"props-的校验"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#props-的校验","aria-hidden":"true"}},[this._v("#")]),this._v(" props 的校验")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" value "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("validateProp")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" propsOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" propsData"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("也就是 "),n("code",[t._v("props")]),t._v(" 的校验，和一些其他工作，比如获取默认值等。如上这句代码是在 "),n("code",[t._v("initProps")]),t._v(" 函数体内的 "),n("code",[t._v("for...in")]),t._v(" 循环语句，传递给 "),n("code",[t._v("validateProp")]),t._v(" 函数的四个参数分别是：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[n("code",[t._v("key")]),t._v("："),n("code",[t._v("prop")]),t._v(" 的名字")]),n("li",[n("code",[t._v("propsOptions")]),t._v("：整个 "),n("code",[t._v("props")]),t._v(" 选项对象")]),n("li",[n("code",[t._v("propsData")]),t._v("：整个 "),n("code",[t._v("props")]),t._v(" 数据来源对象")]),n("li",[n("code",[t._v("vm")]),t._v("：组件实例对象")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'someComp'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  props"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    prop1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("some-comp")]),t._v(" "),n("span",{attrs:{class:"token attr-name"}},[t._v("prop1")]),n("span",{attrs:{class:"token attr-value"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("str"),n("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么 "),s("code",[this._v("validateProp")]),this._v(" 函数接收的四个参数将会是：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// props 的名字")]),t._v("\nkey "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'prop1'")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// props 选项参数")]),t._v("\npropOptions "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  prop1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// props 数据")]),t._v("\npropsData "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  prop1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'str'")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 组件实例对象")]),t._v("\nvm "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("了解了 "),s("code",[this._v("validateProp")]),this._v(" 函数的参数之后，我们可以开始研究 "),s("code",[this._v("validateProp")]),this._v(" 函数内的代码了，在该函数的一开头定义了两个常量和一个变量，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prop "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" propOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" absent "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),n("span",{attrs:{class:"token function"}},[t._v("hasOwn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("propsData"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" value "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" propsData"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("其中常量 "),n("code",[t._v("prop")]),t._v(" 的值为 "),n("code",[t._v("propOptions[key]")]),t._v("，也就是名字为 "),n("code",[t._v("key")]),t._v(" 的 "),n("code",[t._v("props")]),t._v(" 的定义，拿上面的例子来说，如果 "),n("code",[t._v("key")]),t._v(" 的值为 "),n("code",[t._v("prop1")]),t._v("，那么常量 "),n("code",[t._v("prop")]),t._v(" 的值为：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prop "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" String\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("第二个常量是 "),n("code",[t._v("absent")]),t._v("，它是一个布尔值，代表着对应的 "),n("code",[t._v("prop")]),t._v(" 在 "),n("code",[t._v("propsData")]),t._v(" 上是否有数据，或者换句话说外界是否传递了该 "),n("code",[t._v("prop")]),t._v(" 给组件。如果 "),n("code",[t._v("absent")]),t._v(" 为真，则代表 "),n("code",[t._v("prop")]),t._v(" 数据缺失。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("第三个定义的 "),n("code",[t._v("value")]),t._v(" 是一个变量，它的值是通过读取 "),n("code",[t._v("propsData")]),t._v(" 得到的，当然了如果外界没有向组件传递相应的 "),n("code",[t._v("prop")]),t._v(" 数据，那么 "),n("code",[t._v("value")]),t._v(" 就是 "),n("code",[t._v("undefined")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再往下定义了 "),s("code",[this._v("booleanIndex")]),this._v(" 常量：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" booleanIndex "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("getTypeIndex")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Boolean"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prop"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("booleanIndex")]),t._v(" 常量的值是调用 "),n("code",[t._v("getTypeIndex")]),t._v(" 函数的返回值，那么 "),n("code",[t._v("getTypeIndex")]),t._v(" 函数的作用是什么呢？首先 "),n("code",[t._v("getTypeIndex")]),t._v(" 函数接收两个参数，这两个参数都是某一个类型数据结构的构造函数，它可以是 "),n("code",[t._v("javascript")]),t._v(" 原生数据类型的构造函数，也可以是自定义构造函数。"),n("code",[t._v("getTypeIndex")]),t._v(" 函数的作用准确地说是用来查找第一个参数所指定的类型构造函数是否存在于第二个参数所指定的类型构造函数数组中，没错第二个参数可能是一个数组，比如我们像如下这样定义 "),n("code",[t._v("props")]),t._v("：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  prop1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Number"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么经过规范化后 "),s("code",[this._v("propOptions")]),this._v(" 将是：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("propOptions "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  prop1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Number"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("回过头来，如果 "),s("code",[this._v("getTypeIndex")]),this._v(" 函数第一个参数所指定的类型构造函数存在于第二个参数所指定的类型构造函数数组中，那么 "),s("code",[this._v("getTypeIndex")]),this._v(" 函数将返回第一个参数在第二个参数数组中的位置，否则返回 "),s("code",[this._v("-1")]),this._v("，这说明第一个参数指定的类型构造函数不在第二个参数指定类型构造函数数组中。最后补充一下，第二个参数可能是数组也可能是单一的一个类型构造函数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("具体看一下 "),s("code",[this._v("getTypeIndex")]),this._v(" 函数的实现，找到 "),s("code",[this._v("getTypeIndex")]),this._v(" 函数，它定义在 "),s("code",[this._v("src/core/util/props.js")]),this._v(" 文件的最下方，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("getTypeIndex")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" expectedTypes"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" number "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("Array"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("isArray")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expectedTypes"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("isSameType")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expectedTypes"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" expectedTypes"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" len"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{attrs:{class:"token operator"}},[t._v("++")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token function"}},[t._v("isSameType")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expectedTypes"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们可以看到在 "),s("code",[this._v("getTypeIndex")]),this._v(" 函数内部首先检测了 "),s("code",[this._v("expectedTypes")]),this._v(" 是否为数组，如果不是数组那说明是一个单一的类型构造函数，此时会执行如下高亮的代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("Array"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("isArray")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expectedTypes"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[t._v("  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("isSameType")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expectedTypes"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token number"}},[t._v("1")])]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这句代码调用了 "),n("code",[t._v("isSameType")]),t._v(" 函数，并将两个类型构造函数作为参数传递，"),n("code",[t._v("isSameType")]),t._v(" 函数的作用就是用来判断给定的两个类型构造函数是否相同，找到 "),n("code",[t._v("isSameType")]),t._v(" 函数，它定义在 "),n("code",[t._v("getTypeIndex")]),t._v(" 函数的上方，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("getType")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" fn "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" fn"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("toString")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("match")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token regex"}},[t._v("/^\\s*function (\\w+)/")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" match "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" match"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("''")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("isSameType")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("getType")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("getType")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("通过如上代码可知 "),s("code",[this._v("isSameType")]),this._v(" 函数是通过调用 "),s("code",[this._v("getType")]),this._v(" 函数获取到类型的描述后进行比较的，有的同学可能会问直接将两个类型作比较不就可以了吗？为什么要这么麻烦？实际上这么做肯定是有原因的，我们可以看到在 "),s("code",[this._v("getType")]),this._v(" 函数上方有这样一段注释：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token comment"}},[this._v("/**\n * Use function string name to check built-in types,\n * because a simple equality check will fail when running\n * across different vms / iframes.\n */")]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这是在说简单的类型之间直接比较在不同的 "),s("code",[this._v("iframes / vms")]),this._v(" 之间是不管用的，我们回想一下如何判断一个数据是否是数组的方法，其中一个方法就是使用 "),s("code",[this._v("instanceof")]),this._v(" 操作符：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("someData "),s("span",{attrs:{class:"token keyword"}},[this._v("instanceof")]),this._v(" "),s("span",{attrs:{class:"token class-name"}},[this._v("Array")]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这种方式的问题就在于，不同 "),s("code",[this._v("iframes")]),this._v(" 之间的 "),s("code",[this._v("Array")]),this._v(" 构造函数本身都是不相等的。所以以上判断方法只适用于在同一个 "),s("code",[this._v("iframes")]),this._v(" 环境下。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("同理，为了做到更严谨的判断，我们需要使用 "),s("code",[this._v("getType")]),this._v(" 函数，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("getType")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fn"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" fn "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" fn"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("toString")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("match")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token regex"}},[t._v("/^\\s*function (\\w+)/")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" match "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" match"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("''")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("getType")]),this._v(" 函数很简单，它接收一个函数作为参数，然后使用正则去匹配该函数 "),s("code",[this._v("toString()")]),this._v(" 后的字符串，并捕获函数的名字，最后如果捕获成功则返回函数名字，否则返回空字符串。这样一来，在做类型比较的时候本质上是做字符串之间的比较，这样就永远不会有问题。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们再回到 "),s("code",[this._v("isSameType")]),this._v(" 函数：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("isSameType")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" b"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("getType")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("getType")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("b"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可知如果两个参数给定的类型构造函数相同则 "),s("code",[this._v("isSameType")]),this._v(" 函数返回真，否则返回假。我们再来查看 "),s("code",[this._v("getTypeIndex")]),this._v(" 函数：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("getTypeIndex")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" expectedTypes"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" number "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("Array"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("isArray")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expectedTypes"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[t._v("    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("isSameType")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expectedTypes"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token number"}},[t._v("1")])]),t._v("  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" len "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" expectedTypes"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" len"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{attrs:{class:"token operator"}},[t._v("++")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token function"}},[t._v("isSameType")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expectedTypes"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" i\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("如果 "),n("code",[t._v("expectedTypes")]),t._v(" 不是数组，那么如果传递给 "),n("code",[t._v("getTypeIndex")]),t._v(" 函数的两个参数类型相同，则返回数字 "),n("code",[t._v("0")]),t._v("，否则返回数字 "),n("code",[t._v("-1")]),t._v("。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("接着如果 "),n("code",[t._v("expectedTypes")]),t._v(" 是一个数组，则通过 "),n("code",[t._v("for")]),t._v(" 循环遍历该数组中的每一个类型构造函数，并使用 "),n("code",[t._v("isSameType")]),t._v(" 函数让其与给定的类型构造函数做对比，如果二者相同则直接返回给定类型构造函数在 "),n("code",[t._v("expectedTypes")]),t._v(" 数组中的位置，如果没有在 "),n("code",[t._v("expectedTypes")]),t._v(" 数组中找到给定的类型构造函数则 "),n("code",[t._v("getTypeIndex")]),t._v(" 函数最后会返回 "),n("code",[t._v("-1")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("总之 "),s("code",[this._v("getTypeIndex")]),this._v(" 函数的返回值如果大于 "),s("code",[this._v("-1")]),this._v("，则说明给定的类型构造函数在期望的类型构造函数之中。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" booleanIndex "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("getTypeIndex")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Boolean"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prop"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("booleanIndex "),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("absent "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),n("span",{attrs:{class:"token function"}},[t._v("hasOwn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prop"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'default'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    value "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("''")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" value "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("hyphenate")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// only cast empty string / same name to boolean if")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// boolean has higher priority")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" stringIndex "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("getTypeIndex")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prop"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stringIndex "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" booleanIndex "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" stringIndex"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      value "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("也就是说常量 "),n("code",[t._v("booleanIndex")]),t._v(" 的值如果大于 "),n("code",[t._v("-1")]),t._v("，说明在定义 "),n("code",[t._v("props")]),t._v(" 时指定了 "),n("code",[t._v("Boolean")]),t._v(" 类型。此时如上代码中 "),n("code",[t._v("if")]),t._v(" 语句块的内容将被执行，在 "),n("code",[t._v("if")]),t._v(" 语句块内首先检测如下条件：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("absent "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),n("span",{attrs:{class:"token function"}},[t._v("hasOwn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prop"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'default'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("其中 "),n("code",[t._v("absent")]),t._v(" 常量我们前面介绍过，它为真说明外界没有向组件传递该 "),n("code",[t._v("prop")]),t._v("，所以如上条件所代表的意思是："),n("strong",[t._v("外界没有为组件传递该 "),n("code",[t._v("prop")]),t._v("，并且该 "),n("code",[t._v("prop")]),t._v(" 也没有指定默认值")]),t._v("。在这种情况下如果你指定该 "),n("code",[t._v("prop")]),t._v(" 的类型为 "),n("code",[t._v("Boolean")]),t._v("，那么 "),n("code",[t._v("Vue")]),t._v(" 会自动将该 "),n("code",[t._v("prop")]),t._v(" 的值设置为 "),n("code",[t._v("false")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果 "),s("code",[this._v("absent")]),this._v(" 为假，说明外界向组件传递了该 "),s("code",[this._v("prop")]),this._v("，此时会进入 "),s("code",[this._v("else...if")]),this._v(" 判断，判断条件如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("value "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("''")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" value "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("hyphenate")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这说明外界向组件传递的 "),s("code",[this._v("prop")]),this._v(" 要么是一个空字符串，要么就是一个名字由驼峰转连字符后与值为相同字符串的 "),s("code",[this._v("prop")]),this._v("，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("\x3c!-- 值为空字符串 --\x3e")]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("some-comp")]),t._v(" "),n("span",{attrs:{class:"token attr-name"}},[t._v("prop1")]),n("span",{attrs:{class:"token attr-value"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("\x3c!-- 名字由驼峰转连字符后与值为相同字符串 --\x3e")]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("some-comp")]),t._v(" "),n("span",{attrs:{class:"token attr-name"}},[t._v("someProp")]),n("span",{attrs:{class:"token attr-value"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("some-prop"),n("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("如果你像如上代码那样为组件传递 "),n("code",[t._v("props")]),t._v("，并且这些指定了这些 "),n("code",[t._v("props")]),t._v(" 的类型包括 "),n("code",[t._v("Boolean")]),t._v(" 类型。那么此时 "),n("code",[t._v("else...if")]),t._v(" 语句块的代码将被执行，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// only cast empty string / same name to boolean if")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// boolean has higher priority")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" stringIndex "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("getTypeIndex")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prop"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stringIndex "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" booleanIndex "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" stringIndex"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  value "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这句代码首先定义了 "),n("code",[t._v("stringIndex")]),t._v(" 常量，该常量的值是 "),n("code",[t._v("String")]),t._v(" 类型在 "),n("code",[t._v("prop")]),t._v(" 类型定义中的位置。接着是一个 "),n("code",[t._v("if")]),t._v(" 条件语句，我们看一下判断条件：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("stringIndex "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" booleanIndex "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" stringIndex\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("如果 "),n("code",[t._v("stringIndex < 0")]),t._v(" 则说明没有为该 "),n("code",[t._v("prop")]),t._v(" 指定 "),n("code",[t._v("String")]),t._v(" 类型，否则说明为 "),n("code",[t._v("prop")]),t._v(" 指定了 "),n("code",[t._v("String")]),t._v(" 类型，但由于之前的判断能够确定的是已经为 "),n("code",[t._v("prop")]),t._v(" 指定了 "),n("code",[t._v("Boolean")]),t._v(" 类型，那么说明此时至少为该 "),n("code",[t._v("prop")]),t._v(" 指定了两种类型："),n("code",[t._v("String")]),t._v(" 和 "),n("code",[t._v("Boolean")]),t._v("。这时会将 "),n("code",[t._v("booleanIndex")]),t._v(" 与 "),n("code",[t._v("stringIndex")]),t._v(" 作比较，比较的目的是检测 "),n("code",[t._v("String")]),t._v(" 和 "),n("code",[t._v("Boolean")]),t._v(" 这两个类型谁定义在前面，所以如上条件成立所代表的意思是：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[t._v("1、没有定义 "),n("code",[t._v("String")]),t._v(" 类型")]),n("li",[t._v("2、虽然定义了 "),n("code",[t._v("String")]),t._v(" 类型，但是 "),n("code",[t._v("String")]),t._v(" 类型的优先级没有 "),n("code",[t._v("Boolean")]),t._v(" 高")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这时会将该 "),s("code",[this._v("prop")]),this._v(" 的值设置为 "),s("code",[this._v("true")]),this._v("，而非字符串。举个例子：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'someComp'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  props"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    prop1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      type"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" Boolean"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("上面的代码中我们定义了组件 "),n("code",[t._v("<some-comp/>")]),t._v("，并且定义了一个名字叫做 "),n("code",[t._v("prop1")]),t._v(" 的 "),n("code",[t._v("prop")]),t._v("，我们为该 "),n("code",[t._v("prop")]),t._v(" 制定了两个类型构造函数 "),n("code",[t._v("String")]),t._v(" 和 "),n("code",[t._v("Boolean")]),t._v("，而且 "),n("code",[t._v("String")]),t._v(" 的优先级要高于 "),n("code",[t._v("Boolean")]),t._v("，所以此时你如果像如下这样使用该组件：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("\x3c!-- 值为空字符串 --\x3e")]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("some-comp")]),t._v(" "),n("span",{attrs:{class:"token attr-name"}},[t._v("prop1")]),n("span",{attrs:{class:"token attr-value"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("\x3c!-- 名字由驼峰转连字符后与值为相同字符串 --\x3e")]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("some-comp")]),t._v(" "),n("span",{attrs:{class:"token attr-name"}},[t._v("someProp")]),n("span",{attrs:{class:"token attr-value"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("some-prop"),n("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么该组件接收到的 "),s("code",[this._v("prop")]),this._v(" 就会作为普通字符串处理，即 "),s("code",[this._v("prop1")]),this._v(" 的值就是空字符串或字符串 "),s("code",[this._v("'some-prop'")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果我们调换一下 "),s("code",[this._v("prop1")]),this._v(" 的类型构造函数的顺序，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'someComp'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  props"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    prop1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[t._v("      type"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("Boolean"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" String"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")])]),t._v("    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们先定义了 "),s("code",[this._v("Boolean")]),this._v(" 类型，如果此时你依然像如下这样使用组件：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("\x3c!-- 值为空字符串 --\x3e")]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("some-comp")]),t._v(" "),n("span",{attrs:{class:"token attr-name"}},[t._v("prop1")]),n("span",{attrs:{class:"token attr-value"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("\x3c!-- 名字由驼峰转连字符后与值为相同字符串 --\x3e")]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("some-comp")]),t._v(" "),n("span",{attrs:{class:"token attr-name"}},[t._v("someProp")]),n("span",{attrs:{class:"token attr-value"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("some-prop"),n("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么 "),s("code",[this._v("prop1")]),this._v(" 的值将会是布尔类型 "),s("code",[this._v("true")]),this._v("。最后补充一点，实际上如下两种使用 "),s("code",[this._v("props")]),this._v(" 的方式是等价的：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-html"}},[n("code",[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("some-comp")]),t._v(" "),n("span",{attrs:{class:"token attr-name"}},[t._v("prop1")]),n("span",{attrs:{class:"token attr-value"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("=")]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')]),n("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("\x3c!-- 等价于 --\x3e")]),t._v("\n"),n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token tag"}},[n("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("some-comp")]),t._v(" "),n("span",{attrs:{class:"token attr-name"}},[t._v("prop1")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("/>")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后我们再来回顾一下 "),s("code",[this._v("validateProp")]),this._v(" 函数中的这段代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" booleanIndex "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("getTypeIndex")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Boolean"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prop"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("booleanIndex "),n("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("-")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("absent "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),n("span",{attrs:{class:"token function"}},[t._v("hasOwn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prop"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'default'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    value "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("''")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" value "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("hyphenate")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// only cast empty string / same name to boolean if")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// boolean has higher priority")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" stringIndex "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("getTypeIndex")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("String"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prop"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stringIndex "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" booleanIndex "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" stringIndex"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      value "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在我们知道了这段代码的作用实际上对 "),s("code",[this._v("prop")]),this._v(" 的类型为布尔值时的特殊处理。接下来我们继续查看 "),s("code",[this._v("validateProp")]),this._v(" 函数的后续代码，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// check default value")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" undefined"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  value "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("getPropDefaultValue")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prop"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// since the default value is a fresh copy,")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// make sure to observe it.")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prevShouldObserve "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" shouldObserve\n  "),n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("observe")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevShouldObserve"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这段代码用来检测该 "),n("code",[t._v("prop")]),t._v(" 的值是否是 "),n("code",[t._v("undefined")]),t._v("，我们知道 "),n("code",[t._v("prop")]),t._v(" 是可以指定默认值的，当外界没有为组件传递该 "),n("code",[t._v("prop")]),t._v(" 时，则取默认值作为该 "),n("code",[t._v("prop")]),t._v(" 的数据。根据如上代码可知获取默认值的操作由 "),n("code",[t._v("getPropDefaultValue")]),t._v(" 函数来完成，并将获取到的默认值重新赋值给 "),n("code",[t._v("value")]),t._v(" 变量，获取完默认值之后我们可以看到如下这段代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" prevShouldObserve "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" shouldObserve\n"),n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("observe")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prevShouldObserve"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("有这段代码首先使用 "),n("code",[t._v("prevShouldObserve")]),t._v(" 常量保存了之前的 "),n("code",[t._v("shouldObserve")]),t._v(" 状态，紧接着将开关开启，是的 "),n("code",[t._v("observe")]),t._v(" 函数能够将 "),n("code",[t._v("value")]),t._v(" 定义为响应式数据，最后又还原了 "),n("code",[t._v("shouldObserve")]),t._v(" 的状态。之所以这么做是因为取到的默认值是非响应式的，我们需要将其重新定义为响应式数据。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("接着我们再回头看一下 "),n("code",[t._v("getPropDefaultValue")]),t._v(" 函数是如何获取默认值的，"),n("code",[t._v("getPropDefaultValue")]),t._v(" 函数定义在 "),n("code",[t._v("validateProp")]),t._v(" 函数的下方，如下是 "),n("code",[t._v("getPropDefaultValue")]),t._v(" 函数的签名：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("getPropDefaultValue")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Component"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" prop"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" PropOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("getPropDefaultValue")]),t._v(" 函数接收三个参数，分别是组件实例对象 "),n("code",[t._v("vm")]),t._v("、"),n("code",[t._v("prop")]),t._v(" 的定义对象，以及 "),n("code",[t._v("prop")]),t._v(" 的名字 "),n("code",[t._v("key")]),t._v("。在 "),n("code",[t._v("getPropDefaultValue")]),t._v(" 函数体内，首先是这样一段代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),n("span",{attrs:{class:"token function"}},[t._v("hasOwn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prop"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'default'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" undefined\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" def "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" prop"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token keyword"}},[t._v("default")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("我们知道在定义 "),n("code",[t._v("prop")]),t._v(" 时可以在对象中使用 "),n("code",[t._v("default")]),t._v(" 属性指定默认值，所以如上代码用来检测开发者在定义 "),n("code",[t._v("prop")]),t._v(" 时是否指定了默认值，如果没有指定默认值则直接返回 "),n("code",[t._v("undefined")]),t._v("。另外如果开发者指定了默认值则定义 "),n("code",[t._v("def")]),t._v(" 常量，用来保存默认值。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("isObject")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("def"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),n("span",{attrs:{class:"token string"}},[t._v("'Invalid default value for prop \"'")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" key "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'\": '")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),n("span",{attrs:{class:"token string"}},[t._v("'Props with type Object/Array must use a factory function '")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),n("span",{attrs:{class:"token string"}},[t._v("'to return the default value.'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    vm\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在非生产环境下，如果你的 "),s("code",[this._v("prop")]),this._v(" 默认值是对象类型，那么则会打印警告信息，告诉你需要用一个工厂函数返回这个对象类型的默认值，比如：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  prop1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("default")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      a"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  prop2"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("default")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("如上代码定义了两个 "),n("code",[t._v("prop")]),t._v("，其中 "),n("code",[t._v("prop1")]),t._v(" 的默认值是一个对象，"),n("code",[t._v("prop2")]),t._v(" 的默认值是一个数组，这两个 "),n("code",[t._v("prop")]),t._v(" 都是不合法的，你需要用工程函数将默认值返回，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  prop1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        a"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n      "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  prop2"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token number"}},[t._v("1")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("2")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("3")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("propsData "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n  vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("propsData"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" undefined "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n  vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_props"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" undefined\n"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_props"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们现在还没有讲解创建子组件与根组件的区别，或许大家看到这段代码会有些疑惑。比如上面的 "),s("code",[this._v("if")]),this._v(" 条件语句中有这样一个条件：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("propsData"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" undefined\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("大家别忘了我们目前讲解的代码是 "),n("code",[t._v("getPropDefaultValue")]),t._v(" 函数中的代码，代码既然已经执行到了 "),n("code",[t._v("getPropDefaultValue")]),t._v(" 函数那么说明外界没有向组件传递该 "),n("code",[t._v("prop")]),t._v(" 数据，那也就是说 "),n("code",[t._v("vm.$options.propsData[key]")]),t._v(" 很显然的应该是 "),n("code",[t._v("undefined")]),t._v("。为什么还需要如上判断呢？实际上事情并非像我们想象的那样。这是因为"),n("strong",[t._v("组件第一次创建与后续的更新走的是两套不太一致的逻辑")]),t._v("。为了证明这一点，我们需要打开 "),n("code",[t._v("src/core/instance/lifecycle.js")]),t._v(" 文件找到 "),n("code",[t._v("updateChildComponent")]),t._v(" 函数，大家现在只需要知道组件的更新是由 "),n("code",[t._v("updateChildComponent")]),t._v(" 函数来完成的即可，在 "),n("code",[t._v("updateChildComponent")]),t._v(" 函数内有这样一段代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("propsData "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("false")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" props "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_props\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" propKeys "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_propKeys "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" propKeys"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{attrs:{class:"token operator"}},[t._v("++")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" propKeys"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" propOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props "),n("span",{attrs:{class:"token comment"}},[t._v("// wtf flow?")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[t._v("    props"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("validateProp")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" propOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" propsData"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// keep a copy of raw propsData")]),t._v("\n  vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("propsData "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" propsData\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("注意如上高亮的那句代码，这句代码同样调用 "),s("code",[this._v("validateProp")]),this._v(" 函数，所以 "),s("code",[this._v("getPropDefaultValue")]),this._v(" 函数的如下代码完全是为组件更新时准备的：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("propsData "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n  vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("propsData"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" undefined "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n  vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_props"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" undefined\n"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_props"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当执行 "),s("code",[this._v("updateChildComponent")]),this._v(" 函数更新组件时，在调用 "),s("code",[this._v("validateProp")]),this._v(" 函数之前 "),s("code",[this._v("vm.$options.propsData")]),this._v(" 还没有被更新，注意如下高亮代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// updateChildComponent 函数")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("propsData "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("false")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" props "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_props\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" propKeys "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_propKeys "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" propKeys"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{attrs:{class:"token operator"}},[t._v("++")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" propKeys"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" propOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props "),n("span",{attrs:{class:"token comment"}},[t._v("// wtf flow?")]),t._v("\n    props"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("validateProp")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" propOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" propsData"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// keep a copy of raw propsData")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[t._v("  vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("propsData "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" propsData")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以看到 "),s("code",[this._v("vm.$options.propsData")]),this._v(" 的更新是在调用 "),s("code",[this._v("validateProp")]),this._v(" 之后进行的，所以当组件更新时如下代码中的 "),s("code",[this._v("vm.$options.propsData")]),this._v(" 是上一次组件更新或创建时的数据：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("propsData "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n  vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("propsData"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" undefined "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n  vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_props"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" undefined\n"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_props"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("明白了这些我们再来重新审视一下这些判断条件，其中条件 "),n("code",[t._v("vm.$options.propsData[key] === undefined")]),t._v(" 说明上一次组件更新或创建时外界就没有向组件传递该 "),n("code",[t._v("prop")]),t._v(" 数据，条件 "),n("code",[t._v("vm._props[key] !== undefined")]),t._v(" 说明该 "),n("code",[t._v("prop")]),t._v(" 存在非未定义的默认值，又由于上面这段代码存在于 "),n("code",[t._v("getPropDefaultValue")]),t._v(" 函数中，所以如上 "),n("code",[t._v("if")]),t._v(" 条件成立则说明：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[t._v("1、当前组件处于更新状态，且没有传递该 "),n("code",[t._v("prop")]),t._v(" 数据给组件")]),n("li",[t._v("2、上一次更新或创建时外界也没有向组件传递该 "),n("code",[t._v("prop")]),t._v(" 数据")]),n("li",[t._v("3、上一次组件更新或创建时该 "),n("code",[t._v("prop")]),t._v(" 拥有一个不为 "),n("code",[t._v("undefined")]),t._v(" 的默认值")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么此时应该返回之前的 "),s("code",[this._v("prop")]),this._v(" 值(即默认值)作为本次渲染该 "),s("code",[this._v("prop")]),this._v(" 的默认值。这样就能避免触发没有意义的响应。为什么能避免触发无意义的响应呢？很简单，假设每次都重新获取默认值而不是返回之前的默认值，那么如下 "),s("code",[this._v("prop")]),this._v(" 的默认值将总是会变化的：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  prop1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" a"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("1")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("由于 "),s("code",[this._v("prop1")]),this._v(" 的默认值是由工厂函数返回的对象，这个对象每次都是不同的，即使看上去数据是一样的，但他们具有不同的引用，这样每次都会触发响应，但视图并没有任何变化，也就是说触发了没有意义的响应。而解决办法就是前面所介绍的，返回上一次的默认值就可以了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后我们再来看 "),s("code",[this._v("getPropDefaultValue")]),this._v(" 函数中的最后一段代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" def "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("getType")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prop"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'Function'")]),t._v("\n  "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" def"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("call")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" def\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("我们知道 "),n("code",[t._v("def")]),t._v(" 常量为该 "),n("code",[t._v("prop")]),t._v(" 的 "),n("code",[t._v("default")]),t._v(" 属性的值，它代表了默认值，但是由于默认值可能是由工厂函数执行产生的，所以如果 "),n("code",[t._v("def")]),t._v(" 的类型是函数值通过执行 "),n("code",[t._v("def.call(vm)")]),t._v(" 来获取默认值，否则直接使用 "),n("code",[t._v("def")]),t._v(" 作为默认值。当然了我们还需要一个判断条件，即：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token function"}},[t._v("getType")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prop"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'Function'")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这说明我们指定了该 "),n("code",[t._v("prop")]),t._v(" 的默认值类型为函数类型，所以此时我们就不应该通过执行 "),n("code",[t._v("def")]),t._v(" 函数来获取默认值了，应该直接将 "),n("code",[t._v("def")]),t._v(" 函数本身作为默认值看待，因为该 "),n("code",[t._v("prop")]),t._v(" 所期望的值就是一个函数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再往下是 "),s("code",[this._v("validateProp")]),this._v(" 函数的最后一段代码，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  process"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// skip validation for weex recycle-list child component props")]),t._v("\n  "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("__WEEX__ "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("isObject")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'@binding'")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("assertProp")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prop"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" absent"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("经过前面的讲解，我们知道 "),n("code",[t._v("validateProp")]),t._v(" 一开始并没有对 "),n("code",[t._v("props")]),t._v(" 的类型做校验，首先如果一个 "),n("code",[t._v("prop")]),t._v(" 的类型是布尔类型，则为其设置合理的布尔值，其次又调用了 "),n("code",[t._v("getPropDefaultValue")]),t._v(" 函数获取 "),n("code",[t._v("prop")]),t._v(" 的默认值，而如上这段代码才是真正用来对 "),n("code",[t._v("props")]),t._v(" 的类型做校验的。通过如上 "),n("code",[t._v("if")]),t._v(" 语句的条件可知，仅在非生产环境下才会对 "),n("code",[t._v("props")]),t._v(" 做类型校验，另外还有一个条件是用来跳过 "),n("code",[t._v("weex")]),t._v(" 环境下某种条件的判断的，我们不做讲解。总之真正的校验工作是由 "),n("code",[t._v("assertProp")]),t._v(" 函数完成的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("assertProp")]),this._v(" 函数定义在 "),s("code",[this._v("getPropDefaultValue")]),this._v(" 函数的下方，如下是其函数签名：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("assertProp")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  prop"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" PropOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  name"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  value"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Component"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  absent"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boolean\n"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("assertProp")]),t._v(" 函数接收五个参数，第一个参数 "),n("code",[t._v("prop")]),t._v(" 为该prop的定义对象，第二个参数 "),n("code",[t._v("name")]),t._v(" 是该 "),n("code",[t._v("prop")]),t._v(" 的名字，第三个参数 "),n("code",[t._v("value")]),t._v(" 是该 "),n("code",[t._v("prop")]),t._v(" 的值，第四个参数 "),n("code",[t._v("vm")]),t._v(" 为组件实例对象，第五个参数 "),n("code",[t._v("absent")]),t._v(" 为一个布尔值代表外界是否向组件传递了该 "),n("code",[t._v("prop")]),t._v(" 数据。我们来看 "),n("code",[t._v("assertProp")]),t._v(" 函数的第一段代码，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("prop"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("required "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" absent"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),n("span",{attrs:{class:"token string"}},[t._v("'Missing required prop: \"'")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" name "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'\"'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    vm\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这段代码用来检测开发者是否传递了那些必须传递的 "),n("code",[t._v("prop")]),t._v(" 数据，我们知道开发者可以在定义 "),n("code",[t._v("prop")]),t._v(" 时指定 "),n("code",[t._v("required")]),t._v(" 选项为 "),n("code",[t._v("true")]),t._v("，代表该 "),n("code",[t._v("prop")]),t._v(" 为必传的。所以如上 "),n("code",[t._v("if")]),t._v(" 语句的条件成立则说明该 "),n("code",[t._v("prop")]),t._v(" 为必传 "),n("code",[t._v("prop")]),t._v("，但是外界却没有向组件传递该 "),n("code",[t._v("prop")]),t._v(" 的值。此时需要打印警告信息提示开发者缺少必传的 "),n("code",[t._v("prop")]),t._v("。注意在打印完警告信息之后函数立即返回，不会执行后续操作。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value "),n("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("prop"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("required"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("可以看到如果这段代码中 "),n("code",[t._v("if")]),t._v(" 语句条件成立，则函数立即返回，同样不会做后续的校验。如果该 "),n("code",[t._v("if")]),t._v(" 语句条件成立，则说明 "),n("code",[t._v("value")]),t._v(" 值为 "),n("code",[t._v("null")]),t._v(" 或 "),n("code",[t._v("undefined")]),t._v("，并且该 "),n("code",[t._v("prop")]),t._v(" 是非必须的，在这种情况下就不需要做后续的校验了。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" type "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" prop"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("type\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" valid "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("type "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" type "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" expectedTypes "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("Array"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("isArray")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    type "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("type"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" type"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("valid"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{attrs:{class:"token operator"}},[t._v("++")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" assertedType "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("assertType")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    expectedTypes"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("push")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("assertedType"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expectedType "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("''")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    valid "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" assertedType"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("valid\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这段代码的作用是用来做类型断言的，即判断外界传递的 "),n("code",[t._v("prop")]),t._v(" 值的类型与期望的类型是否相符。首先定义了 "),n("code",[t._v("type")]),t._v(" 变量它的值为 "),n("code",[t._v("prop.type")]),t._v(" 的值。接着定义了 "),n("code",[t._v("valid")]),t._v(" 变量，该变量为一个布尔值，代表着类型校验成功与否，我们可以看到其初始值为：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" valid "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("type "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" type "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("其中 "),n("code",[t._v("!type")]),t._v(" 说明如果开发者在定义 "),n("code",[t._v("prop")]),t._v(" 时没有规定该 "),n("code",[t._v("prop")]),t._v(" 值的类型，则不需要校验，所以自然就认为无论外界传递了什么数据都是有效的，或者干脆在定义 "),n("code",[t._v("prop")]),t._v(" 时直接将类型设置为 "),n("code",[t._v("true")]),t._v("，也代表不需要做 "),n("code",[t._v("prop")]),t._v(" 校验。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("再往下定义了 "),n("code",[t._v("expectedTypes")]),t._v(" 常量，它的初始值为空数组，该常量用来保存类型的字符串表示，当校验失败时会通过打印该数组中收集的类型来提示开发者应该传递哪些类型的数据。接着进入一个 "),n("code",[t._v("if")]),t._v(" 语句块，其判断条件为 "),n("code",[t._v("if (type)")]),t._v("，只有当 "),n("code",[t._v("type")]),t._v(" 存在时才需要做类型校验，在该 "),n("code",[t._v("if")]),t._v(" 语句块内首先是这样一段代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("Array"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("isArray")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("type"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("检测 "),n("code",[t._v("type")]),t._v(" 是否是一个数组，如果不是数组则将其包装成一个数组。然后开启一个 "),n("code",[t._v("for")]),t._v(" 循环，该 "),n("code",[t._v("for")]),t._v(" 循环用来遍历 "),n("code",[t._v("type")]),t._v(" 数组，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" type"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("valid"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{attrs:{class:"token operator"}},[t._v("++")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" assertedType "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("assertType")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  expectedTypes"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("push")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("assertedType"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expectedType "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("''")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  valid "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" assertedType"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("valid\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("在循环内部，首先调用 "),n("code",[t._v("assertType")]),t._v(" 函数分别将该 "),n("code",[t._v("prop")]),t._v(" 的值 "),n("code",[t._v("value")]),t._v(" 以及类型作为参数传递，所以真正的类型断言是由 "),n("code",[t._v("assertType")]),t._v(" 函数来完成的，"),n("code",[t._v("assertType")]),t._v(" 函数的具体实现我们后面再讲，现在大家只需要知道 "),n("code",[t._v("assertType")]),t._v(" 函数的返回值是一个如下结构的对象即可：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  expectedType"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'String'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  valid"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("该对象拥有两个属性，分别是 "),n("code",[t._v("expectedType")]),t._v(" 和 "),n("code",[t._v("valid")]),t._v("。其中 "),n("code",[t._v("expectedType")]),t._v(" 属性就是类型的字符串表示，而 "),n("code",[t._v("valid")]),t._v(" 属性是一个布尔值，它的真假代表了该 "),n("code",[t._v("prop")]),t._v(" 值是否通过了校验。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" type"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("valid"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{attrs:{class:"token operator"}},[t._v("++")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" assertedType "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("assertType")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  expectedTypes"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("push")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("assertedType"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expectedType "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("''")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  valid "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" assertedType"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("valid\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("可以看到，定义了 "),n("code",[t._v("assertedType")]),t._v(" 常量，该常量就是 "),n("code",[t._v("assertType")]),t._v(" 函数的返回值。接着将 "),n("code",[t._v("assertedType.expectedType")]),t._v(" 添加到 "),n("code",[t._v("expectedTypes")]),t._v(" 数组中，然后使用 "),n("code",[t._v("assertedType.valid")]),t._v(" 的值重写 "),n("code",[t._v("valid")]),t._v(" 变量。我们可以注意到 "),n("code",[t._v("for")]),t._v(" 循环的终止条件为：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("i "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" type"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("valid\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("所以一旦某个类型校验通过，那么 "),n("code",[t._v("valid")]),t._v(" 的值将变为真，此时 "),n("code",[t._v("for")]),t._v(" 循环内的语句将不再执行，这是因为该 "),n("code",[t._v("prop")]),t._v(" 值的类型只要满足期望类型中的一个即可。假设 "),n("code",[t._v("for")]),t._v(" 循环遍历结束之后 "),n("code",[t._v("valid")]),t._v(" 变量依然为假，则说明该 "),n("code",[t._v("prop")]),t._v(" 值的类型不在期望的类型之中。此时在 "),n("code",[t._v("for")]),t._v(" 循环之后的代码将发挥作用，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("valid"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v('`Invalid prop: type check failed for prop "')]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v('".`')])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("` Expected ")]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("expectedTypes"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("map")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("capitalize"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("join")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("', '")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v("`")])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`, got ")]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),n("span",{attrs:{class:"token function"}},[t._v("toRawType")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v(".`")])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    vm\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("如果代码运行到了这里，且 "),n("code",[t._v("valid")]),t._v(" 的值为假，那么则打印警告信息提示开发者所传递的 "),n("code",[t._v("prop")]),t._v(" 值的类型不符合预期。通过上面代码我们可以看到，在提示信息中通过打印 "),n("code",[t._v("expectedTypes")]),t._v(" 数组中的类型字符串来提示开发者该 "),n("code",[t._v("prop")]),t._v(" 所期望的类型。同时通过 "),n("code",[t._v("toRawType")]),t._v(" 函数获取真正的 "),n("code",[t._v("prop")]),t._v(" 值的类型，用来提示开发者所传递的值的类型是什么。最后函数直接返回不做后续操作。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再往下将是 "),s("code",[this._v("assertProp")]),this._v(" 函数的最后一段代码，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" validator "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" prop"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("validator\n"),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("validator"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),n("span",{attrs:{class:"token function"}},[t._v("validator")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),n("span",{attrs:{class:"token string"}},[t._v("'Invalid prop: custom validator check failed for prop \"'")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" name "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'\".'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      vm\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("如果代码运行到了这里，说明前面的校验全部通过。但是我们知道在定义 "),n("code",[t._v("prop")]),t._v(" 时可以通过 "),n("code",[t._v("validator")]),t._v(" 属性指定一个校验函数实现自定义校验，该函数的返回值作为校验的结果。实际上在 "),n("code",[t._v("Vue")]),t._v(" 内部实现非常简单，如上代码所示，定义了 "),n("code",[t._v("validator")]),t._v(" 常量，它的值就是开发者定义的 "),n("code",[t._v("prop.validator")]),t._v(" 函数，接着只需要调用该函数并判断其返回值的真假即可，如果返回值为假说明自定义校验失败，则直接打印警告信息提示开发者该 "),n("code",[t._v("prop")]),t._v(" 自定义校验失败即可。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("最后我们再来看一下 "),n("code",[t._v("assertType")]),t._v(" 函数的实现，前面我们已经知道了 "),n("code",[t._v("assertType")]),t._v(" 函数的作用，它接收两个参数，分别为 "),n("code",[t._v("prop")]),t._v(" 的值和 "),n("code",[t._v("prop")]),t._v(" 的类型，然后将值与类型之间做比较，检查是否符合预期并返回一个对象形式的检查结果供其他函数使用。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("assertType")]),this._v(" 函数定义在 "),s("code",[this._v("assertProp")]),this._v(" 函数的下方，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" simpleCheckRE "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token regex"}},[t._v("/^(String|Number|Boolean|Function|Symbol)$/")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("assertType")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Function"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  valid"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boolean"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  expectedType"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("可以看到在定义 "),n("code",[t._v("assertType")]),t._v(" 函数之前定义了常量 "),n("code",[t._v("simpleCheckRE")]),t._v("，用来匹配字符串："),n("code",[t._v("'String'")]),t._v("、"),n("code",[t._v("'Number'")]),t._v("、"),n("code",[t._v("'Boolean'")]),t._v("、"),n("code",[t._v("'Function'")]),t._v(" 以及 "),n("code",[t._v("'Symbol'")]),t._v("，这个正则将会在 "),n("code",[t._v("assertType")]),t._v(" 函数中用到。在 "),n("code",[t._v("assertType")]),t._v(" 函数内部首先定义了 "),n("code",[t._v("valid")]),t._v(" 变量以及 "),n("code",[t._v("expectedType")]),t._v(" 常量，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("assertType")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" type"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Function"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  valid"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" boolean"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  expectedType"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[t._v("  "),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" valid")]),n("span",{attrs:{class:"highlighted-line"}},[t._v("  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" expectedType "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("getType")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[t._v("    valid"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")])]),n("span",{attrs:{class:"highlighted-line"}},[t._v("    expectedType")]),t._v("  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("可以发现变量 "),n("code",[t._v("valid")]),t._v(" 以及常量 "),n("code",[t._v("expectedType")]),t._v(" 将会被作为返回值对象的属性。其中 "),n("code",[t._v("expectedType")]),t._v(" 常量的值为通过 "),n("code",[t._v("getType")]),t._v(" 函数获取到的类型字符串表示。接着将进入一连串的 "),n("code",[t._v("if...elseif...else")]),t._v(" 语句块，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("simpleCheckRE"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("test")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expectedType"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" t "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" value\n  valid "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" t "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" expectedType"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("toLowerCase")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// for primitive wrapper objects")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("valid "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" t "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'object'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    valid "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" value "),n("span",{attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("type")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expectedType "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'Object'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  valid "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("isPlainObject")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expectedType "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'Array'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  valid "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("isArray")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  valid "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" value "),n("span",{attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("type")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们一个一个来看，首先看 "),s("code",[this._v("if")]),this._v(" 判断语句的条件：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("simpleCheckRE"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("test")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expectedType"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("使用 "),n("code",[t._v("simpleCheckRE")]),t._v(" 去匹配字符串 "),n("code",[t._v("expectedType")]),t._v("，如果匹配成功则说明期望的类型为一下五种类型之一："),n("code",[t._v("'String'")]),t._v("、"),n("code",[t._v("'Number'")]),t._v("、"),n("code",[t._v("'Boolean'")]),t._v("、"),n("code",[t._v("'Function'")]),t._v(" 以及 "),n("code",[t._v("'Symbol'")]),t._v("，这五种类型有什么特点呢？它们的特点是都可以通过 "),n("code",[t._v("typeof")]),t._v(" 操作符进行区分判断。在 "),n("code",[t._v("if")]),t._v(" 语句块内执行的是如下代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" t "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" value\nvalid "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" t "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" expectedType"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("toLowerCase")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// for primitive wrapper objects")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("valid "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" t "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'object'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  valid "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" value "),n("span",{attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("type")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("首先定义了常量 "),n("code",[t._v("t")]),t._v("，它的值就是通过 "),n("code",[t._v("typeof")]),t._v(" 操作符获取到 "),n("code",[t._v("value")]),t._v(" 的类型字符串，然后使用 "),n("code",[t._v("t")]),t._v(" 与 "),n("code",[t._v("expectedType")]),t._v(" 的小写作比较，如果全等则说明该 "),n("code",[t._v("prop")]),t._v(" 的值与期望类型相同，此时 "),n("code",[t._v("valid")]),t._v(" 将会为真。接着是一个 "),n("code",[t._v("if")]),t._v(" 判断语句，可以看到这个判断语句的条件为：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("valid "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" t "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'object'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("也就是说通过前面对比，发现该 "),s("code",[this._v("prop")]),this._v(" 值的类型与期望的类型不符。大家注意如果上面的 "),s("code",[this._v("if")]),this._v(" 语句条件为真，则我们能够确定以下几点：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[t._v("1、期望的类型是这五种类型之一："),n("code",[t._v("'String'")]),t._v("、"),n("code",[t._v("'Number'")]),t._v("、"),n("code",[t._v("'Boolean'")]),t._v("、"),n("code",[t._v("'Function'")]),t._v(" 以及 "),n("code",[t._v("'Symbol'")])]),n("li",[t._v("2、并且通过 "),n("code",[t._v("typeof")]),t._v(" 操作符取到的该 "),n("code",[t._v("prop")]),t._v(" 值的类型为 "),n("code",[t._v("object")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这时我们能够否定 "),s("code",[this._v("prop")]),this._v(" 的值不符合预期吗？答案是不能的，因为在 "),s("code",[this._v("javascript")]),this._v(" 有个概念叫做"),s("strong",[this._v("基本包装类型")]),this._v("，比如可以这样定义一个字符串：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" str "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("String")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'基本包装类型'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("此时通过 "),n("code",[t._v("typeof")]),t._v(" 获取 "),n("code",[t._v("str")]),t._v(" 的类型将得到 "),n("code",[t._v("'object'")]),t._v(" 字符串。但 "),n("code",[t._v("str")]),t._v(" 的的确确是一个字符串，所以在这种情况下我们还需要做进一步的检查，即：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("valid "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" t "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'object'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[t._v("  valid "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" value "),n("span",{attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("type")])]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("如上高亮代码所示使用 "),n("code",[t._v("instanceof")]),t._v(" 操作符判断 "),n("code",[t._v("value")]),t._v(" 是否是 "),n("code",[t._v("type")]),t._v(" 的实例，如果是则依然认为该 "),n("code",[t._v("prop")]),t._v(" 值是有效的。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("simpleCheckRE"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("test")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expectedType"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expectedType "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'Object'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  valid "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("isPlainObject")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expectedType "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'Array'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  valid "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Array"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("isArray")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  valid "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" value "),n("span",{attrs:{class:"token keyword"}},[t._v("instanceof")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("type")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("可以看到如果 "),n("code",[t._v("expectedType")]),t._v(" 全等于字符串 "),n("code",[t._v("'Object'")]),t._v("，则使用 "),n("code",[t._v("isPlainObject")]),t._v(" 函数检查该 "),n("code",[t._v("prop")]),t._v(" 值的有效性，如果 "),n("code",[t._v("expectedType")]),t._v(" 全等于字符串 "),n("code",[t._v("'Array'")]),t._v("，则使用 "),n("code",[t._v("Array.isArray")]),t._v(" 函数判断该 "),n("code",[t._v("prop")]),t._v(" 值的有效性，如果 "),n("code",[t._v("expectedType")]),t._v(" 没有匹配前面的任何 "),n("code",[t._v("if...elseif")]),t._v(" 语句，那么 "),n("code",[t._v("else")]),t._v(" 语句块的代码将被执行，此时说明开发者在定义 "),n("code",[t._v("prop")]),t._v(" 时所指定的期望类型为自定义类型，如：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// 自定义类型构造函数")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("Dog")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\nprops"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  prop1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[t._v("    type"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Dog")]),t._v("  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上就是我们对 "),s("code",[this._v("props")]),this._v(" 选项的解析。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"methods-选项的初始化及实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#methods-选项的初始化及实现","aria-hidden":"true"}},[this._v("#")]),this._v(" methods 选项的初始化及实现")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("讲完了 "),n("code",[t._v("props")]),t._v(" 选项的初始化及实现，接下来我们看一下 "),n("code",[t._v("methods")]),t._v(" 选项的初始化及实现。"),n("code",[t._v("methods")]),t._v(" 选项实现要简单的多，打开 "),n("code",[t._v("src/core/instance/state.js")]),t._v(" 文件找到 "),n("code",[t._v("initMethods")]),t._v(" 函数，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("initMethods")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Component"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" methods"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" props "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" methods"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'production'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("methods"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n          "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v('`Method "')]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("key"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v('" has an undefined value in the component definition. `')])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n          "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`Did you reference the function correctly?`")])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          vm\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("hasOwn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n          "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v('`Method "')]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("key"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v('" has already been defined as a prop.`')])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n          vm\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("isReserved")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n          "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v('`Method "')]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("key"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v('" conflicts with an existing Vue instance method. `')])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n          "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`Avoid defining component methods that start with _ or $.`")])]),t._v("\n        "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    vm"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" methods"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" noop "),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("bind")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("methods"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("initMethods")]),t._v(" 函数同样接收两个参数，第一个参数 "),n("code",[t._v("vm")]),t._v(" 为组件实例对象，第二个参数为 "),n("code",[t._v("methods")]),t._v(" 选项。观察如上代码我们发现，有很大一部分代码是在非生产环境下执行的，假如我们忽略这部分代码，那么 "),n("code",[t._v("initMethods")]),t._v(" 函数将更加简短，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("initMethods")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Component"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" methods"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" props "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" methods"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'production'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    vm"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" methods"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" noop "),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("bind")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("methods"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这样一来可以很清晰的看到 "),n("code",[t._v("methods")]),t._v(" 选项是如何实现的，就是通过 "),n("code",[t._v("for...in")]),t._v(" 循环遍历 "),n("code",[t._v("methods")]),t._v(" 选项对象，其中 "),n("code",[t._v("key")]),t._v(" 就是每个方法的名字。最关键的是循环的最后一句代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" methods"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" noop "),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("bind")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("methods"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("通过这句代码可知，之所以能够通过组件实例对象访问 "),s("code",[this._v("methods")]),this._v(" 选项中定义的方法，就是因为在组件实例对象上定义了与 "),s("code",[this._v("methods")]),this._v(" 选项中所定义的同名方法，当然了在定义到组件实例对象之前要检测该方法是否真正的有定义："),s("code",[this._v("methods[key] == null")]),this._v("，如果没有则添加一个空函数到组件实例对象上。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("虽然 "),s("code",[this._v("methods")]),this._v(" 选项实现很简单，但非生产环境下还是要做一些检测的工作，接下来我们就看一下都需要检测哪些内容，首先是如下这段代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'production'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("methods"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v('`Method "')]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("key"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v('" has an undefined value in the component definition. `')])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n      "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`Did you reference the function correctly?`")])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      vm\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("hasOwn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("props"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v('`Method "')]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("key"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v('" has already been defined as a prop.`')])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    vm\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("其中 "),s("code",[this._v("props")]),this._v(" 常量定义在 "),s("code",[this._v("initMethods")]),this._v(" 函数开头：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" props "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("所以 "),n("code",[t._v("props")]),t._v(" 常量就是 "),n("code",[t._v("vm.$options.props")]),t._v(" 的引用，我们知道 "),n("code",[t._v("props")]),t._v(" 选项的初始化要先于 "),n("code",[t._v("methods")]),t._v(" 选项，并且每个 "),n("code",[t._v("prop")]),t._v(" 都需要挂载到组件实例对象下，如此一来 "),n("code",[t._v("methods")]),t._v(" 选项中的方法名字很有可能与 "),n("code",[t._v("props")]),t._v(" 选项中的属性名字相同，这样会导致覆盖的问题，为此需要检测 "),n("code",[t._v("methods")]),t._v(" 选项中定义的方法名字是否在 "),n("code",[t._v("props")]),t._v(" 选项中有定义，如果有的话则需要打印警告信息提示开发者：方法名已经被用于 "),n("code",[t._v("prop")]),t._v("，你换一个名字吧。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("isReserved")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v('`Method "')]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("key"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v('" conflicts with an existing Vue instance method. `')])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`Avoid defining component methods that start with _ or $.`")])]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("methods"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  $"),n("span",{attrs:{class:"token keyword"}},[t._v("set")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("alert")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'这个方法将覆盖 Vue 原生 $set 方法'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("如上代码中我们定义了 "),n("code",[t._v("$set")]),t._v(" 方法，但是 "),n("code",[t._v("Vue")]),t._v(" 已经内置了叫做 "),n("code",[t._v("$set")]),t._v(" 的方法，如果允许这样做那么 "),n("code",[t._v("Vue")]),t._v(" 内置的方法将被覆盖，所以需要打印警告信息提示开发者，让其更换一个方法名字。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"provide-选项的初始化及实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#provide-选项的初始化及实现","aria-hidden":"true"}},[this._v("#")]),this._v(" provide 选项的初始化及实现")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再往下我们将研究最后两个选项的初始化工作，即 "),s("code",[this._v("provide")]),this._v(" 选项以及 "),s("code",[this._v("inject")]),this._v(" 选项。在这之前我们来回顾一下这两个选项的作用，实际上 "),s("code",[this._v("Vue")]),this._v(" 的官方文档已经明确告诉我们这两个选项主要用来辅助测试的，在正真的业务代码中是不推荐使用的，一般情况下我们也不需要使用这两个选项。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果一个组件使用了 "),s("code",[this._v("provide")]),this._v(" 选项，那么该选项指定的数据将会被注入到该组件的所有后代组件中，在后代组件中可以使用 "),s("code",[this._v("inject")]),this._v(" 选项选择性注入，这样后代组件就拿到了祖先组件提供的数据，这么做的好处是方便了为高阶组件提供数据并测试。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("切入正题，如下是 "),s("code",[this._v("Vue.prototype._init")]),this._v(" 方法中的一段用来完成初始化工作的代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token function"}},[t._v("initLifecycle")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("initEvents")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("initRender")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("callHook")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'beforeCreate'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[n("span",{attrs:{class:"token function"}},[t._v("initInjections")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// resolve injections before data/props")])]),n("span",{attrs:{class:"token function"}},[t._v("initState")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[n("span",{attrs:{class:"token function"}},[t._v("initProvide")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token comment"}},[t._v("// resolve provide after data/props")])]),n("span",{attrs:{class:"token function"}},[t._v("callHook")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'created'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("可以发现 "),n("code",[t._v("initInjections")]),t._v(" 函数在 "),n("code",[t._v("initProvide")]),t._v(" 函数之前被调用，这说明对于任何一个组件来讲，总是要优先初始化 "),n("code",[t._v("inject")]),t._v(" 选项，再初始化 "),n("code",[t._v("provide")]),t._v(" 选项，这么做是有原因的，我们后面会提到。但是我们知道 "),n("code",[t._v("inject")]),t._v(" 选项的数据需要从父代组件中的 "),n("code",[t._v("provide")]),t._v(" 获取，所以我们优先来了解 "),n("code",[t._v("provide")]),t._v(" 选项的实现，然后再查看 "),n("code",[t._v("inject")]),t._v(" 选项的实现。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("打开 "),s("code",[this._v("src/core/instance/inject.js")]),this._v(" 文件，找到 "),s("code",[this._v("initProvide")]),this._v(" 函数，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("initProvide")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Component"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" provide "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("provide\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("provide"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_provided "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" provide "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v("\n      "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" provide"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("call")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" provide\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("如上是 "),n("code",[t._v("initProvide")]),t._v(" 函数的全部代码，它接收组件实例对象作为参数。在 "),n("code",[t._v("initProvide")]),t._v(" 函数内部首先定义了 "),n("code",[t._v("provide")]),t._v(" 常量，它的值是 "),n("code",[t._v("vm.$options.provide")]),t._v(" 选项的引用，接着是一个 "),n("code",[t._v("if")]),t._v(" 条件语句，只有在 "),n("code",[t._v("provide")]),t._v(" 选项存在的情况下才会执行 "),n("code",[t._v("if")]),t._v(" 语句块内的代码，我们知道 "),n("code",[t._v("provide")]),t._v(" 选项可以是对象，也可以是一个返回对象的函数。所以在 "),n("code",[t._v("if")]),t._v(" 语句块内使用 "),n("code",[t._v("typeof")]),t._v(" 操作符检测 "),n("code",[t._v("provide")]),t._v(" 常量的类型，如果是函数则执行该函数说获取数据，否则直接将 "),n("code",[t._v("provide")]),t._v(" 本身作为数据。最后将数据复制给组件实例对象的 "),n("code",[t._v("vm._provided")]),t._v(" 属性，后面我们可以看到当组件初始化 "),n("code",[t._v("inject")]),t._v(" 选项时，其注入的数据就是从父代组件实例的 "),n("code",[t._v("vm._provided")]),t._v(" 属性中获取的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上就是 "),s("code",[this._v("provide")]),this._v(" 选项的初始化及实现，它本质上就是在组件实例对象上添加了 "),s("code",[this._v("vm._provided")]),this._v(" 属性，并保存了用于子代组件的数据。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"inject-选项的初始化及实现"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#inject-选项的初始化及实现","aria-hidden":"true"}},[this._v("#")]),this._v(" inject 选项的初始化及实现")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("看完了 "),n("code",[t._v("provide")]),t._v(" 选项的初始化及实现，接下来我们研究一下 "),n("code",[t._v("inject")]),t._v(" 选项的初始化及实现。找到 "),n("code",[t._v("initInjections")]),t._v(" 函数，它也定义在 "),n("code",[t._v("src/core/instance/inject.js")]),t._v(" 文件，如下是 "),n("code",[t._v("initInjections")]),t._v(" 函数的整体结构：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("initInjections")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Component"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("resolveInject")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inject"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("initInjections")]),t._v(" 函数接收组件实例对象作为参数，在 "),n("code",[t._v("initInjections")]),t._v(" 函数内部首先定义了 "),n("code",[t._v("result")]),t._v(" 常量，并且我们能够注意到接下来的 "),n("code",[t._v("if")]),t._v(" 条件语句的判断条件就是 "),n("code",[t._v("result")]),t._v(" 常量，只有 "),n("code",[t._v("result")]),t._v(" 为真的情况下才会执行 "),n("code",[t._v("if")]),t._v(" 语句块内的代码。我们首先来看一下 "),n("code",[t._v("result")]),t._v(" 常量的值是什么，可以看到它是 "),n("code",[t._v("resolveInject")]),t._v(" 函数的返回值。通过上一节的讲解我们知道了子组件中通过 "),n("code",[t._v("inject")]),t._v(" 选项注入的数据其实是存放在其父代组件实例的 "),n("code",[t._v("vm._provided")]),t._v(" 属性中，实际上 "),n("code",[t._v("resolveInject")]),t._v(" 函数的作用就是根据当前组件的 "),n("code",[t._v("inject")]),t._v(" 选项去父代组件中寻找注入的数据，并将最终的数据返回。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("找到 "),s("code",[this._v("resolveInject")]),this._v(" 函数，它定义在 "),s("code",[this._v("initInjections")]),this._v(" 函数的下方，如下是其函数签名：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("resolveInject")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inject"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Component"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Object "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("resolveInject")]),t._v(" 函数接收两个参数，分别是 "),n("code",[t._v("inject")]),t._v(" 选项以及组件实例对象。我们可以看到在 "),n("code",[t._v("initInjections")]),t._v(" 函数中调用 "),n("code",[t._v("resolveInject")]),t._v(" 函数时所传递的参数分别是 "),n("code",[t._v("vm.$options.inject")]),t._v(" 以及 "),n("code",[t._v("vm")]),t._v("：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("initInjections")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Component"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[t._v("  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("resolveInject")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inject"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),t._v("  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来我们就具体查看一下 "),s("code",[this._v("resolveInject")]),this._v(" 函数，看它是如何向父代组件查找数据的。在 "),s("code",[this._v("resolveInject")]),this._v(" 函数体内所有代码都被包含在了一个 "),s("code",[this._v("if")]),this._v(" 语句块中：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("resolveInject")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inject"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Component"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Object "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[t._v("  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inject"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),t._v("    "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),n("span",{attrs:{class:"highlighted-line"}},[t._v("    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" result")]),t._v("  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("并且我们能够看到 "),n("code",[t._v("if")]),t._v(" 语句块内的最后一句代码将 "),n("code",[t._v("result")]),t._v(" 返回，该 "),n("code",[t._v("result")]),t._v(" 就是最终寻找到的注入的数据。如果 "),n("code",[t._v("inject")]),t._v(" 选项不存在则返回 "),n("code",[t._v("undefined")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("code",[this._v("if")]),this._v(" 语句块内首先是这样一段代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("create")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" keys "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" hasSymbol\n  "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" Reflect"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("ownKeys")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inject"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("filter")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/* istanbul ignore next */")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Object"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("getOwnPropertyDescriptor")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inject"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("enumerable\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("keys")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inject"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("inject"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v("'data1'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'data2'")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么被规范化后 "),s("code",[this._v("vm.$options.inject")]),this._v(" 选项将变为：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token string"}},[t._v("'data1'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'data1'")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{attrs:{class:"token string"}},[t._v("'data2'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'data2'")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果你的 "),s("code",[this._v("inject")]),this._v(" 选项是一个对象，那么这个对象你可以有好几种写法：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("inject"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 第一种写法")]),t._v("\n  data1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'d1'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 第二种写法")]),t._v("\n  data2"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    someProperty"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'someValue'")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("inject"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token string"}},[t._v("'data1'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'d1'")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{attrs:{class:"token string"}},[t._v("'data2'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'data2'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" someProperty"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'someValue'")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("可以看到被规范化后的每个 "),n("code",[t._v("inject")]),t._v(" 选项值也都是一个对象，并且都包含 "),n("code",[t._v("from")]),t._v(" 属性。同时我们注意到 "),n("code",[t._v("someProperty")]),t._v(" 属性被保留了，所以你完全可以把 "),n("code",[t._v("someProperty")]),t._v(" 属性替换成 "),n("code",[t._v("default")]),t._v(" 属性：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("inject"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  data1"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("default")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'defaultValue'")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这就是 "),s("code",[this._v("Vue")]),this._v(" 文档中提到的可以使用 "),s("code",[this._v("default")]),this._v(" 属性为注入的值指定默认值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("明白了这些我们再回到 "),s("code",[this._v("resolveInject")]),this._v(" 函数，还是如下这段代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("create")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" keys "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" hasSymbol\n  "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" Reflect"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("ownKeys")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inject"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("filter")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("/* istanbul ignore next */")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Object"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("getOwnPropertyDescriptor")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inject"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("enumerable\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("keys")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("inject"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("回过头来继续看 "),s("code",[this._v("resolveInject")]),this._v(" 函数的代码，接下来的代码使用 "),s("code",[this._v("for")]),this._v(" 循环，用来遍历刚刚获取到的 "),s("code",[this._v("keys")]),this._v(" 数组：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token number"}},[t._v("0")]),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),n("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" keys"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),n("span",{attrs:{class:"token operator"}},[t._v("++")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" keys"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" provideKey "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" inject"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" source "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" vm\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("其中 "),n("code",[t._v("key")]),t._v(" 常量就是 "),n("code",[t._v("keys")]),t._v(" 数组中的每一个值，即 "),n("code",[t._v("inject")]),t._v(" 选项的每一个键值，"),n("code",[t._v("provideKey")]),t._v(" 常量保存的是每一个 "),n("code",[t._v("inject")]),t._v(" 选项内所定义的注入对象的 "),n("code",[t._v("from")]),t._v(" 属性的值，我们知道 "),n("code",[t._v("from")]),t._v(" 属性的值代表着 "),n("code",[t._v("vm._provided")]),t._v(" 数据中的每个数据的键名，所以 "),n("code",[t._v("provideKey")]),t._v(" 常量将用来查找所注入的数据。最后定义了 "),n("code",[t._v("source")]),t._v(" 变量，它的初始值是当前组件实例对象。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来将开启一个 "),s("code",[this._v("while")]),this._v(" 循环，用来查找注入数据的工作，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_provided "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("hasOwn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_provided"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" provideKey"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    result"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" source"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_provided"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("provideKey"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  source "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" source"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$parent\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们知道 "),s("code",[this._v("source")]),this._v(" 是当前组件实例对象，在循环内部有一个 "),s("code",[this._v("if")]),this._v(" 条件语句，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_provided "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("hasOwn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("source"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("_provided"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" provideKey"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("该条件检测了 "),n("code",[t._v("source._provided")]),t._v(" 属性是否存在，并且 "),n("code",[t._v("source._provided")]),t._v(" 对象自身是否拥有 "),n("code",[t._v("provideKey")]),t._v(" 键，如果有则说明找到了注入的数据："),n("code",[t._v("source._provided[provideKey]")]),t._v("，并将它赋值给 "),n("code",[t._v("result")]),t._v(" 对象的同名属性。有的同学会问：“"),n("code",[t._v("source")]),t._v(" 变量的初始值为当前组件实例对象，那么如果在当前对象下找到了通过 "),n("code",[t._v("provide")]),t._v(" 选项提供的值，那岂不是自身给自身注入数据？”。大家不要忘了 "),n("code",[t._v("inject")]),t._v(" 选项的初始化是在 "),n("code",[t._v("provide")]),t._v(" 选项初始化之前的，也就是说即使该组件通过 "),n("code",[t._v("provide")]),t._v(" 选项提供的数据中的确存在 "),n("code",[t._v("inject")]),t._v(" 选项注入的数据，也不会有任何影响，因为在 "),n("code",[t._v("inject")]),t._v(" 选项查找数据时 "),n("code",[t._v("provide")]),t._v(" 提供的数据还没有被初始化，所以当一个组件使用 "),n("code",[t._v("provide")]),t._v(" 提供数据时，该数据只有子代组件可用。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么如果 "),s("code",[this._v("if")]),this._v(" 判断条件为假怎么办？没关系，注意 "),s("code",[this._v("while")]),this._v(" 循环的最后一句代码：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("source "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" source"),s("span",{attrs:{class:"token punctuation"}},[this._v(".")]),this._v("$parent\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("重新赋值 "),s("code",[this._v("source")]),this._v(" 变量，使其引用父组件，以及类推就完成了向父代组件查找数据的需求，直到找到数据为止。但是如果一直找到了根组件，但依然没有找到数据怎么办？我们看接下来的代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("source"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'default'")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" inject"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" provideDefault "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" inject"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token keyword"}},[t._v("default")]),t._v("\n    result"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" provideDefault "),n("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v("\n      "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" provideDefault"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("call")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" provideDefault\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'production'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v('`Injection "')]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("key"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v('" not found`')])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("我们知道根组件实例对象的 "),n("code",[t._v("vm.$parent")]),t._v(" 属性为 "),n("code",[t._v("null")]),t._v("，所以如上 "),n("code",[t._v("if")]),t._v(" 条件语句的判断条件如果成立，说明一直寻找到根组件也没有找到要的数据，此时需要查看 "),n("code",[t._v("inject[key]")]),t._v(" 对象中是否定义了 "),n("code",[t._v("default")]),t._v(" 选项，如果定义了 "),n("code",[t._v("default")]),t._v(" 选项则使用 "),n("code",[t._v("default")]),t._v(" 选项提供的数据作为注入的数据，否则在非生产环境下会提示开发者"),n("strong",[t._v("未找到注入的数据")]),t._v("。另外我们可以看到 "),n("code",[t._v("default")]),t._v(" 选项可以是一个函数，此时会通过执行该函数来获取注入的数据。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("最后如果查询到了数据，"),n("code",[t._v("resolveInject")]),t._v(" 函数会将 "),n("code",[t._v("result")]),t._v(" 作为返回值返回，并且 "),n("code",[t._v("result")]),t._v(" 对象的键就是注入数据的名字，"),n("code",[t._v("result")]),t._v(" 对象每个键的值就是注入的数据。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("下面我们回到 "),s("code",[this._v("initInjections")]),this._v(" 函数，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("initInjections")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Component"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" result "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("resolveInject")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inject"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("此时我们已经通过 "),n("code",[t._v("resolveInject")]),t._v(" 函数取得了注入的数据，并赋值给 "),n("code",[t._v("result")]),t._v(" 常量，我们知道 "),n("code",[t._v("result")]),t._v(" 常量的值有可能是不存在的，所以需要一个 "),n("code",[t._v("if")]),t._v(" 条件语句对 "),n("code",[t._v("result")]),t._v(" 进行判断，当条件为真时说明成功取得注入的数据，此时会执行 "),n("code",[t._v("if")]),t._v(" 语句块内的代码。在 "),n("code",[t._v("if")]),t._v(" 语句块内所做的事情其实很简单：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("false")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nObject"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("keys")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("result"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("forEach")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("/* istanbul ignore else */")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'production'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`Avoid mutating an injected value directly since the changes will be `")])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`overwritten whenever the provided component re-renders. `")])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v('`injection being mutated: "')]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("key"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v('"`')])]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        vm\n      "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("defineReactive")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" result"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token function"}},[t._v("toggleObserving")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("就是通过遍历 "),n("code",[t._v("result")]),t._v(" 常量并调用 "),n("code",[t._v("defineReactive")]),t._v(" 函数在当前组件实例对象 "),n("code",[t._v("vm")]),t._v(" 上定义与注入名称相同的变量，并赋予取得的值。这里有一个对环境的判断，在非生产环境下调用 "),n("code",[t._v("defineReactive")]),t._v(" 函数时会多传递一个参数，即 "),n("code",[t._v("customSetter")]),t._v("，当你尝试设置注入的数据时会提示你不要这么做。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("另外大家也注意到了在使用 "),n("code",[t._v("defineReactive")]),t._v(" 函数为组件实例对象定义属性之前，调用了 "),n("code",[t._v("toggleObserving(false)")]),t._v(" 函数关闭了响应式定义的开关，之后又将开关开启："),n("code",[t._v("toggleObserving(true)")]),t._v("。前面我们已经讲到了类似的情况，这么做将会导致使用 "),n("code",[t._v("defineReactive")]),t._v(" 定义属性时不会将该属性的值转换为响应式的，所以 "),n("code",[t._v("Vue")]),t._v(" 文档中提到了：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("提示：provide 和 inject 绑定并不是可响应的。这是刻意为之的。然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当然啦，如果父代组件提供的数据本身就是响应式的，即使 "),s("code",[this._v("defineReactive")]),this._v(" 不转，那么最终这个数据也还是响应式的。")])}],!1,null,null,null);s.default=e.exports}}]);