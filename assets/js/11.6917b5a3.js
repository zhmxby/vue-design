(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{72:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),a("p",[t._v("在 "),a("router-link",{attrs:{to:"./80vue-compiler-start.html"}},[t._v("Vue的编译器初探")]),t._v(" 这一章节中，我们对 "),a("code",[t._v("Vue")]),t._v(" 如何创建编译器，以及在这个过程中经历过的几个重要的函数做了分析，比如 "),a("code",[t._v("compileToFunctions")]),t._v(" 函数以及 "),a("code",[t._v("compile")]),t._v(" 函数，并且我们知道真正对模板进行编译工作的实际是 "),a("code",[t._v("baseCompile")]),t._v(" 函数，而接下来我们任务就是搞清楚 "),a("code",[t._v("baseCompile")]),t._v(" 函数的内容。")],1),t._m(1),t._m(2),a("p",[t._v("可以看到 "),a("code",[t._v("baseCompile")]),t._v(" 函数接收两个参数，分别是字符串模板("),a("code",[t._v("template")]),t._v(")和选项参数("),a("code",[t._v("options")]),t._v(")，其中选项参数 "),a("code",[t._v("options")]),t._v(" 我们已经分析过了，并且我们有对应的附录专门整理编译器的选项参数，可以在 "),a("router-link",{attrs:{to:"../appendix/compiler-options.html"}},[t._v("编译器选项整理")]),t._v(" 中查看。")],1),t._m(3),t._m(4),t._m(5),t._m(6),t._m(7),a("p",[t._v("而接下来我们将会花费很大的篇幅来聚焦在一句代码上，即下面这句代码：")]),t._m(8),t._m(9),t._m(10),t._m(11),t._m(12),t._m(13),t._m(14),t._m(15),t._m(16),t._m(17),t._m(18),t._m(19),t._m(20),t._m(21),t._m(22),t._m(23),t._m(24),t._m(25),t._m(26),t._m(27),t._m(28),a("p",[t._v("下面我们依次来看一下这些正则：")]),t._m(29),t._m(30),t._m(31),t._m(32),t._m(33),t._m(34),t._m(35),a("p",[t._v("正因如此，需要三个正则分组并配合可选属性来分别匹配四种情况，我们可以对这个正则做一个测试，如下：")]),t._m(36),a("p",[t._v("对于双引号的情况，我们将得到以下结果：")]),t._m(37),t._m(38),t._m(39),t._m(40),t._m(41),a("p",[t._v("接下来一句代码如下：")]),t._m(42),a("p",[t._v("首先给大家解释几个概念并说明一些问题：")]),t._m(43),t._m(44),t._m(45),t._m(46),t._m(47),t._m(48),t._m(49),t._m(50),t._m(51),t._m(52),t._m(53),t._m(54),t._m(55),t._m(56),t._m(57),t._m(58),t._m(59),t._m(60),t._m(61),t._m(62),t._m(63),t._m(64),t._m(65),t._m(66),t._m(67),t._m(68),t._m(69),t._m(70),t._m(71),t._m(72),t._m(73),t._m(74),t._m(75),t._m(76),a("p",[t._v("这个正则用来匹配条件注释节点，没有捕获组。")]),t._m(77),a("p",[t._v("在这些正则常量的下面，有着这样一段代码：")]),t._m(78),t._m(79),t._m(80),a("p",[t._v("在这些正则的下面，定义了一些常量，如下：")]),t._m(81),t._m(82),t._m(83),t._m(84),a("p",[t._v("再往下定义了 "),a("code",[t._v("decodingMap")]),t._v(" 常量，它也是一个 "),a("code",[t._v("JOSN")]),t._v(" 对象字面量，其中 "),a("code",[t._v("key")]),t._v(" 是一些特殊的 "),a("code",[t._v("html")]),t._v(" 实体，值则是这些实体对应的字符。在 "),a("code",[t._v("decodingMap")]),t._v(" 常量下面的是两个正则常量："),a("code",[t._v("encodedAttr")]),t._v(" 和 "),a("code",[t._v("encodedAttrWithNewLines")]),t._v("。可以发现正则 "),a("code",[t._v("encodedAttrWithNewLines")]),t._v(" 会比 "),a("code",[t._v("encodedAttr")]),t._v(" 多匹配两个 "),a("code",[t._v("html")]),t._v(" 实体字符，分别是 "),a("code",[t._v("&#10;")]),t._v(" 和 "),a("code",[t._v("&#9;")]),t._v("。对于 "),a("code",[t._v("decodingMap")]),t._v(" 以及下面两个正则的作用不知道大家能不能猜得到，其实我们讲解编译器的创建时有讲到 "),a("code",[t._v("shouldDecodeNewlines")]),t._v(" 和 "),a("code",[t._v("shouldDecodeNewlinesForHref")]),t._v(" 这两个编译器选项，当时我们就有针对这两个选项的作用做讲解，可以在附录 "),a("router-link",{attrs:{to:"../appendix/web-util.html"}},[t._v("platforms/web/util 目录下的工具方法全解")]),t._v(" 中查看。")],1),t._m(85),a("p",[t._v("再往下是这样一段代码：")]),t._m(86),t._m(87),t._m(88),a("p",[t._v("等价于：")]),t._m(89),t._m(90),t._m(91),t._m(92),t._m(93),t._m(94),t._m(95),t._m(96),t._m(97),t._m(98),t._m(99),t._m(100),t._m(101),t._m(102),t._m(103),t._m(104),t._m(105),t._m(106),t._m(107),t._m(108),a("p",{staticClass:"tip"},[t._v("上面提到的一些常量的值，初始化的时候其实是使用 parser 选项进行初始化的，这里的 parser 选项其实大部分与编译器选项相同，在前面的章节中我们是有讲过的。")]),t._m(109),t._m(110),t._m(111),t._m(112),t._m(113),t._m(114),t._m(115),t._m(116),t._m(117),t._m(118),t._m(119),t._m(120),t._m(121),t._m(122),t._m(123),t._m(124),t._m(125),t._m(126),t._m(127),t._m(128),t._m(129),t._m(130),t._m(131),t._m(132),a("p",[t._v("针对以上六种情况我们逐个来看，首先判断是否是注释节点：")]),t._m(133),t._m(134),t._m(135),t._m(136),t._m(137),t._m(138),t._m(139),a("p",[t._v("回过头来我们再次查看以上代码，我们看看这里是如何获取注释内容的：")]),t._m(140),t._m(141),t._m(142),t._m(143),t._m(144),t._m(145),t._m(146),t._m(147),t._m(148),a("p",[t._v("那么对于注释节点，其执行的代码为：")]),t._m(149),t._m(150),t._m(151),t._m(152),t._m(153),t._m(154),a("p",[t._v("如果没有命中注释节点，则什么都不会做，继续判断是否命中条件注释节点：")]),t._m(155),t._m(156),t._m(157),t._m(158),t._m(159),t._m(160),t._m(161),t._m(162),t._m(163),t._m(164),t._m(165),t._m(166),a("p",[t._v("解析开始标签的代码如下：")]),t._m(167),t._m(168),t._m(169),t._m(170),t._m(171),t._m(172),t._m(173),t._m(174),t._m(175),t._m(176),t._m(177),t._m(178),t._m(179),t._m(180),a("p",[t._v("代码继续执行，来到了这里：")]),t._m(181),t._m(182),t._m(183),t._m(184),t._m(185),t._m(186),t._m(187),t._m(188),t._m(189),t._m(190),t._m(191),t._m(192),t._m(193),t._m(194),t._m(195),t._m(196),t._m(197),t._m(198),t._m(199),t._m(200),t._m(201),t._m(202),t._m(203),t._m(204),t._m(205),t._m(206),t._m(207),t._m(208),t._m(209),t._m(210),t._m(211),t._m(212),t._m(213),t._m(214),t._m(215),t._m(216),t._m(217),t._m(218),t._m(219),t._m(220),a("p",[t._v("再往下，定义了三个常量：")]),t._m(221),a("p",[t._v("其中常量 "),a("code",[t._v("unary")]),t._v(" 是一个布尔值，当它为真时代表着标签是一元标签，否则是二元标签。对于一元标签判断的方法是首先调用 "),a("code",[t._v("isUnaryTag")]),t._v(" 函数，并将标签名("),a("code",[t._v("tagName")]),t._v(")作为参数传递，其中 "),a("code",[t._v("isUnaryTag")]),t._v(" 函数前面提到过它是 "),a("code",[t._v("parser")]),t._v(" 选项，实际上它是编译器选项透传过来的，我们在 "),a("router-link",{attrs:{to:"./80vue-compiler-start.html"}},[t._v("Vue的编译器初探")]),t._v(" 一节中对 "),a("code",[t._v("isUnaryTag")]),t._v(" 函数有过讲解，简单的说 "),a("code",[t._v("isUnaryTag")]),t._v(" 函数能够判断标准 "),a("code",[t._v("HTML")]),t._v(" 中规定的那些一元标签，但是仅仅使用这一个判断条件是不够的，因为在 "),a("code",[t._v("Vue")]),t._v(" 中我们免不了会写组件，而组件又是以自定义标签的形式存在的，比如：")],1),t._m(222),t._m(223),t._m(224),t._m(225),t._m(226),t._m(227),t._m(228),t._m(229),a("p",[t._v("我们在分析开始标签的解析结果时知道，解析结果是一个数组，如下：")]),t._m(230),t._m(231),t._m(232),t._m(233),t._m(234),a("p",[t._v("实际上 "),a("code",[t._v("decodeAttr")]),t._v(" 函数的作用是对属性值中所包含的 "),a("code",[t._v("html")]),t._v(" 实体进行解码，将其转换为实体对应的字符。更多关于 "),a("code",[t._v("shouldDecodeNewlinesForHref")]),t._v(" 与 "),a("code",[t._v("shouldDecodeNewlines")]),t._v(" 的内容我们曾经提到过，大家可以在附录 "),a("router-link",{attrs:{to:"../appendix/web-util.html"}},[t._v("platforms/web/util 目录下的工具方法全解")]),t._v(" 中找到详细讲解。")],1),t._m(235),t._m(236),t._m(237),t._m(238),t._m(239),t._m(240),t._m(241),t._m(242),t._m(243),t._m(244),t._m(245),t._m(246),t._m(247),t._m(248),t._m(249),t._m(250),t._m(251),t._m(252),t._m(253),t._m(254),t._m(255),t._m(256),t._m(257),t._m(258),t._m(259),t._m(260),t._m(261),t._m(262),t._m(263),t._m(264),t._m(265),t._m(266),t._m(267),t._m(268),t._m(269),t._m(270),t._m(271),t._m(272),t._m(273),t._m(274),t._m(275),t._m(276),t._m(277),t._m(278),t._m(279),t._m(280),t._m(281),t._m(282),t._m(283),t._m(284),t._m(285),t._m(286),t._m(287),a("p",[t._v("再往下是这段代码：")]),t._m(288),t._m(289),t._m(290),t._m(291),t._m(292),t._m(293),t._m(294),t._m(295),t._m(296),t._m(297),t._m(298),t._m(299),t._m(300),t._m(301),t._m(302),t._m(303),t._m(304),t._m(305),t._m(306),t._m(307),t._m(308),t._m(309),t._m(310),t._m(311),t._m(312),t._m(313),t._m(314),t._m(315),t._m(316),t._m(317),t._m(318),t._m(319),t._m(320),a("p",[t._v("当循环终止后，代码会继续执行，来到最后两句：")]),t._m(321),t._m(322),a("p",[t._v("另外我们可以发现如下高亮部分代码：")]),t._m(323),t._m(324),t._m(325),t._m(326),t._m(327),a("p",[t._v("另外大家可能注意到了如下这段代码：")]),t._m(328),t._m(329),t._m(330),t._m(331),t._m(332),t._m(333),t._m(334),t._m(335),t._m(336),t._m(337),t._m(338),t._m(339),t._m(340),t._m(341),t._m(342),t._m(343),t._m(344),t._m(345),t._m(346),t._m(347),t._m(348),a("p",[t._v("接着代码来到这里：")]),t._m(349),t._m(350),t._m(351),t._m(352),t._m(353),t._m(354),a("p",[t._v("这段代码的作用很明显，将纯文本标签的内容全部作为纯文本对待。")]),t._m(355),t._m(356),t._m(357),a("p",[t._v("可以发现对于纯文本标签的处理宗旨就是将其内容作为纯文本对待。")]),t._m(358),t._m(359),t._m(360),t._m(361),t._m(362),t._m(363),t._m(364),t._m(365),t._m(366),a("p",[t._v("它是一个数组，包含所有属于该标签的属性：")]),t._m(367),t._m(368),t._m(369),t._m(370),t._m(371),t._m(372),t._m(373),t._m(374),t._m(375),t._m(376),t._m(377),t._m(378),t._m(379),t._m(380),t._m(381),t._m(382),t._m(383),t._m(384),t._m(385),t._m(386),t._m(387),t._m(388),t._m(389),t._m(390)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"词法分析-为生成ast做准备"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#词法分析-为生成ast做准备","aria-hidden":"true"}},[this._v("#")]),this._v(" 词法分析 - 为生成AST做准备")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("baseCompile")]),this._v(" 函数是在 "),s("code",[this._v("src/compiler/index.js")]),this._v(" 中作为 "),s("code",[this._v("createCompilerCreator")]),this._v(" 函数的参数使用的，代码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// `createCompilerCreator` allows creating compilers that use alternative")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// parser/optimizer/codegen, e.g the SSR optimizing compiler.")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// Here we just export a default compiler using the default parts.")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" createCompiler "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("createCompilerCreator")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("baseCompile")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  template"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  options"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompiledResult "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ast "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parse")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("optimize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" code "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("generate")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ast"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    render"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" code"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("render"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    staticRenderFns"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" code"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticRenderFns\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("baseCompile")]),this._v(" 函数很简短，由三句代码和一个 "),s("code",[this._v("return")]),this._v(" 语句组成，这三句代码的作用如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 调用 parse 函数将字符串模板解析成抽象语法树(AST)")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ast "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parse")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 调用 optimize 函数优化 ast")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("optimize")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 调用 generate 函数将 ast 编译成渲染函数")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" code "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("generate")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最终 "),s("code",[this._v("baseCompile")]),this._v(" 的返回值如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  ast"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  render"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" code"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("render"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  staticRenderFns"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" code"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticRenderFns\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以看到，其最终返回了抽象语法树("),a("code",[t._v("ast")]),t._v(")，渲染函数("),a("code",[t._v("render")]),t._v(")，静态渲染函数("),a("code",[t._v("staticRenderFns")]),t._v(")，且 "),a("code",[t._v("render")]),t._v(" 的值为 "),a("code",[t._v("code.render")]),t._v("，"),a("code",[t._v("staticRenderFns")]),t._v(" 的值为 "),a("code",[t._v("code.staticRenderFns")]),t._v("，也就是说通过 "),a("code",[t._v("generate")]),t._v(" 处理 "),a("code",[t._v("ast")]),t._v(" 之后得到的返回值 "),a("code",[t._v("code")]),t._v(" 是一个对象，该对象的属性中包含了渲染函数（"),a("strong",[t._v("注意以上提到的渲染函数，都以字符串的形式存在，因为真正变成函数的过程是在 "),a("code",[t._v("compileToFunctions")]),t._v(" 中使用 "),a("code",[t._v("new Function()")]),t._v(" 来完成的")]),t._v("）。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ast "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parse")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("也就是 "),s("code",[this._v("Vue")]),this._v(" 的 "),s("code",[this._v("parser")]),this._v("，它是如何将字符串模板解析为抽象语法树("),s("code",[this._v("AST")]),this._v(")的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"对-parser-的简单介绍"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对-parser-的简单介绍","aria-hidden":"true"}},[this._v("#")]),this._v(" 对 parser 的简单介绍")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在说 "),s("code",[this._v("parser")]),this._v(" 之前，我们先了解一下编译器的概念，简单的讲编译器就是将 "),s("code",[this._v("源代码")]),this._v(" 转换成 "),s("code",[this._v("目标代码")]),this._v(" 的工具。详细一点如下(引用自维基百科)：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("blockquote",[s("p",[this._v("它主要的目的是将便于人编写、阅读、维护的高级计算机语言所写作的 "),s("code",[this._v("源代码")]),this._v(" 程序，翻译为计算机能解读、运行的低阶机器语言的程序。"),s("code",[this._v("源代码")]),this._v(" 一般为高阶语言（High-level language），如Pascal、C、C++、C# 、Java等，而目标语言则是汇编语言或目标机器的目标代码（Object code）。")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("编译器所包含的概念很多，比如 词法分析("),a("code",[t._v("lexical analysis")]),t._v(")，句法分析("),a("code",[t._v("parsing")]),t._v(")，类型检查/推导，代码优化，代码生成...等等，且大学中已有专门的课程，而我们这里要讲的 "),a("code",[t._v("parser")]),t._v(" 就是编译器中的一部分，准确的说，"),a("code",[t._v("parser")]),t._v(" 是编译器对源代码处理的第一步。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("parser")]),t._v(" 是把某种特定格式的文本转换成某种数据结构的程序，其中“特定格式的文本”可以理解为普通的字符串，而 "),a("code",[t._v("parser")]),t._v(" 的作用就是将这个字符串转换成一种数据结构(通常是一个对象)，并且这个数据结构是编译器能够理解的，因为编译器的后续步骤，比如上面提到的 句法分析，类型检查/推导，代码优化，代码生成 等等都依赖于该数据结构，正因如此我们才说 "),a("code",[t._v("parser")]),t._v(" 是编译器处理源代码的第一步，并且这种数据结构是抽象的，我们常称其为抽象语法树，即 "),a("code",[t._v("AST")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("Vue")]),t._v(" 的编译器也不例外，大致也分为三个阶段，即：词法分析 -> 句法分析 -> 代码生成。在词法分析阶段 "),a("code",[t._v("Vue")]),t._v(" 会把字符串模板解析成一个个的令牌("),a("code",[t._v("token")]),t._v(")，该令牌将用于句法分析阶段，在句法分析阶段会根据令牌生成一棵 "),a("code",[t._v("AST")]),t._v("，最后再根据该 "),a("code",[t._v("AST")]),t._v(" 生成最终的渲染函数，这样就完成了代码的生成。按照顺序我们需要先了解的是词法分析阶段，看一看 "),a("code",[t._v("Vue")]),t._v(" 是如何对字符串模板进行拆解的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"vue-中的-html-parser"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-中的-html-parser","aria-hidden":"true"}},[this._v("#")]),this._v(" Vue 中的 html-parser")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("本节中大量出现 "),a("code",[t._v("parse")]),t._v(" 以及 "),a("code",[t._v("parser")]),t._v(" 这两个单词，不要混淆这两个单词，"),a("code",[t._v("parse")]),t._v(" 是动词，代表“解析”的过程，"),a("code",[t._v("parser")]),t._v(" 是名词，代表“解析器”。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("回到 "),s("code",[this._v("baseCompile")]),this._v(" 函数中的这句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ast "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parse")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("trim")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("由这句代码可知 "),a("code",[t._v("parse")]),t._v(" 函数就是用来解析模板字符串的，最终生成 "),a("code",[t._v("AST")]),t._v("，根据文件头部的引用关系可知 "),a("code",[t._v("parse")]),t._v(" 函数 "),a("code",[t._v("src/compiler/parser/index.js")]),t._v(" 文件，打开该文件可以发现其的确导出了一个名字为 "),a("code",[t._v("parse")]),t._v(" 的函数，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parse")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  template"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  options"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n\n  "),a("span",{attrs:{class:"token function"}},[t._v("parseHTML")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    warn"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    expectHTML"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expectHTML"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    isUnaryTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isUnaryTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    canBeLeftOpenTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("canBeLeftOpenTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    shouldDecodeNewlines"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shouldDecodeNewlines"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    shouldDecodeNewlinesForHref"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shouldDecodeNewlinesForHref"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    shouldKeepComment"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("comments"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("start")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("end")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("chars")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("comment")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" root\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("同时我们注意到在 "),a("code",[t._v("parse")]),t._v(" 函数内部主要通过调用 "),a("code",[t._v("parseHTML")]),t._v(" 函数对模板字符串进行解析，实际上 "),a("code",[t._v("parseHTML")]),t._v(" 函数的作用就是用来做词法分析的，而 "),a("code",[t._v("parse")]),t._v(" 函数的作用则是在词法分析的基础上做句法分析从而生成一棵 "),a("code",[t._v("AST")]),t._v("。本节我们主要分析一下 "),a("code",[t._v("Vue")]),t._v(" 是如何对模板字符串进行词法分析的，也就是 "),a("code",[t._v("parseHTML")]),t._v(" 函数的实现。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("根据文件头部的引用关系可知 "),s("code",[this._v("parseHTML")]),this._v(" 函数来自 "),s("code",[this._v("src/compiler/parser/html-parser.js")]),this._v(" 文件，实际上整个 "),s("code",[this._v("html-parser.js")]),this._v(" 文件所做的事情都是在做词法分析，接下来我们就研究一下它是如何实现的。打开该文件，其开头是一段注释：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token comment"}},[this._v("/**\n * Not type-checking this file because it's mostly vendor code.\n */")]),this._v("\n\n"),s("span",{attrs:{class:"token comment"}},[this._v('/*!\n * HTML Parser By John Resig (ejohn.org)\n * Modified by Juriy "kangax" Zaytsev\n * Original code by Erik Arvidsson, Mozilla Public License\n * http://erik.eae.net/simplehtmlparser/simplehtmlparser.js\n */')]),this._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("通过这段注释我们可以了解到，"),a("code",[t._v("Vue")]),t._v(" 的 "),a("code",[t._v("html parser")]),t._v(" 是 "),a("code",[t._v("fork")]),t._v(" 自 "),a("a",{attrs:{href:"http://erik.eae.net/simplehtmlparser/simplehtmlparser.js",target:"_blank",rel:"noopener noreferrer"}},[t._v("John Resig 所写的一个开源项目：http://erik.eae.net/simplehtmlparser/simplehtmlparser.js")]),t._v("，"),a("code",[t._v("Vue")]),t._v(" 在此基础上做了很多完善的工作，下面我们就探究一下 "),a("code",[t._v("Vue")]),t._v(" 中的 "),a("code",[t._v("html parser")]),t._v(" 都做了哪些事情。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"正则分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#正则分析","aria-hidden":"true"}},[this._v("#")]),this._v(" 正则分析")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("代码正文的一开始，是两句 "),s("code",[this._v("import")]),this._v(" 语句，以及定义的一些正则常量：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" makeMap"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" no "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'shared/util'")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" isNonPhrasingTag "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'web/compiler/util'")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// Regular Expressions for parsing tags and attributes")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" attribute "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName")]),t._v("\n"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v(" but "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" Vue templates we can enforce a simple charset\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ncname "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'[a-zA-Z_][\\\\w\\\\-\\\\.]*'")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" qnameCapture "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`((?:")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("ncname"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("\\\\:)?")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("ncname"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(")`")])]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" startTagOpen "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("RegExp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("`"),a("span",{attrs:{class:"token operator"}},[t._v("^")]),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("$"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("qnameCapture"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`)\nconst startTagClose = /^\\s*(\\/?)>/\nconst endTag = new RegExp(`")])]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("\\\\"),a("span",{attrs:{class:"token operator"}},[t._v("/")]),t._v("$"),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("qnameCapture"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token operator"}},[t._v("^")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token operator"}},[t._v("*")]),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("`"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" doctype "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/^<!DOCTYPE [^>]+>/i")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// #7298: escape - to avoid being pased as HTML comment when inlined in page")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" comment "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/^<!\\--/")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" conditionalComment "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/^<!\\[/")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"attribute"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#attribute","aria-hidden":"true"}},[this._v("#")]),this._v(" attribute")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("首先是 "),s("code",[this._v("attribute")]),this._v(" 正则常量：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// Regular Expressions for parsing tags and attributes")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" attribute "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("attribute")]),this._v(" 顾名思义，这个正则的作用是用来匹配标签的属性("),s("code",[this._v("attributes")]),this._v(")的，如下图所示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"http://ovjvjtt4l.bkt.clouddn.com/2017-12-04-111.jpg",alt:""}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们在观察一个复杂的正则表达式时，主要就是要观察它有几个分组(准确的说应该是有几个捕获的分组)，通过上图我们能够清晰的看到，这个表达式有五个捕获组，第一个捕获组用来匹配属性名，第二个捕获组用来匹配等于号，第三、第四、第五个捕获组都是用来匹配属性值的，同时 "),s("code",[this._v("?")]),this._v(" 表明第三、四、五个分组是可选的。 这是因为在 "),s("code",[this._v("html")]),this._v(" 标签中有4种写属性值的方式：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、使用双引号把值引起来："),a("code",[t._v('class="some-class"')])]),a("li",[t._v("2、使用单引号把值引起来："),a("code",[t._v("class='some-class'")])]),a("li",[t._v("3、不使用引号："),a("code",[t._v("class=some-class")])]),a("li",[t._v("4、单独的属性名："),a("code",[t._v("disabled")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" attribute "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/^\\s*([^\\s\"'<>\\/=]+)(?:\\s*(=)\\s*(?:\"([^\"]*)\"+|'([^']*)'+|([^\\s\"'=<>`]+)))?/")]),t._v("\nconsole"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'class=\"some-class\"'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attribute"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// 测试双引号")]),t._v("\nconsole"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("\"class='some-class'\"")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attribute"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// 测试单引号")]),t._v("\nconsole"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'class=some-class'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attribute"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// 测试无引号")]),t._v("\nconsole"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'disabled'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attribute"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),a("span",{attrs:{class:"token comment"}},[t._v("// 测试无属性值")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'class=\"some-class\"'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'class'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'='")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'some-class'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    undefined\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("数组共有从 "),a("code",[t._v("0")]),t._v(" 到 "),a("code",[t._v("5")]),t._v(" 六个元素，第 "),a("code",[t._v("0")]),t._v(" 个元素是被整个正则所匹配的结果，从第 "),a("code",[t._v("1")]),t._v(" 至第 "),a("code",[t._v("5")]),t._v(" 个元素分别对应五个捕获组的匹配结果，我们可以看到，第 "),a("code",[t._v("1")]),t._v(" 个元素对应第一个捕获组，匹配到了属性名("),a("code",[t._v("class")]),t._v(")；第 "),a("code",[t._v("2")]),t._v(" 个元素对应第二个捕获组，匹配到了等号("),a("code",[t._v("=")]),t._v(")；第 "),a("code",[t._v("3")]),t._v(" 个元素对应第三个捕获组，匹配到了带双引号的属性值；而第 "),a("code",[t._v("4")]),t._v(" 和第 "),a("code",[t._v("5")]),t._v(" 个元素分别对应第四和第五个捕获组，由于没有匹配到所以都是 "),a("code",[t._v("undefined")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("所以通过以上结果我们很容易想到当属性值被单引号引起来和不使用引号的情况下所得到的匹配结果是什么，变化主要就在匹配结果数组的第 "),a("code",[t._v("3")]),t._v("、"),a("code",[t._v("4")]),t._v("、"),a("code",[t._v("5")]),t._v(" 个元素，匹配到哪种情况，那么对应的位置就是属性值，其他位置则是 "),a("code",[t._v("undefined")]),t._v("，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 对于单引号的情况")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'class=\"some-class\"'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'class'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'='")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'some-class'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    undefined\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 对于没有引号")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'class=\"some-class\"'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'class'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'='")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'some-class'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 对于单独的属性名")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'disabled'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'disabled'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    undefined\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"ncname"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#ncname","aria-hidden":"true"}},[this._v("#")]),this._v(" ncname")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// could use https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// but for Vue templates we can enforce a simple charset")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ncname "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'[a-zA-Z_][\\\\w\\\\-\\\\.]*'")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("一、合法的 XML 名称是什么样的？")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("首先在 XML 中，标签是用户自己定义的，比如："),s("code",[this._v("<bug></bug>")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("正因为这样，所以不同的文档中如果定义了相同的元素(标签)，就会产生冲突，为此，XML 允许用户为标签指定前缀："),s("code",[this._v("<k:bug></k:bug>")]),this._v("，前缀是字母 "),s("code",[this._v("k")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("除了前缀还可以使用命名空间，即使用标签的 "),s("code",[this._v("xmlns")]),this._v(" 属性，为前缀赋予与指定命名空间相关联的限定名称：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),a("span",{attrs:{class:"token namespace"}},[t._v("k:")]),t._v("bug")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[a("span",{attrs:{class:"token namespace"}},[t._v("xmlns:")]),t._v("k")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("http://www.xxx.com/xxx"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),a("span",{attrs:{class:"token namespace"}},[t._v("k:")]),t._v("bug")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("综上所述，一个合法的XML标签名应该是由 "),a("code",[t._v("前缀")]),t._v("、"),a("code",[t._v("冒号(:)")]),t._v(" 以及 "),a("code",[t._v("标签名称")]),t._v(" 组成的："),a("code",[t._v("<前缀:标签名称>")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("二、什么是 "),s("code",[this._v("ncname")]),this._v("？")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("ncname")]),t._v(" 的全称是 "),a("code",[t._v("An XML name that does not contain a colon (:)")]),t._v(" 即：不包含冒号("),a("code",[t._v(":")]),t._v(")的 XML 名称。也就是说 "),a("code",[t._v("ncname")]),t._v(" 就是不包含前缀的XML标签名称。大家可以在这里找到关于 "),a("a",{attrs:{href:"https://msdn.microsoft.com/zh-cn/library/ms256452.aspx",target:"_blank",rel:"noopener noreferrer"}},[t._v("ncname")]),t._v(" 的概念。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("三、什么是 "),s("code",[this._v("qname")]),this._v("？")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们可以在 "),a("code",[t._v("Vue")]),t._v(" 的源码中看到其给出了一个连接："),a("a",{attrs:{href:"https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://www.w3.org/TR/1999/REC-xml-names-19990114/#NT-QName")]),t._v("，其实 "),a("code",[t._v("qname")]),t._v(" 就是："),a("code",[t._v("<前缀:标签名称>")]),t._v("，也就是合法的XML标签。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("了解了这些，我们再来看 "),a("code",[t._v("ncname")]),t._v(" 的正则表达式，它定义了 "),a("code",[t._v("ncname")]),t._v(" 的合法组成，这个正则所匹配的内容很简单："),a("em",[t._v("字母或下划线开头，后面可以跟任意数量的字符、中横线和 "),a("code",[t._v(".")])]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"qnamecapture"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#qnamecapture","aria-hidden":"true"}},[this._v("#")]),this._v(" qnameCapture")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("下一个正则是 "),s("code",[this._v("qnameCapture")]),this._v("，"),s("code",[this._v("qnameCapture")]),this._v(" 同样是普通字符串，只不过将来会用在 "),s("code",[this._v("new RegExp()")]),this._v(" 中：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" qnameCapture "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`((?:")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("ncname"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("\\\\:)?")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("ncname"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(")`")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们知道 "),a("code",[t._v("qname")]),t._v(" 实际上就是合法的标签名称，它是由可选项的 "),a("code",[t._v("前缀")]),t._v("、"),a("code",[t._v("冒号")]),t._v(" 以及 "),a("code",[t._v("名称")]),t._v(" 组成，观察 "),a("code",[t._v("qnameCapture")]),t._v(" 可知它有一个捕获分组，捕获的内容就是整个 "),a("code",[t._v("qname")]),t._v(" 名称，即整个标签的名称。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"starttagopen"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#starttagopen","aria-hidden":"true"}},[this._v("#")]),this._v(" startTagOpen")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("startTagOpen")]),this._v(" 是一个真正使用 "),s("code",[this._v("new RegExp()")]),this._v(" 创建出来的正则表达式：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" startTagOpen "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`^<")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("qnameCapture"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("用来匹配开始标签的一部分，这部分包括："),a("code",[t._v("<")]),t._v(" 以及后面的 "),a("code",[t._v("标签名称")]),t._v("，这个表达式的创建用到了上面定义的 "),a("code",[t._v("qnameCapture")]),t._v(" 字符串，所以 "),a("code",[t._v("qnameCapture")]),t._v(" 这个字符串中所设置的捕获分组，在这里同样适用，也就是说 "),a("code",[t._v("startTagOpen")]),t._v(" 这个正则表达式也会有一个捕获的分组，用来捕获匹配的标签名称。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"starttagclose"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#starttagclose","aria-hidden":"true"}},[this._v("#")]),this._v(" startTagClose")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[this._v("const")]),this._v(" startTagClose "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token regex"}},[this._v("/^\\s*(\\/?)>/")]),this._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("startTagOpen")]),t._v(" 用来匹配开始标签的 "),a("code",[t._v("<")]),t._v(" 以及标签的名字，但是并不包括开始标签的闭合部分，即："),a("code",[t._v(">")]),t._v(" 或者 "),a("code",[t._v("/>")]),t._v("，由于标签可能是一元标签，所以开始标签的闭合部分有可能是 "),a("code",[t._v("/>")]),t._v("，比如："),a("code",[t._v("<br />")]),t._v("，如果不是一元标签，此时就应该是："),a("code",[t._v(">")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("观察 "),s("code",[this._v("startTagClose")]),this._v(" 可知，这个正则拥有一个捕获分组，用来捕获开始标签结束部分的斜杠："),s("code",[this._v("/")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"endtag"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#endtag","aria-hidden":"true"}},[this._v("#")]),this._v(" endTag")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" endTag "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`^<\\\\/")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("qnameCapture"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("[^>]*>`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("endTag")]),this._v(" 这个正则用来匹配结束标签，由于该正则同样使用了字符串 "),s("code",[this._v("qnameCapture")]),this._v("，所以这个正则也拥有了一个捕获组，用来捕获标签名称。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"doctype"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#doctype","aria-hidden":"true"}},[this._v("#")]),this._v(" doctype")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[this._v("const")]),this._v(" doctype "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token regex"}},[this._v("/^<!DOCTYPE [^>]+>/i")]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这个正则用来匹配文档的 "),s("code",[this._v("DOCTYPE")]),this._v(" 标签，没有捕获组。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"comment"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#comment","aria-hidden":"true"}},[this._v("#")]),this._v(" comment")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// #7298: escape - to avoid being pased as HTML comment when inlined in page")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" comment "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/^<!\\--/")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这个正则用来匹配注释节点，没有捕获组。大家注意这句代码上方的注释，索引是："),a("code",[t._v("#7298")]),t._v("。有兴趣的同学可以去 "),a("code",[t._v("Vue")]),t._v(" 的 "),a("code",[t._v("issue")]),t._v(" 中搜索一下相关问题。在这之前实际上 "),a("code",[t._v("comment")]),t._v(" 常量的值是 "),a("code",[t._v("\x3c!--")]),t._v(" 而并不是 "),a("code",[t._v("<!\\--")]),t._v("，之所以改成 "),a("code",[t._v("<!\\--")]),t._v(" 是为了允许把 "),a("code",[t._v("Vue")]),t._v(" 代码内联到 "),a("code",[t._v("html")]),t._v(" 中，否则 "),a("code",[t._v("\x3c!--")]),t._v(" 会被认为是注释节点。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"conditionalcomment"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#conditionalcomment","aria-hidden":"true"}},[this._v("#")]),this._v(" conditionalComment")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[this._v("const")]),this._v(" conditionalComment "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token regex"}},[this._v("/^<!\\[/")]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后很重要的一点是，大家注意，这些正则表达式有一个共同的特点，即："),s("em",[this._v("他们都是从一个字符串的开头位置开始匹配的，因为有 "),s("code",[this._v("^")]),this._v(" 的存在")]),this._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("IS_REGEX_CAPTURING_BROKEN")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{attrs:{class:"token string"}},[t._v("'x'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token regex"}},[t._v("/x(.)?/g")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" g"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token constant"}},[t._v("IS_REGEX_CAPTURING_BROKEN")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" g "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先定义了变量 "),a("code",[t._v("IS_REGEX_CAPTURING_BROKEN")]),t._v(" 且初始值为 "),a("code",[t._v("false")]),t._v("，接着使用一个字符串 "),a("code",[t._v("'x'")]),t._v(" 的 "),a("code",[t._v("replace")]),t._v(" 函数用一个带有捕获组的正则进行匹配，并将捕获组捕获到的值赋值给变量 "),a("code",[t._v("g")]),t._v("。我们观察字符串 "),a("code",[t._v("'x'")]),t._v(" 和正则 "),a("code",[t._v("/x(.)?/")]),t._v(" 可以发现，该正则中的捕获组应该捕获不到任何内容，所以此时 "),a("code",[t._v("g")]),t._v(" 的值应该是 "),a("code",[t._v("undefined")]),t._v("，但是在老版本的火狐浏览器中存在一个问题，此时的 "),a("code",[t._v("g")]),t._v(" 是一个空字符串 "),a("code",[t._v("''")]),t._v("，并不是 "),a("code",[t._v("undefined")]),t._v("。所以变量 "),a("code",[t._v("IS_REGEX_CAPTURING_BROKEN")]),t._v(" 的作用就是用来标识当前宿主环境是否存在该问题。这个变量我们后面会用到，其作用到时候再说。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"常量分析"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#常量分析","aria-hidden":"true"}},[this._v("#")]),this._v(" 常量分析")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// Special Elements (can contain anything)")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isPlainTextElement "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("makeMap")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'script,style,textarea'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reCache "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" decodingMap "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'&lt;'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'<'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'&gt;'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'>'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'&quot;'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'\"'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'&amp;'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'&'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'&#10;'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'\\n'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'&#9;'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'\\t'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" encodedAttr "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/&(?:lt|gt|quot|amp);/g")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" encodedAttrWithNewLines "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token regex"}},[t._v("/&(?:lt|gt|quot|amp|#10|#9);/g")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上面这段代码中，包含 "),s("code",[this._v("5")]),this._v(" 个常量，我们逐个来看。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先是 "),a("code",[t._v("isPlainTextElement")]),t._v(" 常量是一个函数，它是通过 "),a("code",[t._v("makeMap")]),t._v(" 函数生成的，用来检测给定的标签名字是不是纯文本标签（包括："),a("code",[t._v("script")]),t._v("、"),a("code",[t._v("style")]),t._v("、"),a("code",[t._v("textarea")]),t._v("）。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("然后定义了 "),s("code",[this._v("reCache")]),this._v(" 常量，它被初始化为一个空的 "),s("code",[this._v("JSON")]),this._v(" 对象字面量。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("所以这里的常量 "),a("code",[t._v("decodingMap")]),t._v(" 以及两个正则 "),a("code",[t._v("encodedAttr")]),t._v(" 和 "),a("code",[t._v("encodedAttrWithNewLines")]),t._v(" 的作用就是用来完成对 "),a("code",[t._v("html")]),t._v(" 实体进行解码的。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// #5992")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isIgnoreNewlineTag "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("makeMap")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'pre,textarea'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token function-variable function"}},[t._v("shouldIgnoreFirstNewline")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" tag "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isIgnoreNewlineTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'\\n'")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("定义了两个常量，其中 "),a("code",[t._v("isIgnoreNewlineTag")]),t._v(" 是一个通过 "),a("code",[t._v("makeMap")]),t._v(" 函数生成的函数，用来检测给定的标签是否是 "),a("code",[t._v("<pre>")]),t._v(" 标签或者 "),a("code",[t._v("<textarea>")]),t._v(" 标签。这个函数被用在了 "),a("code",[t._v("shouldIgnoreFirstNewline")]),t._v(" 函数里，"),a("code",[t._v("shouldIgnoreFirstNewline")]),t._v(" 函数的作用是用来检测是否应该忽略元素内容的第一个换行符。什么意思呢？大家注意这两段代码上方的注释："),a("code",[t._v("// #5992")]),t._v("，感兴趣的同学可以去 "),a("code",[t._v("vue")]),t._v(" 的 "),a("code",[t._v("issue")]),t._v(" 中搜一下，大家就会发现，这两句代码的作用是用来解决一个问题，该问题是由于历史原因造成的，即一些元素会受到额外的限制，比如 "),a("code",[t._v("<pre>")]),t._v(" 标签和 "),a("code",[t._v("<textarea>")]),t._v(" 会忽略其内容的第一个换行符，所以下面这段代码是等价的：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("pre")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("内容"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("pre")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("pre")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n内容"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("pre")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("以上是浏览器的行为，所以 "),a("code",[t._v("Vue")]),t._v(" 的编译器也要实现这个行为，否则就会出现 "),a("code",[t._v("issue #5992")]),t._v(" 或者其他不可预期的问题。明白了这些我们再看 "),a("code",[t._v("shouldIgnoreFirstNewline")]),t._v(" 函数就很容易理解，这个函数就是用来判断是否应该忽略标签内容的第一个换行符的，如果满足："),a("em",[t._v("标签是 "),a("code",[t._v("pre")]),t._v(" 或者 "),a("code",[t._v("textarea")])]),t._v(" 且 "),a("em",[t._v("标签内容的第一个字符是换行符")]),t._v("，则返回 "),a("code",[t._v("true")]),t._v("，否则为 "),a("code",[t._v("false")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("isIgnoreNewlineTag")]),this._v(" 函数将被用于后面的 "),s("code",[this._v("parse")]),this._v(" 过程，所以我们到时候再看，接着往下看代码，接下来定义了一个函数 "),s("code",[this._v("decodeAttr")]),this._v("，其源码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("decodeAttr")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" shouldDecodeNewlines"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" re "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" shouldDecodeNewlines "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" encodedAttrWithNewLines "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" encodedAttr\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("re"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" match "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" decodingMap"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("match"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("decodeAttr")]),t._v(" 函数是用来解码 "),a("code",[t._v("html")]),t._v(" 实体的。它的原理是利用前面我们讲过的正则 "),a("code",[t._v("encodedAttrWithNewLines")]),t._v(" 和 "),a("code",[t._v("encodedAttr")]),t._v(" 以及 "),a("code",[t._v("html")]),t._v(" 实体与字符一一对应的 "),a("code",[t._v("decodingMap")]),t._v(" 对象来实现将 "),a("code",[t._v("html")]),t._v(" 实体转为对应的字符。该函数将会在后面 "),a("code",[t._v("parse")]),t._v(" 的过程中使用到。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"parsehtml"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parsehtml","aria-hidden":"true"}},[this._v("#")]),this._v(" parseHTML")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("接下来，将进入真正的 "),a("code",[t._v("parse")]),t._v(" 阶段，这个阶段我们将看到如何将 "),a("code",[t._v("html")]),t._v(" 字符串作为字符输入流，并且按照一定的规则将其逐步消化分解。这也是我们本节的重点，同时接下来我们要分析的函数也是 "),a("code",[t._v("compiler/parser/html-parser.js")]),t._v(" 文件所导出的函数，即 "),a("code",[t._v("parseHTML")]),t._v(" 函数，这个函数的内容非常多，但其实它还是很有条理的，下面就是对 "),a("code",[t._v("parseHTML")]),t._v(" 函数的简化和注释，这能够让你更好的把握 "),a("code",[t._v("parseHTML")]),t._v(" 函数的意图：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseHTML")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 定义一些常量和变量")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" stack "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" expectHTML "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expectHTML\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isUnaryTag "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isUnaryTag "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" no\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" canBeLeftOpenTag "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("canBeLeftOpenTag "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" no\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" index "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" last"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lastTag\n\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 开启一个 while 循环，循环结束的条件是 html 为空，即 html 被 parse 完毕")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    last "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html\n    \n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("lastTag "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token function"}},[t._v("isPlainTextElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 确保即将 parse 的内容不是在纯文本标签里 (script,style,textarea)")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 即将 parse 的内容是在纯文本标签里 (script,style,textarea)")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 将整个字符串作为文本对待")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" last"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("chars "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("chars")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("warn"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`Mal-formatted tag at end of template: "')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("html"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('"`')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 调用 parseEndTag 函数")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("parseEndTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// advance 函数")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("advance")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// parseStartTag 函数用来 parse 开始标签")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseStartTag")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// handleStartTag 函数用来处理 parseStartTag 的结果")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("handleStartTag")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// parseEndTag 函数用来 parse 结束标签")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseEndTag")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先我们注意到 "),a("code",[t._v("parseHTML")]),t._v(" 函数接收两个参数："),a("code",[t._v("html")]),t._v(" 和 "),a("code",[t._v("options")]),t._v("，其中 "),a("code",[t._v("html")]),t._v(" 是要被 "),a("code",[t._v("parse")]),t._v(" 的字符串，而 "),a("code",[t._v("options")]),t._v(" 则是 "),a("code",[t._v("parser")]),t._v(" 选项。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("总体上说，我们可以把 "),a("code",[t._v("parseHTML")]),t._v(" 函数分为三个部分，第一部分即函数开头定义的一些常量和变量，第二部分是一个 "),a("code",[t._v("while")]),t._v(" 循环，第三部分则是 "),a("code",[t._v("while")]),t._v(" 循环之后定义的一些函数。我们分别来看，首先是第一部分，也就是 "),a("code",[t._v("parseHTML")]),t._v(" 函数开头所定义的常量和变量，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" stack "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" expectHTML "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("expectHTML\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isUnaryTag "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("isUnaryTag "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" no\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" canBeLeftOpenTag "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("canBeLeftOpenTag "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" no\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" index "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" last"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lastTag\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("第一个常量是 "),a("code",[t._v("stack")]),t._v("，它被初始化为一个空数组，在 "),a("code",[t._v("while")]),t._v(" 循环中处理 "),a("code",[t._v("html")]),t._v(" 字符流的时候每当遇到一个"),a("strong",[t._v("非一元标签")]),t._v("，都会将该开始标签 "),a("code",[t._v("push")]),t._v(" 到该数组。那么它的作用是什么呢？大家思考一个问题：在一个 "),a("code",[t._v("html")]),t._v(" 字符串中，如何判断一个非一元标签是否缺少结束标签？")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("假设我们有如下 "),s("code",[this._v("html")]),this._v(" 字符串：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("article")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("section")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("section")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("article")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在 "),a("code",[t._v("parse")]),t._v(" 这个字符串的时候，首先会遇到 "),a("code",[t._v("article")]),t._v(" 开始标签，并将该标签入栈("),a("code",[t._v("push")]),t._v(" 到 "),a("code",[t._v("stack")]),t._v(" 数组)，然后会遇到 "),a("code",[t._v("section")]),t._v(" 开始标签，并将该标签 "),a("code",[t._v("push")]),t._v(" 到栈顶，接下来会遇到 "),a("code",[t._v("div")]),t._v(" 开始标签，同样被压入栈顶，注意此时 "),a("code",[t._v("stack")]),t._v(" 数组内包含三个元素，如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"http://ovjvjtt4l.bkt.clouddn.com/2017-12-25-070202.jpg",alt:""}})])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("再然后便会遇到 "),a("code",[t._v("section")]),t._v(" 结束标签，我们知道："),a("strong",[t._v("最先遇到的结束标签，其对应的开始标签应该最后被压入 stack 栈")]),t._v("，也就是说此时 "),a("code",[t._v("stack")]),t._v(" 栈顶的元素应该是 "),a("code",[t._v("section")]),t._v("，但是我们发现事实上 "),a("code",[t._v("stack")]),t._v(" 栈顶并不是 "),a("code",[t._v("section")]),t._v(" 而是 "),a("code",[t._v("div")]),t._v("，这说明 "),a("code",[t._v("div")]),t._v(" 元素缺少闭合标签。这就是检测 "),a("code",[t._v("html")]),t._v(" 字符串中是否缺少闭合标签的原理。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("讲完了 "),a("code",[t._v("stack")]),t._v(" 常量，接下来第二个常量是 "),a("code",[t._v("expectHTML")]),t._v("，它的值被初始化为 "),a("code",[t._v("options.expectHTML")]),t._v("，也就是 "),a("code",[t._v("parser")]),t._v(" 选项中的 "),a("code",[t._v("expectHTML")]),t._v("。它是一个布尔值，后面遇到的时候再讲解其作用。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("第三个常量是 "),a("code",[t._v("isUnaryTag")]),t._v("，如果 "),a("code",[t._v("options.isUnaryTag")]),t._v(" 存在则它的值被初始化为 "),a("code",[t._v("options.isUnaryTag")]),t._v(" ，否则初始化为 "),a("code",[t._v("no")]),t._v("，即一个始终返回 "),a("code",[t._v("false")]),t._v(" 的函数。其中 "),a("code",[t._v("options.isUnaryTag")]),t._v(" 也是一个 "),a("code",[t._v("parser")]),t._v(" 选项，用来检测一个标签是否是一元标签。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("第四个常量是 "),a("code",[t._v("canBeLeftOpenTag")]),t._v("，它的值被初始化为 "),a("code",[t._v("options.canBeLeftOpenTag")]),t._v("(如果存在的话，否则初始化为 "),a("code",[t._v("no")]),t._v(")。其中 "),a("code",[t._v("options.canBeLeftOpenTag")]),t._v(" 也是 "),a("code",[t._v("parser")]),t._v(" 选项，用来检测一个标签是否是可以省略闭合标签的非一元标签。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("除了常量，还定义了三个变量，分别是 "),a("code",[t._v("index = 0")]),t._v("，"),a("code",[t._v("last")]),t._v(" 以及 "),a("code",[t._v("lastTag")]),t._v("。其中 "),a("code",[t._v("index")]),t._v(" 被初始化为 "),a("code",[t._v("0")]),t._v("，它标识着当前字符流的读入位置。变量 "),a("code",[t._v("last")]),t._v(" 存储剩余还未 "),a("code",[t._v("parse")]),t._v(" 的 "),a("code",[t._v("html")]),t._v(" 字符串，变量 "),a("code",[t._v("lastTag")]),t._v(" 则始终存储着位于 "),a("code",[t._v("stack")]),t._v(" 栈顶的元素。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("接下来将进入第二部分，即开启一个 "),a("code",[t._v("while")]),t._v(" 循环，循环的终止条件是 "),a("code",[t._v("html")]),t._v(" 字符串为空，即 "),a("code",[t._v("html")]),t._v(" 字符串全部 "),a("code",[t._v("parse")]),t._v(" 完毕。"),a("code",[t._v("while")]),t._v(" 循环的结构如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  last "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html\n  \n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("lastTag "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token function"}},[t._v("isPlainTextElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 确保即将 parse 的内容不是在纯文本标签里 (script,style,textarea)")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 即将 parse 的内容是在纯文本标签里 (script,style,textarea)")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 将整个字符串作为文本对待")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" last"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("chars "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("chars")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("warn"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`Mal-formatted tag at end of template: "')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("html"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('"`')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("首先将在每次循环开始时将 "),s("code",[this._v("html")]),this._v(" 的值赋给变量 "),s("code",[this._v("last")]),this._v("：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("last "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" html\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们可以发现，在 "),s("code",[this._v("while")]),this._v(" 循环即将结束的时候，有一个对 "),s("code",[this._v("last")]),this._v(" 和 "),s("code",[this._v("html")]),this._v(" 这两个变量的比较：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" last"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果两者相等，则说明字符串 "),a("code",[t._v("html")]),t._v(" 在经历循环体的代码之后没有任何改变，此时会把 "),a("code",[t._v("html")]),t._v(" 字符串作为纯文本对待。接下来我们就着重讲解循环体中间的代码是如何 "),a("code",[t._v("parse")]),t._v(" html 字符串的。循环体中间的代码都被包含在一个 "),a("code",[t._v("if...else")]),t._v(" 语句块中：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("lastTag "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token function"}},[t._v("isPlainTextElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 确保即将 parse 的内容不是在纯文本标签里 (script,style,textarea)")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 即将 parse 的内容是在纯文本标签里 (script,style,textarea)")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们观察 "),s("code",[this._v("if")]),this._v(" 语句块的判断条件：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("lastTag "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token function"}},[t._v("isPlainTextElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果上面的条件为真，则走 "),s("code",[this._v("if")]),this._v(" 分支，否则将执行 "),s("code",[this._v("else")]),this._v(" 分支。不过这句判断条件看上去有些难懂，没关系我们换一个角度，如果对该条件进行取反的话，则是：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("lastTag "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isPlainTextElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("取反后的条件就好理解多了，我们知道 "),a("code",[t._v("lastTag")]),t._v(" 存储着 "),a("code",[t._v("stack")]),t._v(" 栈顶的元素，而 "),a("code",[t._v("stack")]),t._v(" 栈顶的元素应该就是"),a("strong",[t._v("最近一次遇到的一元标签的开始标签")]),t._v("，所以以上条件为真等价于："),a("strong",[t._v("最近一次遇到的非一元标签是纯文本标签(即：script,style,textarea 标签)")]),t._v("。也就是说："),a("strong",[t._v("当前我们正在处理的是纯文本标签里面的内容")]),t._v("。那么现在就清晰多了，当处理纯文本标签里面的内容时，就会执行 "),a("code",[t._v("else")]),t._v(" 分支，其他情况将执行 "),a("code",[t._v("if")]),t._v(" 分支。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来我们就先从 "),s("code",[this._v("if")]),this._v(" 分支开始说起，下面的代码是对 "),s("code",[this._v("if")]),this._v(" 语句块的简化：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("lastTag "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token function"}},[t._v("isPlainTextElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" textEnd "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'<'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("textEnd "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// textEnd === 0 的情况")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" text"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rest"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("textEnd "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// textEnd >= 0 的情况")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("textEnd "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// textEnd < 0 的情况")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("chars "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("chars")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略 ...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("简化后的代码看去上结构非常清晰，在 "),a("code",[t._v("if")]),t._v(" 语句块的一开始定义了 "),a("code",[t._v("textEnd")]),t._v(" 变量，它的值是"),a("strong",[t._v("html 字符串中左尖括号(<)第一次出现的位置")]),t._v("，接着开始了对 "),a("code",[t._v("textEnd")]),t._v(" 变量的一些列判断：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("textEnd "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// textEnd === 0 的情况")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" text"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rest"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("textEnd "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// textEnd >= 0 的情况")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("textEnd "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// textEnd < 0 的情况")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"textend-为-0-的情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#textend-为-0-的情况","aria-hidden":"true"}},[this._v("#")]),this._v(" textEnd 为 0 的情况")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("当 "),a("code",[t._v("textEnd === 0")]),t._v(" 时，说明 "),a("code",[t._v("html")]),t._v(" 字符串的第一个字符就是左尖括号，比如 "),a("code",[t._v("html")]),t._v(" 字符串为："),a("code",[t._v("<div>asdf</div>")]),t._v("，那么这个字符串的第一个字符就是左尖括号("),a("code",[t._v("<")]),t._v(")。现在我们采用深度优先的方式去分析，所以我们暂时不关心 "),a("code",[t._v("textEnd >= 0")]),t._v(" 以及 "),a("code",[t._v("textEnd < 0")]),t._v(" 的情况，我们查看一下当 "),a("code",[t._v("textEnd === 0")]),t._v(" 时的 "),a("code",[t._v("if")]),t._v(" 语句块内的代码，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("textEnd "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// Comment:")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("comment"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 有可能是注释节点")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("conditionalComment"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 有可能是条件注释节点")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// Doctype:")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" doctypeMatch "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("doctype"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("doctypeMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// doctype 节点")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// End tag:")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" endTagMatch "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("endTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("endTagMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 结束标签")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// Start tag:")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" startTagMatch "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseStartTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("startTagMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 开始标签")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("以上同样是对源码的简化，这样看上去更加清晰，我们知道当 "),a("code",[t._v("textEnd === 0")]),t._v(" 时说明 "),a("code",[t._v("html")]),t._v(" 字符串的第一个字符就是左尖括号("),a("code",[t._v("<")]),t._v(")，那么大家思考一下左尖括号开头的字符串，它可能是什么？其实通过上面代码中的一系列 "),a("code",[t._v("if")]),t._v(" 判断分支大家应该能猜到：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、可能是注释节点："),a("code",[t._v("\x3c!-- --\x3e")])]),a("li",[t._v("2、可能是条件注释节点："),a("code",[t._v("<![ ]>")])]),a("li",[t._v("3、可能是 "),a("code",[t._v("doctype")]),t._v("："),a("code",[t._v("<!DOCTYPE >")])]),a("li",[t._v("4、可能是结束标签："),a("code",[t._v("</xxx>")])]),a("li",[t._v("5、可能是开始标签："),a("code",[t._v("<xxx>")])]),a("li",[t._v("6、可能只是一个单纯的字符串："),a("code",[t._v("<abcdefg")])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"parse-注释节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parse-注释节点","aria-hidden":"true"}},[this._v("#")]),this._v(" parse 注释节点")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// Comment:")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("comment"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" commentEnd "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'--\x3e'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("commentEnd "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shouldKeepComment"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("comment")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("substring")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" commentEnd"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("advance")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("commentEnd "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("continue")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("对于注释节点的判断方法是使用正则常量 "),a("code",[t._v("comment")]),t._v(" 进行判断，即："),a("code",[t._v("comment.test(html)")]),t._v("，对于 "),a("code",[t._v("comment")]),t._v(" 正则常量我们在前面分析正则的部分已经讲过了，当时我提醒过大家一件事情，即这些正则常量有一个共同的特点："),a("strong",[t._v("都是从字符串的开头位置开始匹配的")]),t._v("，也就是说只有当 "),a("code",[t._v("html")]),t._v(" 字符串的第一个字符是左尖括号("),a("code",[t._v("<")]),t._v(")时才有意义。而现在我们分析的情况恰好是当 "),a("code",[t._v("textEnd === 0")]),t._v("，也就是说 "),a("code",[t._v("html")]),t._v(" 字符串的第一个字符确实是左尖括号("),a("code",[t._v("<")]),t._v(")。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("所以如果 "),a("code",[t._v("comment.test(html)")]),t._v(" 条件为真，则说明"),a("strong",[t._v("可能是")]),t._v("注释节点，大家要注意关键字："),a("strong",[t._v("可能是")]),t._v("，为什么这么说呢？大家知道完整的注释节点不仅仅要以 "),a("code",[t._v("\x3c!--")]),t._v(" 开头，还要以 "),a("code",[t._v("--\x3e")]),t._v(" 结尾，如果只以 "),a("code",[t._v("\x3c!--")]),t._v(" 开头而没有 "),a("code",[t._v("--\x3e")]),t._v(" 结尾，那显然不是一个注释节点，所以首先要检查 "),a("code",[t._v("html")]),t._v(" 字符串中 "),a("code",[t._v("--\x3e")]),t._v(" 的位置：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" commentEnd "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'--\x3e'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果找到了 "),s("code",[this._v("--\x3e")]),this._v("，则说明这确实是一个注释节点，那么就处理之，否则什么事情都不做。处理的代码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shouldKeepComment"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("comment")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("substring")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" commentEnd"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("advance")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("commentEnd "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("continue")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先判断 "),a("code",[t._v("parser")]),t._v(" 选项 "),a("code",[t._v("options.shouldKeepComment")]),t._v(" 是否为真，如果为真则调用同为 "),a("code",[t._v("parser")]),t._v(" 选项的 "),a("code",[t._v("options.comment")]),t._v(" 函数，并将注释节点的内容作为参数传递。在 "),a("code",[t._v("Vue")]),t._v(" 官方文档中可以找到一个叫做 "),a("code",[t._v("comments")]),t._v(" 的选项，实际上这里的 "),a("code",[t._v("options.shouldKeepComment")]),t._v(" 的值就是 "),a("code",[t._v("Vue")]),t._v(" 选项 "),a("code",[t._v("comments")]),t._v(" 的值，这一点当我们讲到生成抽象语法树("),a("code",[t._v("AST")]),t._v(")的时候即可看到。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("substring")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" commentEnd"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("通过调用字符串的 "),s("code",[this._v("substring")]),this._v(" 方法截取注释内容，其中起始位置是 "),s("code",[this._v("4")]),this._v("，结束位置是 "),s("code",[this._v("commentEnd")]),this._v(" 的值，用一张图表示将会更加清晰：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"http://ovjvjtt4l.bkt.clouddn.com/2017-12-26-115232.jpg",alt:""}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以看到，最终获取到的内容是不包含注释节点的起始("),s("code",[this._v("\x3c!--")]),this._v(")和结束("),s("code",[this._v("--\x3e")]),this._v(")的。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这样一个注释节点就 "),a("code",[t._v("parse")]),t._v(" 完毕了，那么完毕之后应该做什么呢？要做的很关键的一件事就是："),a("strong",[t._v("将已经 "),a("code",[t._v("parse")]),t._v(" 完毕的字符串剔除")]),t._v("，也就是接下来调用的 "),a("code",[t._v("advance")]),t._v(" 函数：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("advance")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("commentEnd "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("该函数定义在 "),s("code",[this._v("while")]),this._v(" 循环的下方，源码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("advance")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  index "),a("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" n\n  html "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("substring")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("advance")]),t._v(" 函数接收一个 "),a("code",[t._v("Number")]),t._v(" 类型的参数 "),a("code",[t._v("n")]),t._v("，我们刚刚说到：已经 "),a("code",[t._v("parse")]),t._v(" 完毕的部分要从 "),a("code",[t._v("html")]),t._v(" 字符串中剔除，而剔除的方式很简单，就是找到已经 "),a("code",[t._v("parse")]),t._v(" 完毕的字符串的结束位置，然后执行 "),a("code",[t._v("html = html.substring(n)")]),t._v(" 即可，这里的 "),a("code",[t._v("n")]),t._v(" 就是所谓的结束位置。除此之外，我们发现 "),a("code",[t._v("advance")]),t._v(" 函数还对 "),a("code",[t._v("index")]),t._v(" 变量做了赋值："),a("code",[t._v("index += n")]),t._v("，前面我们介绍变量的时候说到过，"),a("code",[t._v("index")]),t._v(" 变量存储着字符流的读入位置，该位置是相对于原始 "),a("code",[t._v("html")]),t._v(" 字符串的，所以每次都要更新。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("advance")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("commentEnd "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("n")]),this._v(" 的值是 "),s("code",[this._v("commentEnd + 3")]),this._v("，还是用一张图来表示：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"http://ovjvjtt4l.bkt.clouddn.com/2017-12-26-121606.jpg",alt:""}})])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以很容易的看到，经过 "),a("code",[t._v("advance")]),t._v(" 函数后，新的 "),a("code",[t._v("html")]),t._v(" 字符串将从 "),a("code",[t._v("commentEnd + 3")]),t._v(" 的位置开始，而不再包含已经 "),a("code",[t._v("parse")]),t._v(" 过的注释节点了。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("最后还有一个很重要的步骤，即调用完 "),a("code",[t._v("advance")]),t._v(" 函数之后，要执行 "),a("code",[t._v("continue")]),t._v(" 跳过此次循环，由于此时 "),a("code",[t._v("html")]),t._v(" 字符串已经是去掉了 "),a("code",[t._v("parse")]),t._v(" 过的部分的新字符串了，所以开启下一次循环，重新开始 "),a("code",[t._v("parse")]),t._v(" 过程。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"parse-条件注释节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parse-条件注释节点","aria-hidden":"true"}},[this._v("#")]),this._v(" parse 条件注释节点")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// http://en.wikipedia.org/wiki/Conditional_comment#Downlevel-revealed_conditional_comment")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("conditionalComment"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" conditionalEnd "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("']>'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("conditionalEnd "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("advance")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("conditionalEnd "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("continue")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("类似对注释节点的判断一样，对于条件注释节点使用 "),a("code",[t._v("conditionalComment")]),t._v(" 正则常量。但是如果条件 "),a("code",[t._v("conditionalComment.test(html)")]),t._v(" 为真，只能说明"),a("strong",[t._v("可能是")]),t._v("条件注释节点，因为条件注释节点除了要以 "),a("code",[t._v("<![")]),t._v(" 开头还必须以 "),a("code",[t._v("]>")]),t._v(" 结尾，所以在 "),a("code",[t._v("if")]),t._v(" 语句块内第一句代码就是查找字符串 "),a("code",[t._v("]>")]),t._v(" 的位置：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" conditionalEnd "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("']>'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果没有找到，说明这不是一个条件注释节点，什么都不做。否则会作为条件注释节点对待，不过与注释节点不同，注释节点拥有 "),a("code",[t._v("parser")]),t._v(" 选项 "),a("code",[t._v("options.comment")]),t._v("，在调用 "),a("code",[t._v("advance")]),t._v(" 函数之前，会先将注释节点的内容传递给 "),a("code",[t._v("options.comment")]),t._v(" 函数。而对于条件注释节点则没有相应的 "),a("code",[t._v("parser")]),t._v(" 钩子，也就是说 "),a("code",[t._v("Vue")]),t._v(" 模板永远都不会保留条件注释节点的内容，所以直接调用 "),a("code",[t._v("advance")]),t._v(" 函数以及执行 "),a("code",[t._v("continue")]),t._v(" 语句结束此次循环。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("其中传递给 "),s("code",[this._v("advance")]),this._v(" 函数的参数是 "),s("code",[this._v("conditionalEnd + 2")]),this._v("，它保存着条件注释结束部分在字符串中的位置，道理与 "),s("code",[this._v("parse")]),this._v(" 注释节点时相同。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"parse-doctype节点"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parse-doctype节点","aria-hidden":"true"}},[this._v("#")]),this._v(" parse Doctype节点")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果既没有命中注释节点，也没有命中条件注释节点，那么将判断是否命中 "),s("code",[this._v("Doctype")]),this._v(" 节点：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// Doctype:")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" doctypeMatch "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("doctype"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("doctypeMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("advance")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("doctypeMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("continue")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("判断的方法是使用字符串的 "),a("code",[t._v("match")]),t._v(" 方法去匹配正则 "),a("code",[t._v("doctype")]),t._v("，如果匹配成功 "),a("code",[t._v("doctypeMatch")]),t._v(" 的值是一个数组，数组的第一项保存着整个匹配项的字符串，即整个 "),a("code",[t._v("Doctype")]),t._v(" 标签的字符串，否则 "),a("code",[t._v("doctypeMatch")]),t._v(" 的值为 "),a("code",[t._v("null")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果匹配成功 "),a("code",[t._v("if")]),t._v(" 语句块将被执行，同样的，对于 "),a("code",[t._v("Doctype")]),t._v(" 也没有提供相应的 "),a("code",[t._v("parser")]),t._v(" 钩子，即 "),a("code",[t._v("Vue")]),t._v(" 不会保留 "),a("code",[t._v("Doctype")]),t._v(" 节点的内容。不过大家不用担心，因为在原则上 "),a("code",[t._v("Vue")]),t._v(" 在编译的时候根本不会遇到 "),a("code",[t._v("Doctype")]),t._v(" 标签。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"parse-开始标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parse-开始标签","aria-hidden":"true"}},[this._v("#")]),this._v(" parse 开始标签")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("实际上接下来的代码是解析结束标签的("),a("code",[t._v("End tag")]),t._v(")，解析开始标签("),a("code",[t._v("Start tag")]),t._v(")的代码被放到了最后面，但是这里把解析开始标签的代码提前来讲，是因为在顺序读取 "),a("code",[t._v("html")]),t._v(" 字符流的过程中，总会先遇到开始标签，再遇到结束标签，除非你的 "),a("code",[t._v("html")]),t._v(" 代码中没有开始标签，直接写结束标签。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// Start tag:")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" startTagMatch "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseStartTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("startTagMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("handleStartTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("startTagMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("shouldIgnoreFirstNewline")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("advance")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("continue")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"parsestarttag-函数解析开始标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parsestarttag-函数解析开始标签","aria-hidden":"true"}},[this._v("#")]),this._v(" parseStartTag 函数解析开始标签")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先调用 "),a("code",[t._v("parseStartTag")]),t._v(" 函数，并获取其返回值，如果存在返回值则说明开始标签解析成功，这的的确确是一个开始标签，然后才会执行 "),a("code",[t._v("if")]),t._v(" 语句块内的代码。也就是说判断是否解析到一个开始标签的工作，是由 "),a("code",[t._v("parseStartTag")]),t._v(" 函数完成的，这个函数定义在 "),a("code",[t._v("advance")]),t._v(" 函数的下面，我们看看它的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseStartTag")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" start "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("startTagOpen"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      start"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" index\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("advance")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attr\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("end "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("startTagClose"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attr "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attribute"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("advance")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attr"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attr"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unarySlash "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("advance")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("end"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("end "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" index\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" match\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("parseStartTag")]),t._v(" 函数首先会调用 "),a("code",[t._v("html")]),t._v(" 字符串的 "),a("code",[t._v("match")]),t._v(" 函数匹配 "),a("code",[t._v("startTagOpen")]),t._v(" 正则，前面我们讲到过 "),a("code",[t._v("startTagOpen")]),t._v(" 正则用来匹配开始标签的一部分，这部分包括："),a("code",[t._v("<")]),t._v(" 以及后面的 "),a("code",[t._v("标签名称")]),t._v("，并且拥有一个捕获组，即捕获标签的名称。然后将匹配的结果赋值给 "),a("code",[t._v("start")]),t._v(" 常量，如果 "),a("code",[t._v("start")]),t._v(" 常量为 "),a("code",[t._v("null")]),t._v(" 则说明匹配失败，则 "),a("code",[t._v("parseStartTag")]),t._v(" 函数执行完毕，其返回值为 "),a("code",[t._v("undefined")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果匹配成功，那么 "),a("code",[t._v("start")]),t._v(" 常量将是一个包含两个元素的数组：第一个元素是标签的开始部分(包含 "),a("code",[t._v("<")]),t._v(" 和 "),a("code",[t._v("标签名称")]),t._v(")；第二个元素是捕获组捕获到的标签名称。比如有如下 "),a("code",[t._v("html")]),t._v("：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{attrs:{class:"token tag"}},[s("span",{attrs:{class:"token tag"}},[s("span",{attrs:{class:"token punctuation"}},[this._v("<")]),this._v("div")]),s("span",{attrs:{class:"token punctuation"}},[this._v(">")])]),s("span",{attrs:{class:"token tag"}},[s("span",{attrs:{class:"token tag"}},[s("span",{attrs:{class:"token punctuation"}},[this._v("</")]),this._v("div")]),s("span",{attrs:{class:"token punctuation"}},[this._v(">")])]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么此时 "),s("code",[this._v("start")]),this._v(" 数组为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("start "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'<div'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'div'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("由于匹配成功，所以 "),s("code",[this._v("if")]),this._v(" 语句块将被执行，首先是下面这段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" match "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    start"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" index\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("advance")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略 ...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("定义了 "),s("code",[this._v("match")]),this._v(" 常量，它是一个对象，初始状态下拥有三个属性：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、"),a("code",[t._v("tagName")]),t._v("：它的值为 "),a("code",[t._v("start[1]")]),t._v(" 即标签的名称。")]),a("li",[t._v("2、"),a("code",[t._v("attrs")]),t._v("：它的初始值是一个空数组，我们知道，开始标签是可能拥有属性的，而这个数组就是用来存储将来被匹配到的属性。")]),a("li",[t._v("3、"),a("code",[t._v("start")]),t._v("：它的值被设置为 "),a("code",[t._v("index")]),t._v("，也就是当前字符流读入位置在整个 "),a("code",[t._v("html")]),t._v(" 字符串中的相对位置。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接着开始标签的开始部分就匹配完成了，所以要调用 "),s("code",[this._v("advance")]),this._v(" 函数，参数为 "),s("code",[this._v("start[0].length")]),this._v("，即匹配到的字符串的长度。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略 ...")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attr\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("end "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("startTagClose"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attr "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attribute"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("advance")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attr"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attr"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略 ...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先定义两个变量 "),a("code",[t._v("end")]),t._v(" 以及 "),a("code",[t._v("attr")]),t._v("，接着开启了一个 "),a("code",[t._v("while")]),t._v(" 循环，那么这个 "),a("code",[t._v("while")]),t._v(" 循环的作用是什么呢？我们看一下循环的条件就知道了：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("end "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("startTagClose"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attr "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attribute"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("循环的条件有两个，第一个条件是："),a("strong",[t._v("没有匹配到开始标签的结束部分")]),t._v("，这个条件的实现方式是使用 "),a("code",[t._v("html")]),t._v(" 字符串的 "),a("code",[t._v("match")]),t._v(" 方法去匹配 "),a("code",[t._v("startTagClose")]),t._v(" 正则，并将结果保存到 "),a("code",[t._v("end")]),t._v(" 变量中。第二个条件是："),a("strong",[t._v("匹配到了属性")]),t._v("，实现方式是使用  "),a("code",[t._v("html")]),t._v(" 字符串的 "),a("code",[t._v("match")]),t._v(" 方法去匹配 "),a("code",[t._v("attribute")]),t._v("正则。简单一句话总结这个条件的成立要素："),a("strong",[t._v("没有匹配到开始标签的结束部分，并且匹配到了开始标签中的属性")]),t._v("，这个时候循环体将被执行，直到遇到开始标签的结束部分为止。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在循环体内，由于此时匹配到了开始标签的属性，所以 "),s("code",[this._v("attr")]),this._v(" 变量将保存着匹配结果，匹配的结果与 "),s("code",[this._v("attribute")]),this._v(" 正则及其捕获组有关，详细内容我们在前面分析正则的时候讲到过，比如有如下 "),s("code",[this._v("html")]),this._v(" 字符串：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-for")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("v in map"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么 "),s("code",[this._v("attr")]),this._v(" 变量的值将为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("attr "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("' v-for=\"v in map\"'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'v-for'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'='")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'v in map'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  undefined\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("接下来在循环体内做了两件事，首先调用 "),a("code",[t._v("advance")]),t._v(" 函数，参数为 "),a("code",[t._v("attr[0].length")]),t._v(" 即整个属性的长度。然后会将此次循环匹配到的结果 "),a("code",[t._v("push")]),t._v(" 到前面定义的 "),a("code",[t._v("match")]),t._v(" 对象的 "),a("code",[t._v("attrs")]),t._v(" 数组中，即：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("advance")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attr"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmatch"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("attr"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这样一次循环就结束了，将会开始下一次循环，直到"),a("strong",[t._v("匹配到开始标签的结束部分")]),t._v("或者"),a("strong",[t._v("匹配不到属性")]),t._v("的时候循环才会停止。"),a("code",[t._v("parseStartTag")]),t._v(" 函数 "),a("code",[t._v("if")]),t._v(" 语句块内的最后一段代码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略 ...")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unarySlash "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("advance")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("end"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("end "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" index\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" match\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这里首先判断了变量 "),a("code",[t._v("end")]),t._v(" 是否为真，我们知道，即使匹配到了开始标签的 "),a("code",[t._v("开始部分")]),t._v(" 以及 "),a("code",[t._v("属性部分")]),t._v(" 但是却没有匹配到开始标签的 "),a("code",[t._v("结束部分")]),t._v("，则说明这根本就不是一个开始标签。所以只有当变量 "),a("code",[t._v("end")]),t._v(" 存在，即匹配到了开始标签的 "),a("code",[t._v("结束部分")]),t._v(" 时，才能说明这是一个完整的开始标签。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果变量 "),a("code",[t._v("end")]),t._v(" 的确存在，那么将会执行 "),a("code",[t._v("if")]),t._v(" 语句块内的代码，不过我们需要先了解一下变量 "),a("code",[t._v("end")]),t._v(" 的值是什么？变量 "),a("code",[t._v("end")]),t._v(" 的值是正则 "),a("code",[t._v("startTagClose")]),t._v(" 的匹配结果，前面我们讲到过该正则用来匹配开始标签的结束部分即 "),a("code",[t._v(">")]),t._v(" 或者 "),a("code",[t._v("/>")]),t._v("(当标签为一元标签时)，并且拥有一个捕获组用来捕获 "),a("code",[t._v("/")]),t._v("，比如当 "),a("code",[t._v("html")]),t._v(" 字符串如下时：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{attrs:{class:"token tag"}},[s("span",{attrs:{class:"token tag"}},[s("span",{attrs:{class:"token punctuation"}},[this._v("<")]),this._v("br")]),this._v(" "),s("span",{attrs:{class:"token punctuation"}},[this._v("/>")])]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么匹配到的 "),s("code",[this._v("end")]),this._v(" 的值为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("end "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'/>'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'/'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果 "),s("code",[this._v("html")]),this._v(" 字符串如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token operator"}},[this._v("<")]),this._v("div"),s("span",{attrs:{class:"token operator"}},[this._v(">")]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么 "),s("code",[this._v("end")]),this._v(" 的值将是：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("end "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'>'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("所以，如果 "),a("code",[t._v("end[1]")]),t._v(" 不为 "),a("code",[t._v("undefined")]),t._v("，那么说明该标签是一个一元标签。那么现在再看 "),a("code",[t._v("if")]),t._v(" 语句块内的代码，将很容易理解，首先在 "),a("code",[t._v("match")]),t._v(" 对象上添加 "),a("code",[t._v("unarySlash")]),t._v(" 属性，其值为 "),a("code",[t._v("end[1]")]),t._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unarySlash "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("然后调用 "),a("code",[t._v("advance")]),t._v(" 函数，参数为 "),a("code",[t._v("end[0].length")]),t._v("，接着在 "),a("code",[t._v("match")]),t._v(" 对象上添加了一个 "),a("code",[t._v("end")]),t._v(" 属性，它的值为 "),a("code",[t._v("index")]),t._v("，注意由于先调用的 "),a("code",[t._v("advance")]),t._v(" 函数，所以此时的 "),a("code",[t._v("index")]),t._v(" 已经被更新了。最后将 "),a("code",[t._v("match")]),t._v(" 对象作为 "),a("code",[t._v("parseStartTag")]),t._v(" 函数的返回值返回。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们发现只有当变量 "),a("code",[t._v("end")]),t._v(" 存在时，即能够确定确实解析到了一个开始标签的时候 "),a("code",[t._v("parseStartTag")]),t._v(" 函数才会有返回值，并且返回值是 "),a("code",[t._v("match")]),t._v(" 对象，其他情况下 "),a("code",[t._v("parseStartTag")]),t._v(" 全部返回 "),a("code",[t._v("undefined")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("下面我们整理一下 "),s("code",[this._v("parseStartTag")]),this._v(" 函数的返回值，即 "),s("code",[this._v("match")]),this._v(" 对象。当成功的匹配到一个开始标签时，假设有如下 "),s("code",[this._v("html")]),this._v(" 字符串：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-if")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("isSucceed"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),t._v(" "),a("span",{attrs:{class:"token attr-name"}},[t._v("v-for")]),a("span",{attrs:{class:"token attr-value"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("=")]),a("span",{attrs:{class:"token punctuation"}},[t._v('"')]),t._v("v in map"),a("span",{attrs:{class:"token punctuation"}},[t._v('"')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("则 "),s("code",[this._v("parseStartTag")]),this._v(" 函数的返回值如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("match "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'div'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{attrs:{class:"token string"}},[t._v("' v-if=\"isSucceed\"'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{attrs:{class:"token string"}},[t._v("'v-if'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{attrs:{class:"token string"}},[t._v("'='")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{attrs:{class:"token string"}},[t._v("'isSucceed'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      undefined\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n      "),a("span",{attrs:{class:"token string"}},[t._v("' v-for=\"v in map\"'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{attrs:{class:"token string"}},[t._v("'v-for'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{attrs:{class:"token string"}},[t._v("'='")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      "),a("span",{attrs:{class:"token string"}},[t._v("'v in map'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      undefined\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  start"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" index"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  unarySlash"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  end"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" index\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("注意 "),s("code",[this._v("match.start")]),this._v(" 和 "),s("code",[this._v("match.end")]),this._v(" 是不同的，如下图：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"http://ovjvjtt4l.bkt.clouddn.com/2017-12-28-080651.jpg",alt:""}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"handlestarttag-函数处理解析结果"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#handlestarttag-函数处理解析结果","aria-hidden":"true"}},[this._v("#")]),this._v(" handleStartTag 函数处理解析结果")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们讲解完了 "),s("code",[this._v("parseStartTag")]),this._v(" 函数及其返回值，现在我们回到对开始标签的 "),s("code",[this._v("parse")]),this._v(" 部分：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// Start tag:")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" startTagMatch "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseStartTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("startTagMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("handleStartTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("startTagMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("shouldIgnoreFirstNewline")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("advance")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("continue")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("startTagMatch")]),t._v(" 常量存储着 "),a("code",[t._v("parseStartTag")]),t._v(" 函数的返回值，在前面的分析中我们得知，只有在成功匹配到开始标签的情况下 "),a("code",[t._v("parseStartTag")]),t._v(" 才会返回解析结果(一个对象)，否则返回 "),a("code",[t._v("undefined")]),t._v("。也就是说如果匹配失败则不会执行 "),a("code",[t._v("if")]),t._v(" 语句块，现在我们假设匹配成功，那么 "),a("code",[t._v("if")]),t._v(" 语句块中的代码将会被执行，此时会将解析结果作为参数传递给 "),a("code",[t._v("handleStartTag")]),t._v(" 函数，"),a("code",[t._v("handleStartTag")]),t._v(" 函数定义在 "),a("code",[t._v("parseStartTag")]),t._v(" 函数的下方，源码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("handleStartTag")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("match"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" tagName "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tagName\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" unarySlash "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unarySlash\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expectHTML"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastTag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'p'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isNonPhrasingTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("parseEndTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("canBeLeftOpenTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" lastTag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("parseEndTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" unary "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isUnaryTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("unarySlash\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" l "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" attrs "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" l"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" args "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token constant"}},[t._v("IS_REGEX_CAPTURING_BROKEN")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'\"\"'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" value "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" shouldDecodeNewlines "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" tagName "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'href'")]),t._v("\n      "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shouldDecodeNewlinesForHref\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shouldDecodeNewlines\n    attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("decodeAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" shouldDecodeNewlines"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lowerCasedTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("toLowerCase")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" attrs "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    lastTag "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" tagName\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("start")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("handleStartTag")]),t._v(" 函数用来处理开始标签的解析结果，所以它接收 "),a("code",[t._v("parseStartTag")]),t._v(" 函数的返回值作为参数。"),a("code",[t._v("handleStartTag")]),t._v(" 函数的一开始定义两个常量："),a("code",[t._v("tagName")]),t._v(" 以及 "),a("code",[t._v("unarySlash")]),t._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" tagName "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tagName\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" unarySlash "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("unarySlash\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这两个常量的值都来自于开始标签的匹配结果，以下我们统一将开始标签的匹配结果称为 "),a("code",[t._v("match")]),t._v(" 对象。其中常量 "),a("code",[t._v("tagName")]),t._v(" 为开始标签的标签名，常量 "),a("code",[t._v("unarySlash")]),t._v(" 的值为 "),a("code",[t._v("'/'")]),t._v(" 或 "),a("code",[t._v("undefined")]),t._v(" 其中之一。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("接着是一个 "),a("code",[t._v("if")]),t._v(" 语句块，"),a("code",[t._v("if")]),t._v(" 语句的判断条件是 "),a("code",[t._v("if (expectHTML)")]),t._v("，前面说过 "),a("code",[t._v("expectHTML")]),t._v(" 是 "),a("code",[t._v("parser")]),t._v(" 选项，是一个布尔值，如果为真则该 "),a("code",[t._v("if")]),t._v(" 语句块的代码将被执行。但是现在我们暂时不看这段代码，因为这段代码包含 "),a("code",[t._v("parseEndTag")]),t._v(" 函数的调用，所以待我们讲解完 "),a("code",[t._v("parseEndTag")]),t._v(" 函数之后，再回头来说这段代码。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" unary "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isUnaryTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("unarySlash\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" l "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" attrs "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Array")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("l"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token operator"}},[this._v("<")]),this._v("my"),s("span",{attrs:{class:"token operator"}},[this._v("-")]),this._v("component "),s("span",{attrs:{class:"token operator"}},[this._v("/")]),s("span",{attrs:{class:"token operator"}},[this._v(">")]),this._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("对于这个标签，它的 "),a("code",[t._v("tagName")]),t._v(" 是 "),a("code",[t._v("my-component")]),t._v("，由于它并不存在于标准 "),a("code",[t._v("HTML")]),t._v(" 所规定的一元标签之内，所以此时调用 "),a("code",[t._v("isUnaryTag('my-component')")]),t._v(" 函数会返回假，但问题是 "),a("code",[t._v("<my-component />")]),t._v(" 标签确实是一元标签，所以此时需要第二个判断条件，即："),a("strong",[t._v("开始标签的结束部分是否使用 '/'")]),t._v("，如果有反斜线 "),a("code",[t._v("'/'")]),t._v("，说明这是一个一元标签。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("除了 "),a("code",[t._v("unary")]),t._v(" 常量之外，还定义了两个常量："),a("code",[t._v("l")]),t._v(" 和 "),a("code",[t._v("attrs")]),t._v("，其中常量 "),a("code",[t._v("l")]),t._v(" 的值存储着 "),a("code",[t._v("match.attrs")]),t._v(" 数组的长度，而 "),a("code",[t._v("attrs")]),t._v(" 常量则是一个与 "),a("code",[t._v("match.attrs")]),t._v(" 数组长度相等的数组。这两个常量将被用于接下来的 "),a("code",[t._v("for")]),t._v(" 循环中：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" l"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" args "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// hackish work around FF bug https://bugzilla.mozilla.org/show_bug.cgi?id=369778")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token constant"}},[t._v("IS_REGEX_CAPTURING_BROKEN")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'\"\"'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" value "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" shouldDecodeNewlines "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" tagName "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'href'")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shouldDecodeNewlinesForHref\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shouldDecodeNewlines\n  attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("decodeAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" shouldDecodeNewlines"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这个 "),a("code",[t._v("for")]),t._v(" 循环的作用是："),a("strong",[t._v("格式化 "),a("code",[t._v("match.attrs")]),t._v(" 数组，并将格式化后的数据存储到常量 "),a("code",[t._v("attrs")]),t._v(" 中")]),t._v("。格式化包括两部分，第一：格式化后的数据只包含 "),a("code",[t._v("name")]),t._v(" 和 "),a("code",[t._v("value")]),t._v(" 两个字段，其中 "),a("code",[t._v("name")]),t._v(" 是属性名，"),a("code",[t._v("value")]),t._v(" 是属性的值。第二：对属性值进行 "),a("code",[t._v("html")]),t._v(" 实体的解码。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("下面我们具体看一下循环体的代码，首先定义 "),a("code",[t._v("args")]),t._v(" 常量，它的值就是每个属性的解析结果，即 "),a("code",[t._v("match.attrs")]),t._v(" 数组中的元素对象。接着是一个 "),a("code",[t._v("if")]),t._v(" 语句块，其第一个判断条件是 "),a("code",[t._v("IS_REGEX_CAPTURING_BROKEN")]),t._v(" 为真，在本节的常量部分我们遇到过 "),a("code",[t._v("IS_REGEX_CAPTURING_BROKEN")]),t._v(" 常量，它是一个布尔值，是用来判断老版本火狐浏览器的一个 "),a("code",[t._v("bug")]),t._v(" 的，即当捕获组匹配不到值时那么捕获组对应变量的值应该是 "),a("code",[t._v("undefined")]),t._v(" 而不是空字符串。所以 "),a("code",[t._v("if")]),t._v(" 语句块对此做了变通方案，如果发现此时捕获到的属性值为空字符串那么就手动使用 "),a("code",[t._v("delete")]),t._v(" 操作符将其删除。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("code",[this._v("if")]),this._v(" 语句块的下面定义了常量 "),s("code",[this._v("value")]),this._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" value "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("3")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("4")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("5")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("' v-if=\"isSucceed\"'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'v-if'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'='")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'isSucceed'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  undefined"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  undefined\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们知道，数组的第 "),a("code",[t._v("4")]),t._v("、"),a("code",[t._v("5")]),t._v("、"),a("code",[t._v("6")]),t._v(" 项其中之一可能会包含属性值，所以常量 "),a("code",[t._v("value")]),t._v(" 中就保存着最终的属性值，如果第 "),a("code",[t._v("4")]),t._v("、"),a("code",[t._v("5")]),t._v("、"),a("code",[t._v("6")]),t._v(" 项都没有获取到属性值，那么属性值将被设置为一个空字符串："),a("code",[t._v("''")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("属性值获取到了之后，就可以拼装最终的 "),s("code",[this._v("attrs")]),this._v(" 数组了，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" shouldDecodeNewlines "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" tagName "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'a'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'href'")]),t._v("\n  "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shouldDecodeNewlinesForHref\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("shouldDecodeNewlines\nattrs"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" args"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("decodeAttr")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" shouldDecodeNewlines"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("与我们之前所说的一样，"),a("code",[t._v("attrs")]),t._v(" 数组的每个元素对象只包含两个元素，即属性名 "),a("code",[t._v("name")]),t._v(" 和属性值 "),a("code",[t._v("value")]),t._v("，对于属性名直接从 "),a("code",[t._v("args[1]")]),t._v(" 中即可获取，但我们发现属性值却没有直接使用前面获取到的 "),a("code",[t._v("value")]),t._v("，而是将 "),a("code",[t._v("value")]),t._v(" 传递给了 "),a("code",[t._v("decodeAttr")]),t._v(" 函数，并使用该函数的返回值作为最终的属性值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这样 "),s("code",[this._v("for")]),this._v(" 循环语句块的代码我们就讲完了，在 "),s("code",[this._v("for")]),this._v(" 循环语句块的下面是这样一段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("push")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lowerCasedTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("toLowerCase")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" attrs "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  lastTag "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" tagName\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("判断条件是当开始标签是非一元标签时才会执行，其目的是："),a("strong",[t._v("如果开始标签是非一元标签，则将该开始标签的信息入栈，即 "),a("code",[t._v("push")]),t._v(" 到 "),a("code",[t._v("stack")]),t._v(" 数组中，并将 "),a("code",[t._v("lastTag")]),t._v(" 的值设置为该标签名")]),t._v("。在讲解 "),a("code",[t._v("parseHTML")]),t._v(" 函数开头定义的变量和常量的过程中，我们讲解过 "),a("code",[t._v("stack")]),t._v(" 常量以及 "),a("code",[t._v("lastTage")]),t._v(" 变量，其目的是将来判断是否缺少闭合标签，并且现在大家应该知道为什么 "),a("code",[t._v("lastTag")]),t._v(" 所存储的标签名字始终保存着 "),a("code",[t._v("stack")]),t._v(" 栈顶的元素了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("handleStartTag")]),this._v(" 函数的最后一段代码是调用 "),s("code",[this._v("parser")]),this._v(" 钩子函数的：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("start")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" match"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果 "),a("code",[t._v("parser")]),t._v(" 选项中包含 "),a("code",[t._v("options.start")]),t._v(" 函数，则调用之，并将开始标签的名字("),a("code",[t._v("tagName")]),t._v(")，格式化后的属性数组("),a("code",[t._v("attrs")]),t._v(")，是否为一元标签("),a("code",[t._v("unary")]),t._v(")，以及开始标签在元 "),a("code",[t._v("html")]),t._v(" 中的开始和结束位置("),a("code",[t._v("match.start")]),t._v(" 和 "),a("code",[t._v("match.end")]),t._v(") 作为参数传递。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"parse-结束标签"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parse-结束标签","aria-hidden":"true"}},[this._v("#")]),this._v(" parse 结束标签")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来我们将会讲解 "),s("code",[this._v("textEnd === 0")]),this._v(" 时的最后一种情况，即可能是结束标签，"),s("code",[this._v("parse")]),this._v(" 结束标签的代码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// End tag:")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" endTagMatch "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("match")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("endTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("endTagMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" curIndex "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" index\n  "),a("span",{attrs:{class:"token function"}},[t._v("advance")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("endTagMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("parseEndTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("endTagMatch"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" curIndex"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("continue")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先调用 "),a("code",[t._v("html")]),t._v(" 字符串的 "),a("code",[t._v("match")]),t._v(" 函数匹配正则 "),a("code",[t._v("endTag")]),t._v("，将结果保存在常量 "),a("code",[t._v("endTagMatch")]),t._v(" 中。正则 "),a("code",[t._v("endTag")]),t._v(" 用来匹配结束标签，并且拥有一个捕获组用来捕获标签名字，比如有如下 "),a("code",[t._v("html")]),t._v(" 字符串：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-html"}},[s("code",[s("span",{attrs:{class:"token tag"}},[s("span",{attrs:{class:"token tag"}},[s("span",{attrs:{class:"token punctuation"}},[this._v("<")]),this._v("div")]),s("span",{attrs:{class:"token punctuation"}},[this._v(">")])]),s("span",{attrs:{class:"token tag"}},[s("span",{attrs:{class:"token tag"}},[s("span",{attrs:{class:"token punctuation"}},[this._v("</")]),this._v("div")]),s("span",{attrs:{class:"token punctuation"}},[this._v(">")])]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("则匹配后 "),s("code",[this._v("endTagMatch")]),this._v(" 如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("endTagMatch "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'</div>'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'div'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("第一个元素是整个匹配到的结束标签字符串，第二个元素是对应的标签名字。如果匹配成功 "),a("code",[t._v("if")]),t._v(" 语句块的代码将被执行，首先使用 "),a("code",[t._v("curIndex")]),t._v(" 常量存储当前 "),a("code",[t._v("index")]),t._v(" 的值，然后调用 "),a("code",[t._v("advance")]),t._v(" 函数，并以 "),a("code",[t._v("endTagMatch[0].length")]),t._v(" 作为参数，接着调用了 "),a("code",[t._v("parseEndTag")]),t._v(" 函数对结束标签进行解析，传递给 "),a("code",[t._v("parseEndTag")]),t._v(" 函数的三个参数分别是：标签名以及结束标签在 "),a("code",[t._v("html")]),t._v(" 字符串中起始和结束的位置，最后调用 "),a("code",[t._v("continue")]),t._v(" 语句结束此次循环。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("关键点在于 "),s("code",[this._v("parseEndTag")]),this._v(" 函数，它定义在 "),s("code",[this._v("handleStartTag")]),this._v(" 函数的下面：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("parseEndTag")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" pos"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lowerCasedTagName\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" start "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" index\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("end "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" end "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" index\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    lowerCasedTagName "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("toLowerCase")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// Find the closest opened tag of the same type")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pos "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" pos "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" pos"),a("span",{attrs:{class:"token operator"}},[t._v("--")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("pos"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lowerCasedTag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" lowerCasedTagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// If no tag name is provided, clean shop")]),t._v("\n    pos "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pos "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// Close all the open elements, up the stack")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" pos"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("--")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" pos "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n        options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("warn\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n          "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`tag <")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("stack"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("> has no matching end tag.`")])]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("end")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// Remove the open elements from the stack")]),t._v("\n    stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" pos\n    lastTag "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" pos "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" stack"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("pos "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lowerCasedTagName "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'br'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("start")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lowerCasedTagName "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'p'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("start")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("end")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("parseEndTag")]),t._v(" 函数的代码看上去很长，但实际上它所做的事情并没有想象的那么复杂。按照通常的逻辑，在调用 "),a("code",[t._v("parseEndTag")]),t._v(" 函数之前已经获得到了结束标签的名字以及结束标签在原始 "),a("code",[t._v("html")]),t._v(" 字符串中的起始和结束位置，所以完全可以直接调用 "),a("code",[t._v("parser")]),t._v(" 钩子 "),a("code",[t._v("options.end(tagName, start, end)")]),t._v("，并宣布大功告成。然而实际上 "),a("code",[t._v("Vue")]),t._v(" 的 "),a("code",[t._v("html parser")]),t._v(" 并没有这样做，而是又调用了 "),a("code",[t._v("parseEndTag")]),t._v(" 函数，那说明必然有其他的事情需要处理，到底是什么事情呢？我们可以想象一下 "),a("code",[t._v("parseEndTag")]),t._v(" 函数都会做什么事情，首先 "),a("code",[t._v("parseEndTag")]),t._v(" 函数的执行说明此时正在 "),a("code",[t._v("parse")]),t._v(" 结束标签，假设我们有如下 "),a("code",[t._v("html")]),t._v(" 字符串：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("article")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("section")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("section")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("article")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("很明显，"),a("code",[t._v("<div>")]),t._v(" 标签缺少结束标签："),a("code",[t._v("</div>")]),t._v("，那么此时是不是应该给用户一个提示？而这就是 "),a("code",[t._v("parseEndTag")]),t._v(" 函数所做的事情之一。除此之外我们再看如下 "),a("code",[t._v("html")]),t._v(" 字符串：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("article")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("section")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("section")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("article")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在解析这段 "),a("code",[t._v("html")]),t._v(" 字符串的时候，首先会遇到两个非一元标签的开始标签，即 "),a("code",[t._v("<article>")]),t._v(" 和 "),a("code",[t._v("<section>")]),t._v("，并将这两个标签 "),a("code",[t._v("push")]),t._v(" 到 "),a("code",[t._v("stack")]),t._v(" 栈中。然后会依次遇到与 "),a("code",[t._v("stack")]),t._v(" 栈中起始标签相对应的结束标签 "),a("code",[t._v("</section>")]),t._v(" 和 "),a("code",[t._v("</article>")]),t._v("，在解析完这两个结束标签之后 "),a("code",[t._v("stack")]),t._v(" 栈应该是空栈。紧接着又遇到一个开始标签，也就是 "),a("code",[t._v("<div>")]),t._v(" 标签，这是一个非一元标签的开始标签，所以会将该标签 "),a("code",[t._v("push")]),t._v(" 到 "),a("code",[t._v("stack")]),t._v(" 栈中。这样上面这段 "),a("code",[t._v("html")]),t._v(" 字符串就解析完成了，大家发现什么问题没有？没错问题就是："),a("strong",[a("code",[t._v("stack")]),t._v(" 栈非空")]),t._v("。"),a("code",[t._v("stack")]),t._v(" 栈中还残留最后遇到的 "),a("code",[t._v("<div>")]),t._v(" 开始标签没有被处理，所以 "),a("code",[t._v("parseEndTag")]),t._v(" 函数的另外一个作用就是处理 "),a("code",[t._v("stack")]),t._v(" 栈中剩余未被处理的标签。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("除了这些功能之外，"),s("code",[this._v("parseEndTag")]),this._v(" 函数还会做一件事儿，如果你感兴趣你可以在任何 "),s("code",[this._v("html")]),this._v(" 文件中写下如下内容：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("br")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("body")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面的 "),a("code",[t._v("html")]),t._v(" 片段中，我们分别写了 "),a("code",[t._v("</br>")]),t._v("、"),a("code",[t._v("</p>")]),t._v(" 的结束标签，但注意我们并没有写起始标签，然后浏览器是能够正常解析他们的，其中 "),a("code",[t._v("</br>")]),t._v(" 标签被正常解析为 "),a("code",[t._v("<br>")]),t._v(" 标签，而 "),a("code",[t._v("</p>")]),t._v(" 标签被正常解析为 "),a("code",[t._v("<p></p>")]),t._v("。除了 "),a("code",[t._v("br")]),t._v(" 与 "),a("code",[t._v("p")]),t._v(" 其他任何标签如果你只写了结束标签那么浏览器都将会忽略。所以为了与浏览器的行为相同，"),a("code",[t._v("parseEndTag")]),t._v(" 函数也需要专门处理 "),a("code",[t._v("br")]),t._v(" 与 "),a("code",[t._v("p")]),t._v(" 的结束标签，即："),a("code",[t._v("</br>")]),t._v(" 和 "),a("code",[t._v("</p>")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在我们已经知道了 "),s("code",[this._v("parseEndTag")]),this._v(" 函数主要有三个作用：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("检测是否缺少闭合标签")]),a("li",[t._v("处理 "),a("code",[t._v("stack")]),t._v(" 栈中剩余的标签")]),a("li",[t._v("解析 "),a("code",[t._v("</br>")]),t._v(" 与 "),a("code",[t._v("</p>")]),t._v(" 标签，与浏览器的行为相同")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当一个函数拥有两个及以上功能的时候，最常用的技巧就是通过参数进行控制，所以 "),s("code",[this._v("parseEndTag")]),this._v(" 函数也不例外。"),s("code",[this._v("parseEndTag")]),this._v(" 函数接收三个参数，这三个参数其实都是可选的，根据传参的不同其功能也不同。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以明确的告诉大家，在 "),s("code",[this._v("Vue")]),this._v(" 的 "),s("code",[this._v("html-parser")]),this._v(" 中 "),s("code",[this._v("parseEndTag")]),this._v(" 函数的使用方式有三种：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("第一种是处理普通的结束标签，此时"),s("strong",[this._v("三个参数都传递")])]),s("li",[this._v("第二种是只传递第一个参数：")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token function"}},[this._v("parseEndTag")]),s("span",{attrs:{class:"token punctuation"}},[this._v("(")]),this._v("lastTag"),s("span",{attrs:{class:"token punctuation"}},[this._v(")")]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("只传递一个参数的情况我们前面遇到过，就是在 "),s("code",[this._v("handleStartTag")]),this._v(" 函数中")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("第三种是"),s("strong",[this._v("不传递参数")]),this._v("，当不传递参数的时候，就是我们讲过的，这是在处理 "),s("code",[this._v("stack")]),this._v(" 栈剩余未处理的标签。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来我们就逐步分析 "),s("code",[this._v("parseEndTag")]),this._v(" 函数的代码，从而明白 "),s("code",[this._v("parseEndTag")]),this._v(" 函数是如何完成这些事情的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在 "),s("code",[this._v("parseEndTag")]),this._v(" 函数的开头是这样一段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" pos"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" lowerCasedTagName\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("start "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" start "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" index\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("end "),a("span",{attrs:{class:"token operator"}},[t._v("==")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" end "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" index\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("定了两个变量："),a("code",[t._v("pos")]),t._v(" 和 "),a("code",[t._v("lowerCasedTagName")]),t._v("，其中变量 "),a("code",[t._v("pos")]),t._v(" 会在后面用于判断 "),a("code",[t._v("html")]),t._v(" 字符串是否缺少结束标签，"),a("code",[t._v("lowerCasedTagName")]),t._v(" 变量用来存储 "),a("code",[t._v("tagName")]),t._v(" 的小写版。接着是两句 "),a("code",[t._v("if")]),t._v(" 语句，当 "),a("code",[t._v("start")]),t._v(" 和 "),a("code",[t._v("end")]),t._v(" 不存在时，将这两个变量的值设置为当前字符流的读入位置，即 "),a("code",[t._v("index")]),t._v("。所以当我们看到这两个 "),a("code",[t._v("if")]),t._v(" 语句时，我们就应该能够想到："),a("code",[t._v("parseEndTag")]),t._v(" 函数的第二个参数和第三个参数都是可选的，即不传。其实这种使用 "),a("code",[t._v("parseEndTag")]),t._v(" 函数的方式我们在 "),a("code",[t._v("handleStartTag")]),t._v(" 函数中见过，当时我们没有对其进行讲解，现在我们可以看一下这段代码了，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expectHTML"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastTag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'p'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isNonPhrasingTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("parseEndTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("canBeLeftOpenTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" lastTag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("parseEndTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们知道 "),s("code",[this._v("lastTag")]),this._v(" 引用的是 "),s("code",[this._v("stack")]),this._v(" 栈顶的元素，也就是最近(或者说上一次)遇到的开始标签，所以如下判断条件：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("lastTag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'p'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isNonPhrasingTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("的意思是最近一次遇到的开始标签是 "),a("code",[t._v("p")]),t._v(" 标签，并且当前正在解析的开始标签必须不能是"),a("strong",[t._v("段落式内容("),a("code",[t._v("Phrasing content")]),t._v(")"),a("strong",[t._v("模型，这时候 "),a("code",[t._v("if")]),t._v(" 语句块的代码才会执行，即调用 "),a("code",[t._v("parseEndTag(lastTag)")]),t._v("。首先大家要知道每一个 "),a("code",[t._v("html")]),t._v(" 元素都拥有一个或多个内容模型("),a("code",[t._v("content model")]),t._v(")，其中 "),a("code",[t._v("p")]),t._v(" 标签本身的内容模型是")]),t._v("流式内容("),a("code",[t._v("Flow content")]),t._v(")")]),t._v("，并且 "),a("code",[t._v("p")]),t._v(" 标签的特性是只允许包含"),a("strong",[t._v("段落式内容("),a("code",[t._v("Phrasing content")]),t._v(")")]),t._v("。所以条件成立的情况如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("h2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("h2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在解析上面这段 "),a("code",[t._v("html")]),t._v(" 字符串的时候，首先遇到 "),a("code",[t._v("p")]),t._v(" 标签的开始标签，此时 "),a("code",[t._v("lastTag")]),t._v(" 被设置为 "),a("code",[t._v("p")]),t._v("，紧接着会遇到 "),a("code",[t._v("h2")]),t._v(" 标签的开始标签，由于 "),a("code",[t._v("h2")]),t._v(" 标签的内容模型属于非**段落式内容("),a("code",[t._v("Phrasing content")]),t._v(")**模型，所以会立即调用 "),a("code",[t._v("parseEndTag(lastTag)")]),t._v(" 函数闭合 "),a("code",[t._v("p")]),t._v(" 标签，此时由于强行插入了 "),a("code",[t._v("</p>")]),t._v(" 标签，所以解析后的字符串将变为如下内容：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("h2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("h2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("接着，继续解析该字符串，会遇到 "),a("code",[t._v("<h2></h2>")]),t._v(" 标签并正常解析之，最后解析器会遇到一个单独的 "),a("code",[t._v("p")]),t._v(" 标签的结束标签，即："),a("code",[t._v("</p>")]),t._v("。这个时候就回到了我们前面讲过的，当解析器遇到 "),a("code",[t._v("p")]),t._v(" 标签或者 "),a("code",[t._v("br")]),t._v(" 标签的结束标签时会补全他们，最终 "),a("code",[t._v("<p><h2></h2></p>")]),t._v(" 这段 "),a("code",[t._v("html")]),t._v(" 字符串将被解析为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("h2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("h2")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("而这也就是浏览器的行为，以上是第一个 "),s("code",[this._v("if")]),this._v(" 分支的意义。还有第二个 "),s("code",[this._v("if")]),this._v(" 分支，它的条件如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("canBeLeftOpenTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" lastTag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" tagName\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("以上条件成立的意思是："),s("strong",[this._v("当前正在解析的标签是一个可以省略结束标签的标签，并且与上一次解析到的开始标签相同")]),this._v("，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("one\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("p")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("two\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("p")]),t._v(" 标签是可以省略结束标签的标签，所以当解析到一个 "),a("code",[t._v("p")]),t._v(" 标签的开始标签并且下一次遇到的标签也是 "),a("code",[t._v("p")]),t._v(" 标签的开始标签时，会立即关闭第二个 "),a("code",[t._v("p")]),t._v(" 标签。即调用："),a("code",[t._v("parseEndTag(tagName)")]),t._v(" 函数，然后由于第一个 "),a("code",[t._v("p")]),t._v(" 标签缺少闭合标签所以会 "),a("code",[t._v("Vue")]),t._v(" 会给你一个警告。但其实这是不对的，我已经提了PR："),a("a",{attrs:{href:"https://github.com/vuejs/vue/pull/7510",target:"_blank",rel:"noopener noreferrer"}},[t._v("https://github.com/vuejs/vue/pull/7510")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在我们补充讲解了 "),s("code",[this._v("handleStartTag")]),this._v(" 函数中遗留未讲解的内容，我们回过头来继续看 "),s("code",[this._v("parseEndTag")]),this._v(" 函数的代码，接下来是这段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  lowerCasedTagName "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("toLowerCase")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这句代码很简单，如果存在 "),s("code",[this._v("tagName")]),this._v(" 则将其转为小写并保存到之前定义的 "),s("code",[this._v("lowerCasedTagName")]),this._v(" 变量中。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// Find the closest opened tag of the same type")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pos "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" pos "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" pos"),a("span",{attrs:{class:"token operator"}},[t._v("--")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("pos"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lowerCasedTag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" lowerCasedTagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// If no tag name is provided, clean shop")]),t._v("\n  pos "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("用一句话描述上面这代码的作用：寻找当前解析的结束标签所对应的开始标签在 "),a("code",[t._v("stack")]),t._v(" 栈中的位置。实现方式是如果 "),a("code",[t._v("tagName")]),t._v(" 存在，则开启一个 "),a("code",[t._v("for")]),t._v(" 循环从后向前遍历 "),a("code",[t._v("stack")]),t._v(" 栈，直到找到相应的位置，并且该位置索引会保存到 "),a("code",[t._v("pos")]),t._v(" 变量中，如果 "),a("code",[t._v("tagName")]),t._v(" 不存在，则直接将 "),a("code",[t._v("pos")]),t._v(" 设置为 "),a("code",[t._v("0")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么 "),s("code",[this._v("pos")]),this._v(" 变量是用来干什么的呢？实际上 "),s("code",[this._v("pos")]),this._v(" 变量会被用来判断是否有元素缺少闭合标签。我们继续查看后面的代码就明白了，即：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pos "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// Close all the open elements, up the stack")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" pos"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("--")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i "),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" pos "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n      "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("expectHTML "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("canBeLeftOpenTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n      options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("warn\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`tag <")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("stack"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v("> has no matching end tag.`")])]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("end")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// Remove the open elements from the stack")]),t._v("\n  stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" pos\n  lastTag "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" pos "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" stack"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("pos "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lowerCasedTagName "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'br'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// ... 省略")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lowerCasedTagName "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'p'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// ... 省略")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面的代码是 "),a("code",[t._v("parseEndTag")]),t._v(" 函数剩余的全部代码，有三部分组成，即 "),a("code",[t._v("if...else if...else if")]),t._v("。首先我们查看 "),a("code",[t._v("if")]),t._v(" 语句块，当 "),a("code",[t._v("pos >= 0")]),t._v(" 的时候就会走 "),a("code",[t._v("if")]),t._v(" 语句块。在 "),a("code",[t._v("if")]),t._v(" 语句块内开启一个 "),a("code",[t._v("for")]),t._v(" 循环，同样是从后向前遍历 "),a("code",[t._v("stack")]),t._v(" 数组，如果发现 "),a("code",[t._v("stack")]),t._v(" 数组中存在索引大于 "),a("code",[t._v("pos")]),t._v(" 的元素，那么该元素一定是缺少闭合标签的，这个时候如果是在非生产环境那么 "),a("code",[t._v("Vue")]),t._v(" 便会打印一句警告，告诉你缺少闭合标签。除了打印一句警告之外，随后会调用 "),a("code",[t._v("options.end(stack[i].tag, start, end)")]),t._v(" 立即将其闭合，这是为了保证解析结果的正确性。最后更新 "),a("code",[t._v("stack")]),t._v(" 栈以及 "),a("code",[t._v("lastTag")]),t._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// Remove the open elements from the stack")]),t._v("\nstack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" pos\nlastTag "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" pos "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" stack"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("pos "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tag\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("接下来我们看一下后面两个 "),s("code",[this._v("else if")]),this._v(" 语句块，即：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pos "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// ... 省略")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lowerCasedTagName "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'br'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("start")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("true")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lowerCasedTagName "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'p'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("start"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("start")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token boolean"}},[t._v("false")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("end")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么什么时候才会执行第二个语句块呢？需要两个条件，第一："),s("code",[this._v("pos >= 0")]),this._v(" 不能成立，否则程序将走 "),s("code",[this._v("if")]),this._v(" 分支，那么什么时候 "),s("code",[this._v("pos < 0")]),this._v(" 成立呢？我们再次观察下面这段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pos "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" pos "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" pos"),a("span",{attrs:{class:"token operator"}},[t._v("--")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("pos"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lowerCasedTag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" lowerCasedTagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// If no tag name is provided, clean shop")]),t._v("\n  pos "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以发现，如果 "),a("code",[t._v("tagName")]),t._v(" 不存在，那么 "),a("code",[t._v("pos")]),t._v(" 将始终等于 "),a("code",[t._v("0")]),t._v("，这样 "),a("code",[t._v("pos >= 0")]),t._v(" 将永远成立，所以要想使得 "),a("code",[t._v("pos < 0")]),t._v(" 成立，那么 "),a("code",[t._v("tagName")]),t._v(" 参数是必然存在的。也就是说 "),a("code",[t._v("pos")]),t._v(" 要想小于 "),a("code",[t._v("0")]),t._v("，那么必须要执行 "),a("code",[t._v("for")]),t._v(" 循环，可以发现："),a("strong",[t._v("当 "),a("code",[t._v("tagName")]),t._v(" 没有在 "),a("code",[t._v("stack")]),t._v(" 栈中找到对应的开始标签时，"),a("code",[t._v("pos")]),t._v(" 为 "),a("code",[t._v("-1")])]),t._v("。这样 "),a("code",[t._v("pos >= 0")]),t._v(" 的条件就不成立了，此时就会判断 "),a("code",[t._v("else if")]),t._v(" 分支。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("现在我们还需要思考一个问题，"),a("strong",[t._v("当 "),a("code",[t._v("tagName")]),t._v(" 没有在 "),a("code",[t._v("stack")]),t._v(" 栈中找到对应的开始标签时")]),t._v("说明什么问题？我们知道 "),a("code",[t._v("tagName")]),t._v(" 是当前正在解析的结束标签，结束标签竟然没有找到对应的开始标签？那么也就是说，只写了结束标签而没写开始标签。并且我们可以发现这两个 "),a("code",[t._v("else if")]),t._v(" 分支的判断条件分别是：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lowerCasedTagName "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'br'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lowerCasedTagName "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'p'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("也就是说，当你写了 "),a("code",[t._v("br")]),t._v(" 标签的结束标签："),a("code",[t._v("</br>")]),t._v(" 或 "),a("code",[t._v("p")]),t._v(" 标签的结束标签 "),a("code",[t._v("</p>")]),t._v(" 时，解析器能够正常解析他们，其中对于 "),a("code",[t._v("</br>")]),t._v(" 会将其解析为正常的 "),a("code",[t._v("<br>")]),t._v(" 标签，而 "),a("code",[t._v("</p>")]),t._v(" 标签也会正常解析为 "),a("code",[t._v("<p></p>")]),t._v("。有兴趣的同学可以在任何一个 "),a("code",[t._v("html")]),t._v(" 文件中写下如下字符串：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("<")]),t._v("body")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("div")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("br")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n  "),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("p")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n"),a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token tag"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("</")]),t._v("body")]),a("span",{attrs:{class:"token punctuation"}},[t._v(">")])]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("可以发现对于 "),a("code",[t._v("</br>")]),t._v(" 和 "),a("code",[t._v("</p>")]),t._v(" 标签浏览器可以将其正常解析为 "),a("code",[t._v("<br>")]),t._v(" 以及 "),a("code",[t._v("<p></p>")]),t._v("，而对于 "),a("code",[t._v("</div>")]),t._v(" 浏览器会将其忽略。所以 "),a("code",[t._v("Vue")]),t._v(" 的 "),a("code",[t._v("parser")]),t._v(" 与浏览器的行为是一致的。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("现在我们还剩一个问题没有讲解，即 "),a("code",[t._v("parseEndTag")]),t._v(" 是如何处理 "),a("code",[t._v("stack")]),t._v(" 栈中剩余未处理的标签的。其实就是调用 "),a("code",[t._v("parseEndTag()")]),t._v(" 函数时不传递任何参数，也就是说此时 "),a("code",[t._v("tagName")]),t._v(" 参数也不存在。这个时我们再次查看下面的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("pos "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" pos "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" pos"),a("span",{attrs:{class:"token operator"}},[t._v("--")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stack"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("pos"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("lowerCasedTag "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" lowerCasedTagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// If no tag name is provided, clean shop")]),t._v("\n  pos "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("由于 "),a("code",[t._v("tagName")]),t._v(" 不存在，所以此时 "),a("code",[t._v("pos")]),t._v(" 为 "),a("code",[t._v("0")]),t._v("，我们知道在这段代码之后会遍历 "),a("code",[t._v("stack")]),t._v(" 栈，并将 "),a("code",[t._v("stack")]),t._v(" 栈中元素的索引与 "),a("code",[t._v("pos")]),t._v(" 作对比。由于 "),a("code",[t._v("pos")]),t._v(" 为 "),a("code",[t._v("0")]),t._v("，所以 "),a("code",[t._v("i >= pos")]),t._v(" 始终成立，这个时候 "),a("code",[t._v("stack")]),t._v(" 栈中如果有剩余未处理的标签，则会逐个警告缺少闭合标签，并调用 "),a("code",[t._v("options.end")]),t._v(" 将其闭合。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"textend-大于等于-0-的情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#textend-大于等于-0-的情况","aria-hidden":"true"}},[this._v("#")]),this._v(" textEnd 大于等于 0 的情况")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("以上是 "),a("code",[t._v("textEnd")]),t._v(" 等于 "),a("code",[t._v("0")]),t._v(" 的情况，此时代表字符 "),a("code",[t._v("<")]),t._v(" 为字符串的第一个字符，所以会优先作为 "),a("strong",[t._v("注释标签")]),t._v("、"),a("strong",[t._v("条件注释")]),t._v("、"),a("strong",[t._v("开始标识")]),t._v(" 以及 "),a("strong",[t._v("结束标签")]),t._v(" 处理，但是即使字符串的第一个字符是 "),a("code",[t._v("<")]),t._v(" 也不能保证成功匹配以上四种情况，比如字符串 "),a("code",[t._v("'< 2'")]),t._v("，这个字符串虽然以 "),a("code",[t._v("<")]),t._v(" 开头，但他什么标签都不是，这时将会进入另外一个 "),a("code",[t._v("if")]),t._v(" 语句块的判断，即如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" text"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" rest"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" next\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("textEnd "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  rest "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("textEnd"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("endTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rest"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("startTagOpen"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rest"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("comment"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rest"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("conditionalComment"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rest"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// < in plain text, be forgiving and treat it as text")]),t._v("\n    next "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" rest"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'<'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("next "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n    textEnd "),a("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" next\n    rest "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("textEnd"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  text "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("substring")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" textEnd"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("advance")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("textEnd"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这段代码用来处理那些第一个字符是 "),s("code",[this._v("<")]),this._v(" 但没有成功匹配标签，或第一个字符不是 "),s("code",[this._v("<")]),this._v(" 的字符串。为了更好理解我们可以举个例子，假设 "),s("code",[this._v("html")]),this._v(" 字符串如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("html "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token string"}},[this._v("'0<1<1'")]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果字符串长成这个样子，那么 "),s("code",[this._v("textEnd")]),this._v(" 的值应该为 "),s("code",[this._v("1")]),this._v("，我们查看 "),s("code",[this._v("if")]),this._v(" 条件语句内的第一句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("rest "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("textEnd"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这句代码使用 "),a("code",[t._v("textEnd")]),t._v(" 截取了字符串 "),a("code",[t._v("html")]),t._v(" 并将截取后的值赋值给 "),a("code",[t._v("rest")]),t._v(" 变量，所以此时 "),a("code",[t._v("rest")]),t._v(" 变量的值应该为 "),a("code",[t._v("<1<2")]),t._v("，接着开启一个 "),a("code",[t._v("while")]),t._v(" 循环，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("endTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rest"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("startTagOpen"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rest"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("comment"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rest"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("conditionalComment"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("test")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("rest"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// < in plain text, be forgiving and treat it as text")]),t._v("\n  next "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" rest"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'<'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("next "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n  textEnd "),a("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" next\n  rest "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("textEnd"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这个 "),a("code",[t._v("while")]),t._v(" 循环共有四个条件，这四个条件的作用是什么呢？我们知道截取后的字符串是 "),a("code",[t._v("<1<2")]),t._v("，依然是一个以符号 "),a("code",[t._v("<")]),t._v(" 开头的字符串，所以这个字符串很有可能匹配成标签，而 "),a("code",[t._v("while")]),t._v(" 循环的条件保证了只有截取后的字符串不能匹配标签的情况下才会执行，这说明符号 "),a("code",[t._v("<")]),t._v(" 存在于普通文本中。我们看循环内第一句执行的代码，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("next "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" rest"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("indexOf")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'<'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们知道此时 "),a("code",[t._v("rest")]),t._v(" 的值为 "),a("code",[t._v("<1<2")]),t._v("，所以上面代码的作用是寻找下一个符号 "),a("code",[t._v("<")]),t._v(" 的位置，并将位置索引存储在 "),a("code",[t._v("next")]),t._v(" 变量中。由于字符串 "),a("code",[t._v("rest")]),t._v(" 的值为 "),a("code",[t._v("<1<2")]),t._v("，所以 "),a("code",[t._v("next")]),t._v(" 值将会为 "),a("code",[t._v("3")]),t._v("，它指向字符串 "),a("code",[t._v("rest")]),t._v(" 第二个 "),a("code",[t._v("<")]),t._v(" 符号的位置。接着将会执行如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("next "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("\ntextEnd "),a("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" next\nrest "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("textEnd"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("由于 "),a("code",[t._v("next")]),t._v(" 值为 "),a("code",[t._v("3")]),t._v(" 不小于 "),a("code",[t._v("0")]),t._v("，所以代码会继续执行，可以看到这句代码："),a("code",[t._v("textEnd += next")]),t._v("，更新了 "),a("code",[t._v("textEnd")]),t._v(" 的值，更新后的 "),a("code",[t._v("textEnd")]),t._v(" 的值将是第二个 "),a("code",[t._v("<")]),t._v(" 符号的索引，之后又使用新的 "),a("code",[t._v("textEnd")]),t._v(" 对原始字符串 "),a("code",[t._v("html")]),t._v(" 进行截取，并将新截取的字符串赋值给 "),a("code",[t._v("rest")]),t._v(" 变量，如此往复直到遇到一个能够成功匹配标签的 "),a("code",[t._v("<")]),t._v(" 符号为止，或者当再也遇不到下一个 "),a("code",[t._v("<")]),t._v(" 符号时，"),a("code",[t._v("while")]),t._v(" 循环会 "),a("code",[t._v("break")]),t._v("，此时循环也会终止。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("text "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("substring")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" textEnd"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("advance")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("textEnd"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果字符串 "),a("code",[t._v("html")]),t._v(" 为 "),a("code",[t._v("0<1<2")]),t._v("，我们知道此时 "),a("code",[t._v("textEnd")]),t._v(" 保存着字符串中第二个 "),a("code",[t._v("<")]),t._v(" 符号的位置索引，所以当循环终止时变量 "),a("code",[t._v("text")]),t._v(" 的值将是 "),a("code",[t._v("0<1")]),t._v("，接着调用 "),a("code",[t._v("advance")]),t._v(" 函数。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("textEnd "),a("span",{attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("textEnd "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"highlighted-line"}},[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("chars "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("chars")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[a("span",{attrs:{class:"token punctuation"}},[t._v("}")])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("根据上例，此时 "),s("code",[this._v("text")]),this._v(" 的值为字符串 "),s("code",[this._v("0<1")]),this._v("，所以这部分字符串将被作为普通字符串处理，如果 "),s("code",[this._v("options.chars")]),this._v(" 存在，则会调用该钩子函数并将字符串传递过去。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("大家也许注意到了，原始的 "),a("code",[t._v("html")]),t._v(" 被分拆为两部分，其中一部分为 "),a("code",[t._v("0<1")]),t._v("，这部分被作为普通文本对待，那么剩余的字符串 "),a("code",[t._v("<2")]),t._v(" 呢？这部分字符串将会在下一次整体的 "),a("code",[t._v("while")]),t._v(" 循环处理，此时由于 "),a("code",[t._v("html")]),t._v(" 字符串的值将被更新为 "),a("code",[t._v("<2")]),t._v("，第一个字符为 "),a("code",[t._v("<")]),t._v("，所以该字符的索引为 "),a("code",[t._v("0")]),t._v("，这时既会匹配 "),a("code",[t._v("textEnd")]),t._v(" 等于 "),a("code",[t._v("0")]),t._v(" 的情况，也会匹配 "),a("code",[t._v("textEnd")]),t._v(" 大于等于 "),a("code",[t._v("0")]),t._v(" 的情况，但是由于字符串 "),a("code",[t._v("<2")]),t._v(" 既不能匹配标签，也不会被 "),a("code",[t._v("textEnd")]),t._v(" 大于等于 "),a("code",[t._v("0")]),t._v(" 的 "),a("code",[t._v("if")]),t._v(" 语句块处理，所以代码最终会来到这里：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" last"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("chars "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("chars")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("warn"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`Mal-formatted tag at end of template: "')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("html"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('"`')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("break")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这是整体的 "),a("code",[t._v("while")]),t._v(" 循环的最后一段代码，由于字符串 "),a("code",[t._v("html")]),t._v(" (它的值为 "),a("code",[t._v("<2")]),t._v(")没有被处理，所以当程序运行到如上这段代码时，条件 "),a("code",[t._v("html === last")]),t._v(" 将会成立，所以如上这段 "),a("code",[t._v("if")]),t._v(" 语句块的代码将被执行，可以看到在 "),a("code",[t._v("if")]),t._v(" 语句块内，执行调用了 "),a("code",[t._v("options.chars")]),t._v(" 并将整个 "),a("code",[t._v("html")]),t._v(" 字符串作为普通字符串处理，换句话说最终字符串 "),a("code",[t._v("<2")]),t._v(" 也会作为普通字符串处理。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("stack"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("warn"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`Mal-formatted tag at end of template: "')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("html"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('"`')])]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码的作用是什么呢？我们想象一下什么情况下会使这段 "),a("code",[t._v("if")]),t._v(" 语句的条件成立，关键在于第二个条件："),a("code",[t._v("!stack.length")]),t._v("，"),a("code",[t._v("stack")]),t._v(" 栈为空代表着标签被处理完毕了，但此时仍然有剩余的字符串未处理，举例子假设 "),a("code",[t._v("html")]),t._v(" 字符串为："),a("code",[t._v("<div></div><a")]),t._v("，在解析这个字符串时首先会成功解析 "),a("code",[t._v("div")]),t._v(" 的开始标签，此时 "),a("code",[t._v("stack")]),t._v(" 栈中将存有 "),a("code",[t._v("div")]),t._v(" 的开始标签，接着会成功解析 "),a("code",[t._v("div")]),t._v(" 的结束标签，此时 "),a("code",[t._v("stack")]),t._v(" 栈会被清空，接着会解析剩余的字符串 "),a("code",[t._v("<a")]),t._v("，此时由于 "),a("code",[t._v("stack")]),t._v(" 栈被清空了，所以将满足上面 "),a("code",[t._v("if")]),t._v(" 语句的判断条件。这时会打印警告信息，提示你 "),a("code",[t._v("html")]),t._v(" 字符串的结尾不符合标签格式，很显然字符串 "),a("code",[t._v("<div></div><a")]),t._v(" 是不合法的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"textend-小于-0-的情况"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#textend-小于-0-的情况","aria-hidden":"true"}},[this._v("#")]),this._v(" textEnd 小于 0 的情况")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("对于 "),s("code",[this._v("textEnd")]),this._v(" 小于 "),s("code",[this._v("0")]),this._v(" 的情况，处理方式很简单：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("textEnd "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  text "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html\n  html "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("就将整个 "),s("code",[this._v("html")]),this._v(" 字符串作为文本处理就好了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"对纯文本元素的处理"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#对纯文本元素的处理","aria-hidden":"true"}},[this._v("#")]),this._v(" 对纯文本元素的处理")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们再来看一下整体的 "),s("code",[this._v("while")]),this._v(" 循环，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("while")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("html"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  last "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("lastTag "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token function"}},[t._v("isPlainTextElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在这个 "),a("code",[t._v("while")]),t._v(" 循环内有一个 "),a("code",[t._v("if...else")]),t._v(" 语句块，代码被该 "),a("code",[t._v("if...else")]),t._v(" 语句块分为两部分处理，前面我们所讲的都是 "),a("code",[t._v("if")]),t._v(" 语句块内的代码，我们知道 "),a("code",[t._v("else")]),t._v(" 语句块的代码只有当 "),a("code",[t._v("lastTag")]),t._v(" 存在并且 "),a("code",[t._v("lastTag")]),t._v(" 为纯文本标签是才会被执行，所以可想而知 "),a("code",[t._v("else")]),t._v(" 语句块的代码就是用来处理纯文本标签内的内容的，什么是纯文本标签呢？根据 "),a("code",[t._v("isPlainTextElement")]),t._v(" 函数可知纯文本标签包括 "),a("code",[t._v("script")]),t._v(" 标签、"),a("code",[t._v("style")]),t._v(" 标签以及 "),a("code",[t._v("textarea")]),t._v(" 标签。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("下面我们就看一下它是如何处理纯文本标签的内容的，首先我们要明确的一点是 "),s("code",[this._v("else")]),this._v(" 分支的代码处理的是纯文本标签的"),s("strong",[this._v("内容")]),this._v("，并不是纯文本标签。假设我们的 "),s("code",[this._v("html")]),this._v(" 字符串如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("html "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token string"}},[this._v("'<textarea>aaaabbbb</textarea>'")]),this._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("该字符串是一个 "),a("code",[t._v("textarea")]),t._v(" 标签并包含了一些文本，在解析这段字符串的时候首先会遇到开始标签 "),a("code",[t._v("<textarea>")]),t._v("，该标签会被正常处理，并且我们知道此时 "),a("code",[t._v("lastTag")]),t._v(" 变量的值将被设置为 "),a("code",[t._v("textarea")]),t._v("，之后 "),a("code",[t._v("html")]),t._v(" 字符串将变为 "),a("code",[t._v("aaaabbbb</textarea>")]),t._v("，接着以新的 "),a("code",[t._v("html")]),t._v(" 字符串重新执行 "),a("code",[t._v("while")]),t._v(" 循环，此时当遇到如下 "),a("code",[t._v("if")]),t._v(" 语句块时：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("lastTag "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token function"}},[t._v("isPlainTextElement")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("lastTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 省略...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("由于 "),a("code",[t._v("lastTag")]),t._v(" 的值为 "),a("code",[t._v("textarea")]),t._v("，并且 "),a("code",[t._v("textarea")]),t._v(" 标签为纯文本标签，所以会执行 "),a("code",[t._v("else")]),t._v(" 分支的代码。在 "),a("code",[t._v("else")]),t._v(" 语句块内首先定义了一个变量和两个常量，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" endTagLength "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" stackedTag "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" lastTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("toLowerCase")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" reStackedTag "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" reCache"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stackedTag"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reCache"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("stackedTag"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'([\\\\s\\\\S]*?)(</'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" stackedTag "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'[^>]*>)'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'i'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("变量 "),a("code",[t._v("endTagLength")]),t._v(" 的初始值为 "),a("code",[t._v("0")]),t._v("，后面我们会看到 "),a("code",[t._v("endTagLength")]),t._v(" 变量用来保存纯文本标签闭合标签的字符长度。"),a("code",[t._v("stackedTag")]),t._v(" 常量的值为纯文本标签的小写版，"),a("code",[t._v("reStackedTag")]),t._v(" 常量稍微复杂一些，它的值是一个正则表达式实例，并且使用 "),a("code",[t._v("reCache[stackedTag]")]),t._v(" 做了缓存，我们看下一啊 "),a("code",[t._v("reStackedTag")]),t._v(" 正则的作用是什么，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'([\\\\s\\\\S]*?)(</'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" stackedTag "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'[^>]*>)'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'i'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("该正则表达式中使用到了 "),a("code",[t._v("stackedTag")]),t._v(" 常量，我们假设纯文本标签是 "),a("code",[t._v("textarea")]),t._v("，那么 "),a("code",[t._v("stackedTag")]),t._v(" 常量的值也应该是 "),a("code",[t._v("textarea")]),t._v("，所以此时正则表达式应该为：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("RegExp")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'([\\\\s\\\\S]*?)(</textarea[^>]*>)'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'i'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("该正则表达式由两个分组组成，我们先看第一个分组，"),a("code",[t._v("\\s")]),t._v(" 用来匹配空白符，而 "),a("code",[t._v("\\S")]),t._v(" 则用来匹配非空白符，由于二者同时存在于中括号("),a("code",[t._v("[]")]),t._v(")中，所以它匹配的是二者的并集，也就是字符全集，大家注意中括号后面的 "),a("code",[t._v("*?")]),t._v("，其代表懒惰模式，也就是说只要第二个分组的内容匹配成功就立刻停止匹配。可以发现第一个分组的内容用来匹配纯文本标签的内容。第二个分组很简单它用来匹配纯文本标签的结束标签。总的来说正则 "),a("code",[t._v("reStackedTag")]),t._v(" 的作用是用来匹配纯文本标签的内容以及结束标签的。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" rest "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("replace")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("reStackedTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("all"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" text"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" endTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  endTagLength "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" endTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("shouldIgnoreFirstNewline")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stackedTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    text "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" text"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("chars"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("chars")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("''")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码使用正则 "),a("code",[t._v("reStackedTag")]),t._v(" 匹配字符串 "),a("code",[t._v("html")]),t._v(" 并将其替换为空字符串，我们可以注意到 "),a("code",[t._v("replace")]),t._v(" 函数的回调函数返回值为空字符串。还是拿前面的例子，此时 "),a("code",[t._v("html")]),t._v(" 的值为字符串 "),a("code",[t._v("aaaabbbb</textarea>")]),t._v("，可以看到该字符串将被 "),a("code",[t._v("reStackedTag")]),t._v(" 正则完全匹配，并将其替换为空字符串，所以最终 "),a("code",[t._v("rest")]),t._v(" 常量的值就为空字符串。但是假如 "),a("code",[t._v("html")]),t._v(" 字符串为 "),a("code",[t._v("aaaabbbb</textarea>ddd")]),t._v("，我们发现在 "),a("code",[t._v("</textarea>")]),t._v(" 标签的后面还有三个字符 "),a("code",[t._v("ddd")]),t._v("，如果这个字符串使用 "),a("code",[t._v("reStackedTag")]),t._v(" 进行匹配替换，可知常量 "),a("code",[t._v("rest")]),t._v(" 的值将是字符串 "),a("code",[t._v("ddd")]),t._v("，总之常量 "),a("code",[t._v("rest")]),t._v(" 将保存剩余的字符。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("接下来我们看一下 "),a("code",[t._v("replace")]),t._v(" 函数的回调函数内的代码，回调函数接收三个参数，其中参数 "),a("code",[t._v("all")]),t._v(" 保存着整个匹配的字符串，即："),a("code",[t._v("aaaabbbb</textarea>")]),t._v("。参数 "),a("code",[t._v("text")]),t._v(" 为第一个捕获组的值，也就是纯文本标签的内容，即："),a("code",[t._v("aaaabbbb")]),t._v("。参数 "),a("code",[t._v("endTag")]),t._v(" 保存着结束标签，即："),a("code",[t._v("</textarea>")]),t._v("。在回调函数内部，首先使用结束标签的字符长度更新了 "),a("code",[t._v("endTagLength")]),t._v(" 的值，然后执行了一个 "),a("code",[t._v("if")]),t._v(" 语句块，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("shouldIgnoreFirstNewline")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stackedTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  text "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" text"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("slice")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token number"}},[t._v("1")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们前面遇到过类似的 "),a("code",[t._v("if")]),t._v(" 语句块，其作用是忽略 "),a("code",[t._v("<pre>")]),t._v(" 标签和 "),a("code",[t._v("<textarea>")]),t._v(" 标签的内容中的第一个换行符。在这段 "),a("code",[t._v("if")]),t._v(" 语句块的下面是如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("chars"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("chars")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("回过头来继续看 "),s("code",[this._v("else")]),this._v(" 分支的代码，如下是 "),s("code",[this._v("else")]),this._v(" 语句块最后的几句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("index "),a("span",{attrs:{class:"token operator"}},[t._v("+=")]),t._v(" html"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" rest"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length\nhtml "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" rest\n"),a("span",{attrs:{class:"token function"}},[t._v("parseEndTag")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("stackedTag"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index "),a("span",{attrs:{class:"token operator"}},[t._v("-")]),t._v(" endTagLength"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" index"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面的代码中，首先跟新 "),a("code",[t._v("index")]),t._v(" 的值，用 "),a("code",[t._v("html")]),t._v(" 原始字符串的值减去 "),a("code",[t._v("rest")]),t._v(" 字符串的长度，我们知道 "),a("code",[t._v("rest")]),t._v(" 常量保存着剩余的字符串，所以二者的差就是被替换掉的那部分字符串的字符数。接着将 "),a("code",[t._v("rest")]),t._v(" 常量的值赋值给 "),a("code",[t._v("html")]),t._v("，所以如果有剩余的字符串的话，它们将在下一次 "),a("code",[t._v("while")]),t._v(" 循环被处理，最后调用 "),a("code",[t._v("parseEndTag")]),t._v(" 函数解析纯文本标签的结束标签，这样就大功告成了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"parsehtml-的使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#parsehtml-的使用","aria-hidden":"true"}},[this._v("#")]),this._v(" parseHTML 的使用")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("以上对于整个词法分析的过程我们就讲解完毕了，我们发现其实现方式就是通过读取字符流配合正则一点一点的解析字符串，直到整个字符串都被解析完毕为止。并且每当遇到一个特定的 "),a("code",[t._v("token")]),t._v(" 时都会调用相应的钩子函数，同时将有用的参数传递过去。比如每当遇到一个开始标签都会调用 "),a("code",[t._v("options.start")]),t._v(" 钩子函数，并传递给该钩子五个参数，所以我们可以像如下这样使用 "),a("code",[t._v("html-parser.js")]),t._v(" 文件中的 "),a("code",[t._v("parseHTML")]),t._v(" 函数：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" parseHTML "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'./html-parser'")]),t._v("\n\n"),a("span",{attrs:{class:"token function"}},[t._v("parseHTML")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("templateString"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// ...其他选项参数")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("start")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'tagName: '")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'attrs: '")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'unary: '")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'start: '")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'end: '")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上面的代码中我们调用了 "),s("code",[this._v("parseHTML")]),this._v(" 函数，并传递了两个参数，分别是模板字符串 "),s("code",[this._v("templateString")]),this._v(" 以及一些选项参数，并且这些选项参数中包含 "),s("code",[this._v("start")]),this._v(" 钩子函数，假如我们的模板字符串如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("templateString "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" "),s("span",{attrs:{class:"token string"}},[this._v('\'<div v-for="item of list" @click="handleClick">普通文本</div>\'')]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么 "),s("code",[this._v("start")]),this._v(" 钩子函数将被调用，其 "),s("code",[this._v("console.log")]),this._v(" 语句将得到如下输出：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("tagName")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("它的值为开始标签的的名字："),s("code",[this._v("'div'")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("attrs")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'v-for'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'item of list'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'@click'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'handleClick'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("unary")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("它是一个布尔值，代表该标签是否是一元标签，由于 "),s("code",[this._v("div")]),this._v(" 标签是非一元标签，所以 "),s("code",[this._v("unary")]),this._v(" 的值将为 "),s("code",[this._v("false")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("start")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("它的值为开始标签第一个字符在整个模板字符串中的位置，所以是 "),s("code",[this._v("0")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("end")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("注意，"),s("code",[this._v("end")]),this._v(" 的值为开始标签最后一个字符在整个模板字符串中的位置加 "),s("code",[this._v("1")]),this._v("，所以是 "),s("code",[this._v("47")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("同样的，如果我们在调用 "),s("code",[this._v("parseHTML")]),this._v(" 函数时传递了 "),s("code",[this._v("end")]),this._v(" 钩子函数，该函数同样会被调用：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseHTML")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("templateString"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// ...其他选项参数")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("start")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("end")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'tagName: '")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'start: '")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'end: '")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("end")]),this._v(" 钩子函数会得到三个参数：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("tagName")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("它的值为结束标签的名字："),s("code",[this._v("'div'")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("start")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("它的值为结束标签在整个模板字符串中的位置，所以是："),s("code",[this._v("51")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("end")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("它的值同样是结束标签最后一个字符在整个模板字符串中的位置加 "),s("code",[this._v("1")]),this._v("，所以是："),s("code",[this._v("57")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("另外我们的 "),a("code",[t._v("templateString")]),t._v(" 模板字符串中的 "),a("code",[t._v("div")]),t._v(" 标签中包含一段普通文本，所以如果我们在调用 "),a("code",[t._v("parseHTML")]),t._v(" 时传递了 "),a("code",[t._v("chars")]),t._v(" 钩子函数，那么 "),a("code",[t._v("chars")]),t._v(" 钩子函数也将会被调用：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseHTML")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("templateString"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// ...其他选项参数")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("start")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("end")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("chars")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'text: '")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("chars")]),this._v(" 钩子函数只接收一个参数，即文本内容：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("text")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("它的值为："),s("code",[this._v("'普通文本'")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后如果你的模板字符串中包含注释节点，那么在调用 "),s("code",[this._v("parseHTML")]),this._v(" 函数时可以传递 "),s("code",[this._v("comment")]),this._v(" 钩子函数：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("parseHTML")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("templateString"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// ...其他选项参数")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("start")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" attrs"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" unary"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("end")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tagName"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" start"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" end"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("chars")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token function"}},[t._v("comment")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'text: '")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" text"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")])]),a("span",{attrs:{class:"highlighted-line"}},[t._v("  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("comment")]),this._v(" 钩子函数也接收一个参数，该参数的值为注释节点的内容。")])}],!1,null,null,null);s.default=e.exports}}]);