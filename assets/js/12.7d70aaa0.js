(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{71:function(t,s,n){"use strict";n.r(s);var a=n(0),e=Object(a.a)({},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("div",{staticClass:"content"},[t._m(0),t._m(1),t._m(2),t._m(3),t._m(4),t._m(5),t._m(6),t._m(7),t._m(8),t._m(9),t._m(10),t._m(11),t._m(12),t._m(13),t._m(14),t._m(15),t._m(16),t._m(17),t._m(18),t._m(19),t._m(20),t._m(21),t._m(22),t._m(23),t._m(24),t._m(25),t._m(26),t._m(27),t._m(28),t._m(29),t._m(30),t._m(31),t._m(32),t._m(33),t._m(34),t._m(35),t._m(36),t._m(37),t._m(38),n("p",[t._v("其中 "),n("code",[t._v("shouldDecodeNewlines")]),t._v(" 和 "),n("code",[t._v("shouldDecodeNewlinesForHref")]),t._v(" 这两个变量来自于 "),n("code",[t._v("platforms/web/util/compat.js")]),t._v(" 文件，大家可以在附录 "),n("router-link",{attrs:{to:"../appendix/web-util.html"}},[t._v("platforms/web/util 目录下的工具方法全解")]),t._v(" 中查看这两个变量的作用，其目的是对浏览器的怪癖做兼容，具体在附录中都有讲到，并且这两个变量的类型都是布尔值。")],1),t._m(39),t._m(40),t._m(41),t._m(42),t._m(43),t._m(44),n("p",[t._v("接下来是这段代码：")]),t._m(45),t._m(46),t._m(47),t._m(48),n("p",[t._v("接下来是这段代码：")]),t._m(49),t._m(50),t._m(51),t._m(52),t._m(53),t._m(54),t._m(55),n("p",[t._v("接下来是这句代码：")]),t._m(56),t._m(57),t._m(58),t._m(59),t._m(60),t._m(61),t._m(62),t._m(63),t._m(64),t._m(65),n("p",[t._v("再往下是这样一段代码：")]),t._m(66),t._m(67),t._m(68),t._m(69),t._m(70),t._m(71),t._m(72),t._m(73),t._m(74),t._m(75),t._m(76),t._m(77),t._m(78),t._m(79),t._m(80),t._m(81),t._m(82),t._m(83),t._m(84),t._m(85),t._m(86),n("p",[t._v("其中 "),n("code",[t._v("warn")]),t._v(" 属性被 "),n("code",[t._v("delete")]),t._v(" 操作符删除。这里只是给大家做一个简短的回顾，并且我们对 "),n("code",[t._v("Vue")]),t._v(" 的编译器所接收的参数进行归纳，并整理了附录 "),n("router-link",{attrs:{to:"../appendix/compiler-options.html"}},[t._v("编译器选项整理")]),t._v("，后面遇到的任何编译器选项都会整理到该附录里，大家可以在这里查阅 "),n("code",[t._v("Vue")]),t._v(" 编译器所接收的选项。")],1),t._m(87),t._m(88),t._m(89),t._m(90),t._m(91),t._m(92),t._m(93),t._m(94),t._m(95),n("p",[t._v("对象如下：")]),t._m(96),t._m(97),t._m(98),t._m(99),t._m(100),t._m(101),t._m(102),t._m(103),t._m(104),t._m(105),t._m(106),t._m(107),t._m(108),n("p",[t._v("它是一个包含三个属性的对象，且属性的值都是函数。")]),n("p",[n("code",[t._v("baseOptions")]),t._v(" 的第四个属性是 "),n("code",[t._v("isPreTag")]),t._v("，它是一个函数，可以在附录 "),n("router-link",{attrs:{to:"../appendix/web-util.html"}},[t._v("platforms/web/util 目录下的工具方法全解")]),t._v(" 中查看其实现讲解，其作用是通过给定的标签名字检查标签是否是 "),n("code",[t._v("'pre'")]),t._v(" 标签。")],1),t._m(109),t._m(110),t._m(111),n("p",[n("code",[t._v("baseOptions")]),t._v(" 的第六个属性是 "),n("code",[t._v("mustUseProp")]),t._v("，它是一个函数，可以在附录 "),n("router-link",{attrs:{to:"../appendix/web-util.html"}},[t._v("platforms/web/util 目录下的工具方法全解")]),t._v(" 中查看其实现讲解，其作用是用来检测一个属性在标签中是否要使用 "),n("code",[t._v("props")]),t._v(" 进行绑定。")],1),t._m(112),t._m(113),t._m(114),n("p",[n("code",[t._v("baseOptions")]),t._v(" 的第八个属性是 "),n("code",[t._v("isReservedTag")]),t._v("，它是一个函数，可以在附录 "),n("router-link",{attrs:{to:"../appendix/web-util.html"}},[t._v("platforms/web/util 目录下的工具方法全解")]),t._v(" 中查看其实现讲解，其作用是检查给定的标签是否是保留的标签。")],1),n("p",[n("code",[t._v("baseOptions")]),t._v(" 的第九个属性是 "),n("code",[t._v("getTagNamespace")]),t._v("，它也是一个函数，同样可以在附录 "),n("router-link",{attrs:{to:"../appendix/web-util.html"}},[t._v("platforms/web/util 目录下的工具方法全解")]),t._v(" 中查看其实现讲解，其作用是获取元素(标签)的命名空间。")],1),n("p",[n("code",[t._v("baseOptions")]),t._v(" 的第十个属性是 "),n("code",[t._v("staticKeys")]),t._v("，它的值是通过以 "),n("code",[t._v("modules")]),t._v(" 为参数调用 "),n("code",[t._v("genStaticKeys")]),t._v(" 函数的返回值得到的。其中 "),n("code",[t._v("modules")]),t._v(" 就是 "),n("code",[t._v("baseOptions")]),t._v(" 的第二个属性，而 "),n("code",[t._v("genStaticKeys")]),t._v(" 来自于 "),n("code",[t._v("src/shared/util.js")]),t._v(" 文件，大家可以在附录 "),n("router-link",{attrs:{to:"../appendix/shared-util.html"}},[t._v("shared/util.js 文件工具方法全解")]),t._v(" 中查看该函数的讲解，其作用是根据编译器选项的 "),n("code",[t._v("modules")]),t._v(" 选项生成一个静态键字符串。")],1),t._m(115),t._m(116),t._m(117),n("p",[t._v("在这之后，是这样一段代码：")]),t._m(118),t._m(119),n("p",[t._v("再往下，是这段代码：")]),t._m(120),t._m(121),t._m(122),t._m(123),t._m(124),t._m(125),t._m(126),t._m(127),t._m(128),t._m(129),t._m(130),t._m(131),t._m(132),t._m(133),t._m(134),t._m(135),t._m(136),t._m(137),n("p",[t._v("最后的一段代码如下：")]),t._m(138),t._m(139),t._m(140),t._m(141)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"vue-的编译器初探"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-的编译器初探","aria-hidden":"true"}},[this._v("#")]),this._v(" Vue 的编译器初探")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("至此，我们对 "),s("code",[this._v("Vue.prototype._init")]),this._v(" 方法所做的初始化工作基本全部讲解到了，在讲解渲染函数的观察者时，我们也讲解了渲染函数是如何生成的以及渲染函数的作用。接下来我们将开启新的篇章，即看一看渲染函数是如何通过编译器生成的。我们打开 "),s("code",[this._v("src/platforms/web/entry-runtime-with-compiler.js")]),this._v(" 文件，找到 "),s("code",[this._v("$mount")]),this._v(" 方法，该方法中有这样一段代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" render"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" staticRenderFns "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("compileToFunctions")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  shouldDecodeNewlines"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  shouldDecodeNewlinesForHref"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  delimiters"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("delimiters"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  comments"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("comments\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("this")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\noptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("render "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" render\noptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticRenderFns "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" staticRenderFns\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("我们知道渲染函数 "),n("code",[t._v("render")]),t._v(" 就是通过 "),n("code",[t._v("compileToFunctions")]),t._v(" 函数生成的，传递给该函数的第一个参数就是模板字符串，"),n("code",[t._v("compileToFunctions")]),t._v(" 函数会把模板字符串编译为渲染函数，本章的内容将以 "),n("code",[t._v("compileToFunctions")]),t._v(" 函数为切入点研究编译器。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"寻找-compiletofunctions"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#寻找-compiletofunctions","aria-hidden":"true"}},[this._v("#")]),this._v(" 寻找 compileToFunctions")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("接下来我们的主要工作，就是搞清楚 "),n("code",[t._v("compileToFunctions")]),t._v(" 函数，根据 "),n("code",[t._v("platforms/web/entry-runtime-with-compiler.js")]),t._v(" 文件头部的 "),n("code",[t._v("import")]),t._v(" 引用关系可知，"),n("code",[t._v("compileToFunctions")]),t._v(" 函数来自于当前目录下的 "),n("code",[t._v("./compiler/index.js")]),t._v(" 文件，打开 "),n("code",[t._v("./compiler/index.js")]),t._v(" 文件，可以发现这样一句代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" compile"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" compileToFunctions "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompiler")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("baseOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上面的代码中 "),s("code",[this._v("compileToFunctions")]),this._v(" 函数是从 "),s("code",[this._v("createCompiler")]),this._v(" 函数的返回值中解构出来的。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("由此可知 "),n("code",[t._v("compileToFunctions")]),t._v(" 函数是通过以 "),n("code",[t._v("baseOptions")]),t._v(" 为参数调用 "),n("code",[t._v("createCompiler")]),t._v(" 函数创建出来的。"),n("code",[t._v("createCompiler")]),t._v(" 函数顾名思义他的作用就是创建一个编译器，那么到底是怎么创建出来的呢？想搞清楚这个问题我们就需要具体看一下 "),n("code",[t._v("createCompiler")]),t._v(" 函数了，根据引用关系可知 "),n("code",[t._v("createCompiler")]),t._v(" 函数来自于 "),n("code",[t._v("compiler/index.js")]),t._v(" 文件，注意这里的 "),n("code",[t._v("compiler/index.js")]),t._v(" 可不是 "),n("code",[t._v("./compiler/index.js")]),t._v("，这里的 "),n("code",[t._v("compiler/index.js")]),t._v(" 指的是 "),n("code",[t._v("src/compiler/index.js")]),t._v(" 文件，我们打开这个文件看一下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("/* @flow */")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" parse "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'./parser/index'")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" optimize "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'./optimizer'")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" generate "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'./codegen/index'")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" createCompilerCreator "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'./create-compiler'")]),t._v("\n\n"),n("span",{attrs:{class:"token comment"}},[t._v("// `createCompilerCreator` allows creating compilers that use alternative")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// parser/optimizer/codegen, e.g the SSR optimizing compiler.")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// Here we just export a default compiler using the default parts.")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" createCompiler "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompilerCreator")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("baseCompile")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  template"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  options"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions\n"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompiledResult "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ast "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("parse")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("trim")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("optimize")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" code "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("generate")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ast"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    render"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" code"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("render"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    staticRenderFns"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" code"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticRenderFns\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("以上是 "),n("code",[t._v("src/compiler/index.js")]),t._v(" 文件的全部代码，可知这个文件唯一的作用就是导出一个函数，即 "),n("code",[t._v("createCompiler")]),t._v(" 函数，该函数就是用来创建编译器的，或者我们可以称该函数为 "),n("code",[t._v("编译器的创建者")]),t._v("。那么 "),n("code",[t._v("createCompiler")]),t._v(" 函数的内容是什么呢？仔细查看代码，我们发现 "),n("code",[t._v("createCompiler")]),t._v(" 函数也是通过一个函数创建出来的，这个函数就是 "),n("code",[t._v("createCompilerCreator")]),t._v("，并且传递了 "),n("code",[t._v("baseCompile")]),t._v(" 函数作为参数。也就说 "),n("code",[t._v("createCompiler")]),t._v(" 函数的内容是 "),n("code",[t._v("createCompilerCreator")]),t._v(" 函数的返回值，其实这么看的话我们倒是可以把 "),n("code",[t._v("createCompilerCreator")]),t._v(" 函数称作 "),n("code",[t._v("'编译器创建者' 的创建者")]),t._v("，我们整理一下思路如下图：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"http://ovjvjtt4l.bkt.clouddn.com/2017-11-09-073724.jpg",alt:""}})])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("接下来我们需要看一看 "),n("code",[t._v("'编译器创建者' 的 创建者")]),t._v(" 是怎么创建出编译器创建者的，也就是 "),n("code",[t._v("createCompilerCreator")]),t._v(" 函数的内容，该函数来自于 "),n("code",[t._v("create-compiler.js")]),t._v(" 文件，打开该文件找到 "),n("code",[t._v("createCompilerCreator")]),t._v(" 函数如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("/* @flow */")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" extend "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'shared/util'")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" detectErrors "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'./error-detector'")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" createCompileToFunctionFn "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'./to-function'")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompilerCreator")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("baseCompile"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Function"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Function "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompiler")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("baseOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("以上代码是 "),n("code",[t._v("create-compiler.js")]),t._v(" 文件的全部内容，只不过做了简化，去掉了 "),n("code",[t._v("createCompiler")]),t._v(" 函数的函数体。我们可以发现 "),n("code",[t._v("createCompilerCreator")]),t._v(" 函数直接返回了 "),n("code",[t._v("createCompiler")]),t._v(" 函数，而这个函数就是我们所说的 "),n("code",[t._v("编译器的创建者")]),t._v("。那么传递给 "),n("code",[t._v("createCompilerCreator")]),t._v(" 函数的参数 "),n("code",[t._v("baseCompile")]),t._v(" 在哪里调用的呢？肯定是在 "),n("code",[t._v("createCompiler")]),t._v(" 函数体内调用的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在我们再回到 "),s("code",[this._v("src/compiler/index.js")]),this._v(" 文件，再次查看如下代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// `createCompilerCreator` allows creating compilers that use alternative")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// parser/optimizer/codegen, e.g the SSR optimizing compiler.")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// Here we just export a default compiler using the default parts.")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" createCompiler "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompilerCreator")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("baseCompile")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  template"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  options"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions\n"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompiledResult "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ast "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("parse")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("trim")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("optimize")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" code "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("generate")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ast"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    render"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" code"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("render"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    staticRenderFns"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" code"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticRenderFns\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("我们已经知道一件事，那就是这里的 "),n("code",[t._v("createCompiler")]),t._v(" 就是 "),n("code",[t._v("createCompilerCreator")]),t._v(" 函数的返回值，也就是 "),n("code",[t._v("src/compiler/create-compiler.js")]),t._v(" 文件内的 "),n("code",[t._v("createCompiler")]),t._v(" 函数：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompilerCreator")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("baseCompile"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Function"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Function "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 也就是这个 createCompiler 函数")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompiler")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("baseOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么现在再看 "),s("code",[this._v("platforms/web/compiler/index.js")]),this._v(" 文件下的这句代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" compile"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" compileToFunctions "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompiler")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("baseOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("其实这里调用的 "),n("code",[t._v("createCompiler")]),t._v(" 也就是 "),n("code",[t._v("src/compiler/create-compiler.js")]),t._v(" 文件的 "),n("code",[t._v("createCompiler")]),t._v(" 函数。我们查看一下  "),n("code",[t._v("src/compiler/create-compiler.js")]),t._v(" 文件的 "),n("code",[t._v("createCompiler")]),t._v(" 函数如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompilerCreator")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("baseCompile"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Function"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Function "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompiler")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("baseOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("compile")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      template"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      options"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompiledResult "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      compile"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      compileToFunctions"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompileToFunctionFn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("compile"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以发现 "),s("code",[this._v("createCompiler")]),this._v(" 函数的返回值就是一个包含 "),s("code",[this._v("compileToFunctions")]),this._v(" 属性的对象：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  compile"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  compileToFunctions"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompileToFunctionFn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("compile"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("而这里的 "),s("code",[this._v("compileToFunctions")]),this._v(" 属性就是 "),s("code",[this._v("platforms/web/compiler/index.js")]),this._v(" 文件中解构出来的 "),s("code",[this._v("compileToFunctions")]),this._v("：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// 这里通过 createCompiler 函数的返回值解构出 compileToFunctions")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" compile"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" compileToFunctions "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompiler")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("baseOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("所以上面代码中执行的 "),n("code",[t._v("createCompiler")]),t._v(" 函数实际上就是 "),n("code",[t._v("compiler/create-compiler.js")]),t._v(" 文件中的 "),n("code",[t._v("createCompiler")]),t._v(" 函数，该函数的返回值包含了真正的编译器 "),n("code",[t._v("compileToFunctions")]),t._v("，接下来我们就看看 "),n("code",[t._v("createCompiler")]),t._v(" 都做了什么，打开 "),n("code",[t._v("compiler/create-compiler.js")]),t._v(" 文件找到 "),n("code",[t._v("createCompiler")]),t._v(" 函数如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompilerCreator")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("baseCompile"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Function"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Function "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// createCompiler 函数作为 createCompilerCreator 函数的返回值")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompiler")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("baseOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// 定义 compile 函数")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("compile")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      template"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      options"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompiledResult "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token comment"}},[t._v("// ...")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// 返回 compile 和 compileToFunctions")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      compile"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      compileToFunctions"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompileToFunctionFn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("compile"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("从上面的代码可以看到 "),n("code",[t._v("createCompiler")]),t._v(" 函数的内容其实很简单，就是定义了 "),n("code",[t._v("compile")]),t._v(" 函数，然后返回一个对象，这个对象包含了 "),n("code",[t._v("compile")]),t._v(" 函数本身，同时包含了 "),n("code",[t._v("compileToFunctions")]),t._v(" 函数。这就是 "),n("code",[t._v("createCompiler")]),t._v(" 所做的内容，但是这就完了吗？还没有，因为我们发现 "),n("code",[t._v("compileToFunctions")]),t._v(" 这个函数是通过以 "),n("code",[t._v("compile")]),t._v(" 函数作为参数调用 "),n("code",[t._v("createCompileToFunctionFn")]),t._v(" 函数生成的，所以我们一直所说的 "),n("code",[t._v("compileToFunctions")]),t._v(" 函数其实准确的讲它应该是 "),n("code",[t._v("createCompileToFunctionFn")]),t._v(" 函数的返回值，那么我们看看 "),n("code",[t._v("createCompileToFunctionFn")]),t._v(" 函数都干了什么，根据引用关系可知 "),n("code",[t._v("createCompileToFunctionFn")]),t._v(" 函数在 "),n("code",[t._v("src/compiler/to-function.js")]),t._v(" 文件中，打开这个文件找到该函数：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompileToFunctionFn")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("compile"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Function"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Function "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cache "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("create")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("compileToFunctions")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    template"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    options"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    vm"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Component\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompiledFunctionResult "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("以上是 "),n("code",[t._v("createCompileToFunctionFn")]),t._v(" 函数的代码，我们发现这个函数的返回值是一个函数，该函数才是我们真正想要的 "),n("code",[t._v("compileToFunctions")]),t._v("，在返回这个函数之前定义了常量 "),n("code",[t._v("cache")]),t._v("，所以 "),n("code",[t._v("cache")]),t._v(" 常量肯定是被 "),n("code",[t._v("compileToFunctions")]),t._v(" 函数引用的，那么这里可以理解为创建了一个闭包，其实如果大家留意的话，在上面的讲解中我们已经遇到了很多利用闭包引用变量的场景，还是拿上面的代码为例，"),n("code",[t._v("createCompileToFunctionFn")]),t._v(" 函数接受一个参数 "),n("code",[t._v("compile")]),t._v("，而这个参数其实也是被 "),n("code",[t._v("compileToFunctions")]),t._v(" 闭包引用的。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("至此我们经历了一波三折，终于找到了 "),n("code",[t._v("compileToFunctions")]),t._v(" 函数，"),n("code",[t._v("/entry-runtime-with-compiler.js")]),t._v(" 文件中执行的 "),n("code",[t._v("compileToFunctions")]),t._v(" 函数，其实就是在执行 "),n("code",[t._v("src/compiler/to-function.js")]),t._v(" 文件中 "),n("code",[t._v("createCompileToFunctionFn")]),t._v(" 函数返回的 "),n("code",[t._v("compileToFunctions")]),t._v(" 函数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"compiletofunctions-的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compiletofunctions-的作用","aria-hidden":"true"}},[this._v("#")]),this._v(" compileToFunctions 的作用")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("经过前面的讲解，我们已经知道了 "),s("code",[this._v("entry-runtime-with-compiler.js")]),this._v(" 文件中调用的 "),s("code",[this._v("compileToFunctions")]),this._v(" 的真正来源，可以说为了创建 "),s("code",[this._v("compileToFunctions")]),this._v(" 函数经历了一波三折，现在大家也许会有疑问，比如为什么要弄的这么复杂？我们暂时把这个疑问放在心里，随着我们的深入，大家将会慢慢理解其内涵。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这个小节我们就以 "),s("code",[this._v("entry-runtime-with-compiler.js")]),this._v(" 文件中调用的 "),s("code",[this._v("compileToFunctions")]),this._v(" 开始，去探索其背后所做的事情。打开 "),s("code",[this._v("entry-runtime-with-compiler.js")]),this._v(" 文件找到这段代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" render"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" staticRenderFns "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("compileToFunctions")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  shouldDecodeNewlines"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  shouldDecodeNewlinesForHref"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  delimiters"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("delimiters"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  comments"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("comments\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("this")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("上面这段代码存在于 "),n("code",[t._v("Vue.prototype.$mount")]),t._v(" 函数体内，我们已经知道 "),n("code",[t._v("compileToFunctions")]),t._v(" 函数的作用是把传入的模板字符串("),n("code",[t._v("template")]),t._v(")编译成渲染函数("),n("code",[t._v("render")]),t._v(")的。所以传递给 "),n("code",[t._v("compileToFunctions")]),t._v(" 的第一个参数就是模板字符串("),n("code",[t._v("template")]),t._v(")，而第二个参数则是一些选项("),n("code",[t._v("options")]),t._v(")，接下来我们先把这里传递的选项对象搞清楚，选项对象如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  shouldDecodeNewlines"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  shouldDecodeNewlinesForHref"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  delimiters"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("delimiters"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  comments"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("comments\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("对于 "),n("code",[t._v("options.delimiters")]),t._v(" 和 "),n("code",[t._v("options.comments")]),t._v("，其中 "),n("code",[t._v("options")]),t._v(" 就是当前 "),n("code",[t._v("Vue")]),t._v(" 实例的 "),n("code",[t._v("$options")]),t._v(" 属性，并且 "),n("code",[t._v("delimiters")]),t._v(" 和 "),n("code",[t._v("comments")]),t._v(" 都是 "),n("code",[t._v("Vue")]),t._v(" 提供的选项。所以这里只是简单的将这两个选项透传了过去。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("另外 "),n("code",[t._v("delimiters")]),t._v(" 和 "),n("code",[t._v("comments")]),t._v(" 这两个选项大家在 "),n("code",[t._v("Vue")]),t._v(" 的官方文档都能够找到讲解。而这里我要强调的是在 "),n("code",[t._v("Vue")]),t._v(" 官方文档中有特殊说明，即这两个选项只在完整版的 "),n("code",[t._v("Vue")]),t._v(" 中可用。这是为什么呢？可能有的同学已经知道了，其原因是这两个选项只有在创建完整版 "),n("code",[t._v("Vue")]),t._v(" 的时候才会用到，大家不要忘了 "),n("code",[t._v("entry-runtime-with-compiler.js")]),t._v(" 这个文件是完整版 "),n("code",[t._v("Vue")]),t._v(" 的入口，也就是说运行时版的 "),n("code",[t._v("Vue")]),t._v(" 压根不存在这些内容所以自然不会起作用。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("现在我们知道了传递给 "),n("code",[t._v("compileToFunctions")]),t._v(" 的选项参数都包括些什么了，同时我们也知道这里的 "),n("code",[t._v("compileToFunctions")]),t._v(" 函数实际上就是 "),n("code",[t._v("src/compiler/to-function.js")]),t._v(" 文件中的 "),n("code",[t._v("compileToFunctions")]),t._v("，所以下一步我们将视线转移到 "),n("code",[t._v("src/compiler/to-function.js")]),t._v(" 文件中的 "),n("code",[t._v("compileToFunctions")]),t._v(" 函数，不过在这之前我还要啰嗦一句，大家注意 "),n("code",[t._v("compileToFunctions")]),t._v(" 函数是接收三个参数的，第三个参数是当前 "),n("code",[t._v("Vue")]),t._v(" 实例。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("打开 "),s("code",[this._v("src/compiler/to-function.js")]),this._v(" 文件，找到 "),s("code",[this._v("compileToFunctions")]),this._v(" 函数，首先是这三行代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// 使用 extend 函数将 options 的属性混合到新的对象中并重新赋值 options")]),t._v("\noptions "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("extend")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 检查选项参数中是否包含 warn，如果没有则使用 baseWarn")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" warn "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("warn "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" baseWarn\n"),n("span",{attrs:{class:"token comment"}},[t._v("// 将 options.warn 属性删除")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("delete")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("warn\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("首先，使用 "),n("code",[t._v("extend")]),t._v(" 函数将选项参数混合到一个新的对象中，然后定义了 "),n("code",[t._v("warn")]),t._v(" 常量，其值为 "),n("code",[t._v("options.warn")]),t._v(" 或 "),n("code",[t._v("baseWarn")]),t._v("，如果选项参数中没有 "),n("code",[t._v("warn")]),t._v(" 则使用 "),n("code",[t._v("baseWarn")]),t._v("，其中 "),n("code",[t._v("baseWarn")]),t._v(" 是来自于 "),n("code",[t._v("core/util/debug.js")]),t._v(" 文件中 "),n("code",[t._v("warn")]),t._v(" 的别名，最后将 "),n("code",[t._v("options.warn")]),t._v(" 移除。这三行代码的作用主要是用来处理一下选项参数 "),n("code",[t._v("options")]),t._v(" 并定义 "),n("code",[t._v("warn")]),t._v(" 常量。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("/* istanbul ignore if */")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'production'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// detect possible CSP restriction")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("Function")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'return 1'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token class-name"}},[t._v("e")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("toString")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("match")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token regex"}},[t._v("/unsafe-eval|CSP/")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),n("span",{attrs:{class:"token string"}},[t._v("'It seems you are using the standalone build of Vue.js in an '")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),n("span",{attrs:{class:"token string"}},[t._v("'environment with Content Security Policy that prohibits unsafe-eval. '")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),n("span",{attrs:{class:"token string"}},[t._v("'The template compiler cannot work in this environment. Consider '")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),n("span",{attrs:{class:"token string"}},[t._v("'relaxing the policy to allow unsafe-eval or pre-compiling your '")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),n("span",{attrs:{class:"token string"}},[t._v("'templates into render functions.'")]),t._v("\n      "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("首先这段代码是在非生产环境下执行的，然后使用 "),n("code",[t._v("try catch")]),t._v(" 语句块对 "),n("code",[t._v("new Function('return 1')")]),t._v(" 这句代码进行错误捕获，如果有错误发生且错误的内容中包含诸如 "),n("code",[t._v("'unsafe-eval'")]),t._v(" 或者 "),n("code",[t._v("'CSP'")]),t._v(" 这些字样的信息时就会给出一个警告。我们知道 "),n("code",[t._v("CSP")]),t._v(" 全称是内容安全策略，如果你的策略比较严格，那么 "),n("code",[t._v("new Function()")]),t._v(" 将会受到影响，从而不能够使用。但是将模板字符串编译成渲染函数又依赖 "),n("code",[t._v("new Function()")]),t._v("，所以解决方案有两个：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("1、放宽你的CSP策略")]),s("li",[this._v("2、预编译")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("总之这段代码的作用就是检测 "),s("code",[this._v("new Function()")]),this._v(" 是否可用，并在某些情况下给你一个有用的提示。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// check cache")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("delimiters\n  "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("String")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("delimiters"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" template\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" template\n"),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cache"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" cache"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("首先定义常量 "),n("code",[t._v("key")]),t._v("，其值为一个字符串，我们知道 "),n("code",[t._v("options.delimiters")]),t._v(" 是一个数组，如果 "),n("code",[t._v("options.delimiters")]),t._v(" 存在，则使用 "),n("code",[t._v("String")]),t._v(" 方法将其转换成字符串并与 "),n("code",[t._v("template")]),t._v(" 拼接作为 "),n("code",[t._v("key")]),t._v(" 的值，否则直接使用 "),n("code",[t._v("template")]),t._v(" 字符串作为 "),n("code",[t._v("key")]),t._v(" 的值，然后判断 "),n("code",[t._v("cache[key]")]),t._v(" 是否存在，如果存在直接返回 "),n("code",[t._v("cache[key]")]),t._v("。这么做的目的是缓存字符串模板的编译结果，防止重复编译，提升性能，我们再看一下 "),n("code",[t._v("compileToFunctions")]),t._v(" 函数的最后一句代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("cache"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" res"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这句代码在返回编译结果的同时，将结果缓存，这样下一次发现如果 "),s("code",[this._v("cache")]),this._v(" 中存在相同的 "),s("code",[this._v("key")]),this._v(" 则不需要再次编译，直接使用缓存的结果就可以了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么 "),s("code",[this._v("cache")]),this._v(" 这个变量是哪里来的？这个变量定义在 "),s("code",[this._v("compileToFunctions")]),this._v(" 的前面，也就是 "),s("code",[this._v("createCompileToFunctionFn")]),this._v(" 函数的开头，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" cache "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("create")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可知 "),s("code",[this._v("cache")]),this._v(" 就是一个通过 "),s("code",[this._v("Object.create(null)")]),this._v(" 创建出来的空对象而已。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// compile")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" compiled "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("compile")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("可以说这句代码才是整个函数最核心的代码，虽然它只要一句，但是它做的事情最多。"),n("code",[t._v("compile")]),t._v(" 是通过闭包引用了来自 "),n("code",[t._v("createCompileToFunctionFn")]),t._v(" 函数的形参，所以这里的 "),n("code",[t._v("compile")]),t._v(" 就是调用 "),n("code",[t._v("createCompileToFunctionFn")]),t._v(" 函数时传递过来的函数，打开 "),n("code",[t._v("src/compiler/create-compiler.js")]),t._v(" 文件如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompilerCreator")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("baseCompile"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Function"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Function "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompiler")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("baseOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("compile")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      template"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      options"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompiledResult "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token comment"}},[t._v("// 函数体...")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      compile"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      compileToFunctions"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompileToFunctionFn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("compile"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("其实前面我们已经提到过，传递给 "),n("code",[t._v("createCompileToFunctionFn")]),t._v(" 函数的 "),n("code",[t._v("compile")]),t._v(" 参数，就是定义在 "),n("code",[t._v("createCompiler")]),t._v(" 函数开头的 "),n("code",[t._v("compile")]),t._v(" 函数。所以：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// compile")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" compiled "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("compile")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这里的 "),n("code",[t._v("compile")]),t._v(" 函数就是定义在 "),n("code",[t._v("src/compiler/create-compiler.js")]),t._v(" 文件中 "),n("code",[t._v("createCompiler")]),t._v(" 函数开头的 "),n("code",[t._v("compile")]),t._v(" 函数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在大家只需要知道真正的编译工作是依托于 "),s("code",[this._v("compile")]),this._v(" 函数的即可，我们后面会详细解析 "),s("code",[this._v("compile")]),this._v("。接下来我们继续查看 "),s("code",[this._v("compileToFunctions")]),this._v(" 代码，下面是这段：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// check compilation errors/tips")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'production'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("compiled"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("errors "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" compiled"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("errors"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`Error compiling template:\\n\\n")]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("template"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v("\\n\\n`")])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n      compiled"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("errors"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("map")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("e "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`- ")]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("e"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v("`")])]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("join")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'\\n'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'\\n'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      vm\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("compiled"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tips "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" compiled"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tips"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    compiled"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tips"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("forEach")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("tip")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("我们知道，在使用 "),n("code",[t._v("compile")]),t._v(" 函数对模板进行编译后会返回一个结果 "),n("code",[t._v("compiled")]),t._v("，通过上面这段代码我们能够猜到，返回结果 "),n("code",[t._v("compiled")]),t._v(" 是一个对象且这个对象可能包含两个属性 "),n("code",[t._v("errors")]),t._v(" 和 "),n("code",[t._v("tips")]),t._v("。通过这两个属性的名字可知，这两个属性分别包含了编译过程中的错误和提示信息。所以上面那段代码的作用就是用来检查使用 "),n("code",[t._v("compile")]),t._v(" 对模板进行编译的过程中是否存在错误和提示的，如果存在那么需要将其打印出来。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("另外，这段代码也是运行在非生产环境的，且错误信息 "),n("code",[t._v("compiled.errors")]),t._v(" 和提示信息 "),n("code",[t._v("compiled.tips")]),t._v(" 都是数组，需要遍历打印，不同的是错误信息使用 "),n("code",[t._v("warn")]),t._v(" 函数进行打印，而提示信息使用 "),n("code",[t._v("tip")]),t._v(" 函数进行打印，其中 "),n("code",[t._v("tip")]),t._v(" 函数也来自于 "),n("code",[t._v("core/util/debug.js")]),t._v(" 文件。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// turn code into functions")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" fnGenErrors "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\nres"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("render "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createFunction")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("compiled"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("render"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fnGenErrors"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nres"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticRenderFns "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" compiled"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticRenderFns"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("map")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("code "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createFunction")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("code"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fnGenErrors"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("定义了两个常量 "),n("code",[t._v("res")]),t._v(" 以及 "),n("code",[t._v("fnGenErrors")]),t._v("，其中 "),n("code",[t._v("res")]),t._v(" 是一个空对象且它就是最终的返回值，"),n("code",[t._v("fnGenErrors")]),t._v(" 是一个空数组。然后在 "),n("code",[t._v("res")]),t._v(" 对象上添加一个 "),n("code",[t._v("render")]),t._v(" 属性，这个 "),n("code",[t._v("render")]),t._v(" 属性，实际上就是最终生成的渲染函数，它的值是通过 "),n("code",[t._v("createFunction")]),t._v(" 创建出来了，其中 "),n("code",[t._v("createFunction")]),t._v(" 函数就定义在 "),n("code",[t._v("to-function.js")]),t._v(" 文件的开头，源码如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createFunction")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("code"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" errors"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("try")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),n("span",{attrs:{class:"token class-name"}},[t._v("Function")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("code"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("catch")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token class-name"}},[t._v("err")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    errors"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("push")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" err"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" code "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" noop\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("createFunction")]),t._v(" 函数接收两个参数，第一个参数 "),n("code",[t._v("code")]),t._v(" 为函数体字符串，该字符串将通过 "),n("code",[t._v("new Function(code)")]),t._v(" 的方式创建为函数。第二个参数 "),n("code",[t._v("errors")]),t._v(" 是一个数组，作用是当采用 "),n("code",[t._v("new Function(code)")]),t._v(" 创建函数发生错误时用来收集错误的。我们再查看一下调用 "),n("code",[t._v("createFunction")]),t._v(" 那句代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("res"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("render "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createFunction")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("compiled"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("render"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fnGenErrors"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("可知，传递给 "),n("code",[t._v("createFunction")]),t._v(" 函数的第一个参数是 "),n("code",[t._v("compiled.render")]),t._v("，所以 "),n("code",[t._v("compiled.render")]),t._v(" 应该是一个函数体字符串，且我们知道 "),n("code",[t._v("compiled")]),t._v(" 是 "),n("code",[t._v("compile")]),t._v(" 函数的返回值，这说明："),n("em",[n("code",[t._v("compile")]),t._v(" 函数编译模板字符串后所得到的是字符串形式的函数体")]),t._v("。传递给 "),n("code",[t._v("createFunction")]),t._v(" 函数的第二个参数是之前声明的 "),n("code",[t._v("fnGenErrors")]),t._v(" 常量，也就是说当创建函数出错时的错误信息被 "),n("code",[t._v("push")]),t._v(" 到这个数组里了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在这句代码之后，又在 "),s("code",[this._v("res")]),this._v(" 对象上添加了 "),s("code",[this._v("staticRenderFns")]),this._v(" 属性：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("res"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticRenderFns "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" compiled"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticRenderFns"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("map")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("code "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createFunction")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("code"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fnGenErrors"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("由这段代码可知 "),n("code",[t._v("res.staticRenderFns")]),t._v(" 是一个函数数组，是通过对 "),n("code",[t._v("compiled.staticRenderFns")]),t._v(" 遍历生成的，这说明："),n("em",[n("code",[t._v("compiled")]),t._v(" 除了包含 "),n("code",[t._v("render")]),t._v(" 字符串外，还包含一个字符串数组 "),n("code",[t._v("staticRenderFns")]),t._v("，且这个字符串数组最终也通过 "),n("code",[t._v("createFunction")]),t._v(" 转为函数。")]),n("code",[t._v("staticRenderFns")]),t._v(" 的主要作用是渲染优化，我们后面详细讲解。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("再接下来就是 "),s("code",[this._v("compileToFunctions")]),this._v(" 函数的最后一段代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// check function generation errors.")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// this should only happen if there is a bug in the compiler itself.")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// mostly for codegen development use")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("/* istanbul ignore if */")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'production'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("compiled"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("errors "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("compiled"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("errors"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" fnGenErrors"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("warn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`Failed to generate render function:\\n\\n`")])]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n      fnGenErrors"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("map")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" err"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" code "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`")]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("err"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("toString")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v(" in\\n\\n")]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("code"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v("\\n`")])]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("join")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token string"}},[t._v("'\\n'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      vm\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这段代码同样是在非生产环境下执行的，这段代码主要的作用是用来打印在生成渲染函数过程中的错误，也就是上面定义的常量 "),s("code",[this._v("fnGenErrors")]),this._v(" 中所收集的错误。注释中写的很清楚，这段代码的作用主要是用于开发 "),s("code",[this._v("codegen")]),this._v(" 功能时使用，一般是编译器本身的错误，所以对于我们来讲基本用不到。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后一句代码我们前面已经讲过："),s("code",[this._v("return (cache[key] = res)")]),this._v(" 返回结果的同时将结果缓存。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在我们回顾一下 "),s("code",[this._v("src/compiler/to-function.js")]),this._v(" 文件的整个内容，可以发现这个文件的主要作用有以下几点：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ul",[n("li",[t._v("1、缓存编译结果，通过 "),n("code",[t._v("createCompileToFunctionFn")]),t._v(" 函数内声明的 "),n("code",[t._v("cache")]),t._v(" 常量实现。")]),n("li",[t._v("2、调用 "),n("code",[t._v("compile")]),t._v(" 函数将模板字符串转成渲染函数字符串")]),n("li",[t._v("3、调用 "),n("code",[t._v("createFunction")]),t._v(" 函数将渲染函数字符串转成真正的渲染函数")]),n("li",[t._v("4、打印编译错误，包括：模板字符串 -> 渲染函数字符 以及 渲染函数字符串 -> 渲染函数 这两个阶段的错误")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("最后，真正的 "),n("code",[t._v("模板字符串")]),t._v(" 到 "),n("code",[t._v("渲染函数字符串")]),t._v(" 的编译工作实际上是通过调用 "),n("code",[t._v("compile")]),t._v(" 函数来完成的，所以接下来我们的任务就是弄清楚 "),n("code",[t._v("compile")]),t._v(" 函数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"compile-的作用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#compile-的作用","aria-hidden":"true"}},[this._v("#")]),this._v(" compile 的作用")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("回顾一下 "),s("code",[this._v("src/compiler/to-function.js")]),this._v(" 文件中的 "),s("code",[this._v("compileToFunctions")]),this._v(" 函数调用 "),s("code",[this._v("compile")]),this._v(" 函数的方式：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" compiled "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("compile")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("很简单的一段代码，其中模板字符串 "),n("code",[t._v("template")]),t._v(" 被透传了过去，选项参数 "),n("code",[t._v("options")]),t._v(" 经过简单处理后继续作为第二个参数传递给 "),n("code",[t._v("compile")]),t._v(" 函数，前面我们分析过，这里传递过去的 "),n("code",[t._v("options")]),t._v(" 如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  shouldDecodeNewlines"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  shouldDecodeNewlinesForHref"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  delimiters"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  comments"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  warn  "),n("span",{attrs:{class:"token comment"}},[t._v("// 被 delete")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("知道了这些我们就可以去看 "),n("code",[t._v("compile")]),t._v(" 函数的代码了，我们知道 "),n("code",[t._v("compile")]),t._v(" 函数是 "),n("code",[t._v("createCompileToFunctionFn")]),t._v(" 函数的形参，也就是说，"),n("code",[t._v("compile")]),t._v(" 函数是被从其他地方传递过来了，其实前面我们都分析过，这里的 "),n("code",[t._v("compile")]),t._v(" 函数就是 "),n("code",[t._v("src/compiler/create-compiler.js")]),t._v(" 文件中定义在 "),n("code",[t._v("createCompiler")]),t._v(" 函数内的 "),n("code",[t._v("compile")]),t._v(" 函数，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompilerCreator")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("baseCompile"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Function"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Function "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompiler")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("baseOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token comment"}},[t._v("// 就是这个 compile 函数")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("compile")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      template"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      options"),n("span",{attrs:{class:"token operator"}},[t._v("?")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompiledResult "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),n("span",{attrs:{class:"token comment"}},[t._v("// 函数体 ...")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      compile"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      compileToFunctions"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompileToFunctionFn")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("compile"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以发现，"),s("code",[this._v("compile")]),this._v(" 函数接收两个参数，分别是模板字符串("),s("code",[this._v("template")]),this._v(")和选项参数("),s("code",[this._v("options")]),this._v(")。我们顺序的查看其函数体代码，首先是这句代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" finalOptions "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("create")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("baseOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这句代码通过 "),n("code",[t._v("Object.create")]),t._v(" 函数以 "),n("code",[t._v("baseOptions")]),t._v(" 为原型创建 "),n("code",[t._v("finalOptions")]),t._v(" 常量，"),n("code",[t._v("finalOptions")]),t._v(" 才是最终的编译选项参数。这里的 "),n("code",[t._v("baseOptions")]),t._v(" 是 "),n("code",[t._v("createCompiler")]),t._v(" 函数的形参，也就是在 "),n("code",[t._v("src/platforms/web/compiler/index.js")]),t._v(" 文件中调用 "),n("code",[t._v("createCompiler")]),t._v(" 传递过来的参数：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" baseOptions "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'./options'")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" createCompiler "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'compiler/index'")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" compile"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" compileToFunctions "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompiler")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("baseOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以看到 "),s("code",[this._v("baseOptions")]),this._v(" 来自于 "),s("code",[this._v("src/platforms/web/compiler/options.js")]),this._v(" 文件，下面是该文件的全部代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("/* @flow */")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  isPreTag"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  mustUseProp"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  isReservedTag"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  getTagNamespace\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'../util/index'")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" modules "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'./modules/index'")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" directives "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'./directives/index'")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" genStaticKeys "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'shared/util'")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" isUnaryTag"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" canBeLeftOpenTag "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'./util'")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" baseOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  expectHTML"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  modules"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  directives"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  isPreTag"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  isUnaryTag"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  mustUseProp"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  canBeLeftOpenTag"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  isReservedTag"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  getTagNamespace"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  staticKeys"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("genStaticKeys")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modules"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("还是比较简短的，这个文件的主要作用就是导出一个对象，即我们说到的 "),s("code",[this._v("baseOptions")]),this._v("，所以下面我们就把 "),s("code",[this._v("baseOptions")]),this._v(" 这个对象的内容搞清楚。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  expectHTML"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token boolean"}},[t._v("true")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  modules"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  directives"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  isPreTag"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  isUnaryTag"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  mustUseProp"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  canBeLeftOpenTag"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  isReservedTag"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  getTagNamespace"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  staticKeys"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("genStaticKeys")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("modules"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("我们一个一个看，第一个属性 "),n("code",[t._v("expectHTML")]),t._v(" 被设置为 "),n("code",[t._v("true")]),t._v("。第二个属性是 "),n("code",[t._v("modules")]),t._v("，根据引用关系可知它来自于 "),n("code",[t._v("platforms/web/compiler/modules/index.js")]),t._v(" 文件，打开这个文件：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" klass "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'./class'")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" style "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'./style'")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" model "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'./model'")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  klass"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  style"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  model\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("以上是该文件的全部代码，可以发现 "),n("code",[t._v("modules")]),t._v(" 实际上就是一个数组，数组有三个元素 "),n("code",[t._v("klass")]),t._v("、"),n("code",[t._v("style")]),t._v(" 以及 "),n("code",[t._v("model")]),t._v("，并且这三个元素来自于当前目录下的三个相应名称的 "),n("code",[t._v("js")]),t._v(" 文件。简单查看这三个文件的输出，如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// klass.js 的输出")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  staticKeys"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v("'staticClass'")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  transformNode"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  genData\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// style.js 的输出")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  staticKeys"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v("'staticStyle'")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  transformNode"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  genData\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// model.js 的输出")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  preTransformNode\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("可以看到这三个文件输出的都是对象，且 "),n("code",[t._v("klass.js")]),t._v(" 文件与 "),n("code",[t._v("style.js")]),t._v(" 文件的输出基本相同，只有 "),n("code",[t._v("staticKeys")]),t._v(" 字段有所区别，而 "),n("code",[t._v("model.js")]),t._v(" 文件输出的对象只包含 "),n("code",[t._v("preTransformNode")]),t._v(" 属性。最终 "),n("code",[t._v("platforms/web/compiler/modules/index.js")]),t._v(" 文件将这三个文件的输出综合为一个数组进行输出，所以其输出的内容为：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    staticKeys"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v("'staticClass'")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    transformNode"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    genData\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    staticKeys"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token string"}},[t._v("'staticStyle'")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    transformNode"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    genData\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    preTransformNode\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("以上就是 "),n("code",[t._v("baseOptions")]),t._v(" 对象第二个属性 "),n("code",[t._v("modules")]),t._v(" 的内容。"),n("code",[t._v("baseOptions")]),t._v(" 对象的第三个属性是 "),n("code",[t._v("directives")]),t._v("，类似 "),n("code",[t._v("modules")]),t._v(" 只不过 "),n("code",[t._v("directives")]),t._v(" 来自于 "),n("code",[t._v("platforms/web/compiler/directives/index.js")]),t._v(" 文件，该文件源码如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" model "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'./model'")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" text "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'./text'")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("import")]),t._v(" html "),n("span",{attrs:{class:"token keyword"}},[t._v("from")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'./html'")]),t._v("\n\n"),n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  model"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  text"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  html\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("同样类似于 "),n("code",[t._v("modules")]),t._v(" 输出，只不过 "),n("code",[t._v("directives")]),t._v(" 最终输出的不是数组，而是一个对象，这个对象包含三个属性 "),n("code",[t._v("model")]),t._v("、"),n("code",[t._v("text")]),t._v(" 以及 "),n("code",[t._v("html")]),t._v("，这三个属性同样来自于当前目前下的三个文件："),n("code",[t._v("model.js")]),t._v("、"),n("code",[t._v("text.js")]),t._v(" 以及 "),n("code",[t._v("html.js")]),t._v(" 文件，我们分别查看这三个文件的输出：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// model.js 的输出")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("model")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  el"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  dir"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTDirective"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  _warn"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Function\n"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("boolean "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// 函数体...")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// html.js 的输出")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("html")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dir"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTDirective"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dir"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("addProp")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'innerHTML'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`_s(")]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("dir"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v(")`")])]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// text.js 的输出")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("default")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("text")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTElement"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" dir"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ASTDirective"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("dir"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token function"}},[t._v("addProp")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("el"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'textContent'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token template-string"}},[n("span",{attrs:{class:"token string"}},[t._v("`_s(")]),n("span",{attrs:{class:"token interpolation"}},[n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("dir"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("value"),n("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),n("span",{attrs:{class:"token string"}},[t._v(")`")])]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以发现，这个三个文件分别输出了三个函数，所以最终 "),s("code",[this._v("baseOptions")]),this._v(" 对象的 "),s("code",[this._v("directives")]),this._v(" 属性如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  model"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  html"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  text"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("baseOptions")]),t._v(" 的第五个属性是 "),n("code",[t._v("isUnaryTag")]),t._v("，它来自于与 "),n("code",[t._v("options.js")]),t._v(" 文件同级目录下的 "),n("code",[t._v("util.js")]),t._v(" 文件，即 "),n("code",[t._v("src/platforms/web/compiler/util.js")]),t._v(" 文件，打开这个文件，找到 "),n("code",[t._v("isUnaryTag")]),t._v(" 如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" isUnaryTag "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("makeMap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),n("span",{attrs:{class:"token string"}},[t._v("'area,base,br,col,embed,frame,hr,img,input,isindex,keygen,'")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n  "),n("span",{attrs:{class:"token string"}},[t._v("'link,meta,param,source,track,wbr'")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以看到 "),s("code",[this._v("isUnaryTag")]),this._v(" 是一个通过 "),s("code",[this._v("makeMap")]),this._v(" 生成的函数，该函数的作用是检测给定的标签是否是一元标签。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("baseOptions")]),this._v(" 的第七个属性是 "),s("code",[this._v("canBeLeftOpenTag")]),this._v("，它也是一个函数，来自于 "),s("code",[this._v("src/platforms/web/compiler/util.js")]),this._v(" 文件，源码如下：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// Elements that you can, intentionally, leave open")]),t._v("\n"),n("span",{attrs:{class:"token comment"}},[t._v("// (and which close themselves)")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" canBeLeftOpenTag "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("makeMap")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),n("span",{attrs:{class:"token string"}},[t._v("'colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source'")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("该函数也是一个使用 "),n("code",[t._v("makeMap")]),t._v(" 生成的函数，它的作用是检测一个标签是否是那些虽然不是一元标签，但却可以自己补全并闭合的标签。比如 "),n("code",[t._v("p")]),t._v(" 标签是一个双标签，你需要这样使用 "),n("code",[t._v("<p>Some content</p>")]),t._v("，但是你依然可以省略闭合标签，直接这样写："),n("code",[t._v("<p>Some content")]),t._v("，且浏览器会自动补全。但是有些标签你不可以这样用，它们是严格的双标签。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在我们已经弄清楚 "),s("code",[this._v("baseOptions")]),this._v(" 对象的各个属性都是什么了，这些属性作为编译器的基本参数选项，但是我们还不清楚其各个属性的意义，比如 "),s("code",[this._v("modules")]),this._v(" 数组和 "),s("code",[this._v("directives")]),this._v(" 对象等，不过不急，随着后面的深入，这些疑惑都将慢慢解开。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("现在我们再回到 "),n("code",[t._v("compile")]),t._v(" 继续看下面的代码，在创建完 "),n("code",[t._v("finalOptions")]),t._v(" 属性之后，又定义了两个常量："),n("code",[t._v("errors")]),t._v(" 和 "),n("code",[t._v("tips")]),t._v(" 且它们的值都是数组：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" errors "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" tips "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("finalOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function-variable function"}},[t._v("warn")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" tip"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("tip "),n("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" tips "),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" errors"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("push")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("msg"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("上面的代码在 "),n("code",[t._v("finalOptions")]),t._v(" 上添加了 "),n("code",[t._v("warn")]),t._v(" 函数，该函数接收两个参数：1、"),n("code",[t._v("msg")]),t._v(" 错误或提示的信息，2、"),n("code",[t._v("tip")]),t._v(" 用来标示 "),n("code",[t._v("msg")]),t._v(" 是错误还是提示。可以猜想的到 "),n("code",[t._v("warn")]),t._v(" 选项主要用在编译过程中的错误和提示收集，如果收集的信息是错误信息就将错误信息添加到前面定义的 "),n("code",[t._v("errors")]),t._v(" 数组里，如果是提示信息就将其添加到 "),n("code",[t._v("tips")]),t._v(" 数组里。")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// merge custom modules")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    finalOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("\n      "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("baseOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("concat")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// merge custom directives")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("directives"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    finalOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("directives "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("extend")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      Object"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("create")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("baseOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("directives "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("directives\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token comment"}},[t._v("// copy other options")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'modules'")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" key "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'directives'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      finalOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("这段代码检查 "),n("code",[t._v("options")]),t._v(" 是否存在，这里的 "),n("code",[t._v("options")]),t._v(" 就是使用编译器编译模板时传递的选项参数，或者可以简单理解为调用 "),n("code",[t._v("compileToFunctions")]),t._v(" 函数时传递的选项参数。其实我们可以把 "),n("code",[t._v("baseOptions")]),t._v(" 理解为编译器的默认选项或者基本选项，而 "),n("code",[t._v("options")]),t._v(" 是用来提供定制能力的扩展选项。而上面这段代码的作用，就是将 "),n("code",[t._v("options")]),t._v(" 对象混合到 "),n("code",[t._v("finalOptions")]),t._v(" 中，我们看一下它具体是如何做的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("首先检查 "),s("code",[this._v("options.modules")]),this._v(" 是否存在：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// merge custom modules")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  finalOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("\n    "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("baseOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("concat")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("modules"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("如果存在，就在 "),n("code",[t._v("finalOptions")]),t._v(" 对象上添加 "),n("code",[t._v("modules")]),t._v(" 属性，其值为 "),n("code",[t._v("baseOptions.modules")]),t._v(" 和 "),n("code",[t._v("options.modules")]),t._v(" 这两个数组合并后的新数组。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("然后检查是否有 "),s("code",[this._v("options.directives")]),this._v("：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// merge custom directives")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("directives"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  finalOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("directives "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("extend")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    Object"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("create")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("baseOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("directives "),n("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("null")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    options"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("directives\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("由于 "),n("code",[t._v("directives")]),t._v(" 是对象而不是数组，所以不能采用与 "),n("code",[t._v("modules")]),t._v(" 相同的处理方式，对于 "),n("code",[t._v("directives")]),t._v(" 采用原型链的原理实现扩展属性对基本属性的覆盖。首先通过 "),n("code",[t._v("Object.create(baseOptions.directives || null)")]),t._v(" 创建一个以 "),n("code",[t._v("baseOptions.directives")]),t._v(" 对象为原型的新对象，然后使用 "),n("code",[t._v("extend")]),t._v(" 方法将 "),n("code",[t._v("options.directives")]),t._v(" 的属性混合到新创建出来的对象中，并将该对象作为 "),n("code",[t._v("finalOptions.directives")]),t._v(" 的值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后对于 "),s("code",[this._v("options")]),this._v(" 中既不是 "),s("code",[this._v("modules")]),this._v(" 又不是 "),s("code",[this._v("directives")]),this._v(" 的其他属性，采用直接复制过去的方式进行处理：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token comment"}},[t._v("// copy other options")]),t._v("\n"),n("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),n("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'modules'")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" key "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'directives'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    finalOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),n("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("经过以上步骤，最终的 "),s("code",[this._v("finalOptions")]),this._v(" 就已经成型了，我们再看接下来的这句代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" compiled "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("baseCompile")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" finalOptions"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("上面的代码调用了 "),n("code",[t._v("baseCompile")]),t._v(" 函数，并分别将字符串模板("),n("code",[t._v("template")]),t._v(")，以及最终的编译器选项("),n("code",[t._v("finalOptions")]),t._v(")传递了过去。这说明什么？这说明 "),n("code",[t._v("compile")]),t._v(" 函数对模板的编译是委托 "),n("code",[t._v("baseCompile")]),t._v(" 完成的。"),n("code",[t._v("baseCompile")]),t._v(" 函数是 "),n("code",[t._v("createCompilerCreator")]),t._v(" 函数的形参，是在 "),n("code",[t._v("src/compiler/index.js")]),t._v(" 文件中调用 "),n("code",[t._v("createCompilerCreator")]),t._v(" 创建 "),n("code",[t._v("'编译器创建者' 的创建者时")]),t._v(" 传递过来的：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" createCompiler "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("createCompilerCreator")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("baseCompile")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  template"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  options"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompilerOptions\n"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" CompiledResult "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ast "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("parse")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("template"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("trim")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token function"}},[t._v("optimize")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" code "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("generate")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ast"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" options"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ast"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    render"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" code"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("render"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    staticRenderFns"),n("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" code"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("staticRenderFns\n  "),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("如上代码 "),n("code",[t._v("baseCompile")]),t._v(" 作为 "),n("code",[t._v("createCompilerCreator")]),t._v(" 的参数传递过来。不过现在还不是具体查看 "),n("code",[t._v("baseCompile")]),t._v(" 代码的时候，我们还是回到 "),n("code",[t._v("compile")]),t._v(" 继续查看剩余的代码，再调用 "),n("code",[t._v("baseCompile")]),t._v(" 函数之后是这样一段代码：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[n("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),n("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),n("span",{attrs:{class:"token string"}},[t._v("'production'")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  errors"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("push"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("apply")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("errors"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("detectErrors")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("compiled"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ast"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),n("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[n("code",[t._v("compiled")]),t._v(" 是 "),n("code",[t._v("baseCompile")]),t._v(" 对模板的编译结果，该结果中包含了模板编译后的抽象语法树(AST)，可以通过 "),n("code",[t._v("compiled.ast")]),t._v(" 访问该语法树，所以上面这段代码的作用是用来通过抽象语法树来检查模板中是否存在错误表达式的，通过 "),n("code",[t._v("detectErrors")]),t._v(" 函数实现，将 "),n("code",[t._v("compiled.ast")]),t._v(" 作为参数传递给 "),n("code",[t._v("detectErrors")]),t._v(" 函数，该函数最终返回一个数组，该数组中包含了所有错误的收集，最终通过这句代码将错误添加到 "),n("code",[t._v("errors")]),t._v(" 数组中：")])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("errors"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("push"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),n("span",{attrs:{class:"token function"}},[t._v("apply")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("errors"),n("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),n("span",{attrs:{class:"token function"}},[t._v("detectErrors")]),n("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("compiled"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("ast"),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),n("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("pre",{pre:!0,attrs:{class:"language-js"}},[n("code",[t._v("compiled"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("errors "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" errors\ncompiled"),n("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("tips "),n("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" tips\n"),n("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" compiled\n")])])},function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("p",[t._v("将收集到的错误("),n("code",[t._v("errors")]),t._v(")和提示("),n("code",[t._v("tips")]),t._v(")添加到 "),n("code",[t._v("compiled")]),t._v(" 上并返回。至此 "),n("code",[t._v("compile")]),t._v(" 函数的工作就结束了。我们做一个简短的回顾，通过上面的分析我们可以明白 "),n("code",[t._v("compile")]),t._v(" 函数的作用，它的作用主要有三个：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("1、生成最终编译器选项 "),s("code",[this._v("finalOptions")])]),s("li",[this._v("2、对错误的收集")]),s("li",[this._v("3、调用 "),s("code",[this._v("baseCompile")]),this._v(" 编译模板")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("补充：上面的分析中，我们并没有深入讲解 "),s("code",[this._v("detectErrors")]),this._v(" 函数是如何根据抽象语法树(AST)检查模板中是否存在表达式错误的，这是因为现在对于大家来讲还不清楚抽象语法树的模样，且这并不会对大家的理解造成障碍，所以我们将这部分的讲解后移，等我们对 AST 心知肚明之后再来看这部分内容也不迟。")])}],!1,null,null,null);s.default=e.exports}}]);