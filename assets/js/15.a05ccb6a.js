(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{53:function(t,s,a){"use strict";a.r(s);var n=a(0),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("div",{staticClass:"content"},[t._m(0),t._m(1),t._m(2),t._m(3),t._m(4),t._m(5),t._m(6),t._m(7),t._m(8),t._m(9),t._m(10),t._m(11),t._m(12),a("p",[t._v("其中 "),a("code",[t._v("hasOwn")]),t._v(" 函数来自于 "),a("code",[t._v("shared/util.js")]),t._v(" 文件，可以在 "),a("router-link",{attrs:{to:"../appendix/shared-util.html"}},[t._v("shared/util.js 文件工具方法全解")]),t._v(" 中查看其详解，其作用是用来判断一个属性是否是对象自身的属性(不包括原型上的)。所以这个判断语句的意思是，如果 "),a("code",[t._v("child")]),t._v(" 对象的键也在 "),a("code",[t._v("parent")]),t._v(" 上出现，那么就不要再调用 "),a("code",[t._v("mergeField")]),t._v(" 的了，因为在上一个 "),a("code",[t._v("for in")]),t._v(" 循环中已经调用过了，这就避免了重复调用。")],1),t._m(13),t._m(14),t._m(15),t._m(16),t._m(17),t._m(18),t._m(19),t._m(20),a("p",[t._v("那么接下来我们就看看这个选项合并策略对象都有哪些策略，首先是下面这段代码：")]),t._m(21),t._m(22),t._m(23),t._m(24),t._m(25),t._m(26),t._m(27),t._m(28),t._m(29),t._m(30),t._m(31),t._m(32),t._m(33),t._m(34),t._m(35),t._m(36),t._m(37),t._m(38),t._m(39),t._m(40),t._m(41),t._m(42),t._m(43),t._m(44),t._m(45),t._m(46),t._m(47),t._m(48),t._m(49),t._m(50),t._m(51),t._m(52),t._m(53),t._m(54),t._m(55),t._m(56),t._m(57),t._m(58),t._m(59),t._m(60),t._m(61),a("p",[t._v("在这句注释的下面是这段代码：")]),t._m(62),t._m(63),t._m(64),t._m(65),t._m(66),t._m(67),a("p",[t._v("所以现在再看这段代码就清晰多了：")]),t._m(68),t._m(69),t._m(70),t._m(71),t._m(72),t._m(73),t._m(74),t._m(75),t._m(76),t._m(77),a("p",[t._v("也就是说，假如以我们的例子为例：")]),t._m(78),t._m(79),t._m(80),a("p",[t._v("输出如下图：")]),t._m(81),t._m(82),t._m(83),t._m(84),t._m(85),t._m(86),t._m(87),t._m(88),t._m(89),t._m(90),t._m(91),t._m(92),t._m(93),t._m(94),t._m(95),t._m(96),t._m(97),t._m(98),t._m(99),t._m(100),t._m(101),t._m(102),t._m(103),t._m(104),t._m(105),t._m(106),t._m(107),t._m(108),t._m(109),t._m(110),t._m(111),a("p",[t._v("最后我们对大家经常会产生疑问的地方做一些补充：")]),t._m(112),t._m(113),t._m(114),t._m(115),t._m(116),t._m(117),t._m(118),t._m(119),t._m(120),t._m(121),t._m(122),a("p",[t._v("但你知道吗，你也可以这么写：")]),t._m(123),t._m(124),t._m(125),t._m(126),t._m(127),t._m(128),t._m(129),t._m(130),t._m(131),t._m(132),t._m(133),t._m(134),t._m(135),t._m(136),t._m(137),t._m(138),t._m(139),t._m(140),t._m(141),t._m(142),t._m(143),a("p",[t._v("如下代码：")]),t._m(144),t._m(145),t._m(146),a("p",[t._v("再看下面的例子：")]),t._m(147),t._m(148),t._m(149),t._m(150),t._m(151),t._m(152),t._m(153),t._m(154),t._m(155),a("p",[t._v("另外我们注意第三个三目运算符：")]),t._m(156),t._m(157),t._m(158),a("p",[t._v("钩子函数将按顺序执行。")]),t._m(159),t._m(160),t._m(161),t._m(162),t._m(163),t._m(164),t._m(165),t._m(166),t._m(167),t._m(168),t._m(169),t._m(170),t._m(171),t._m(172),t._m(173),t._m(174),t._m(175),t._m(176),t._m(177),t._m(178),t._m(179),t._m(180),t._m(181),t._m(182),t._m(183),t._m(184),t._m(185),t._m(186),t._m(187),t._m(188),t._m(189),t._m(190),t._m(191),a("p",[t._v("接下来我们要看的代码就是这一段了：")]),t._m(192),t._m(193),t._m(194),a("p",[t._v("其中 "),a("code",[t._v("nativeWatch")]),t._v(" 来自于 "),a("code",[t._v("core/util/env.js")]),t._v(" 文件，大家可以在 "),a("router-link",{attrs:{to:"../appendix/core-util.html"}},[t._v("core/util 目录下的工具方法全解")]),t._v(" 中查看其作用。在 "),a("code",[t._v("Firefox")]),t._v(" 浏览器中 "),a("code",[t._v("Object.prototype")]),t._v(" 拥有原生的 "),a("code",[t._v("watch")]),t._v(" 函数，所以即便一个普通的对象你没有定义 "),a("code",[t._v("watch")]),t._v(" 属性，但是依然可以通过原型链访问到原生的 "),a("code",[t._v("watch")]),t._v(" 属性，这就会给 "),a("code",[t._v("Vue")]),t._v(" 在处理选项的时候造成迷惑，因为 "),a("code",[t._v("Vue")]),t._v(" 也提供了一个叫做 "),a("code",[t._v("watch")]),t._v(" 的选项，即使你的组件选项中没有写 "),a("code",[t._v("watch")]),t._v(" 选项，但是 "),a("code",[t._v("Vue")]),t._v(" 通过原型访问到了原生的 "),a("code",[t._v("watch")]),t._v("。这不是我们想要的，所以上面两句代码的目的是一个变通方案，当发现组件选项是浏览器原生的 "),a("code",[t._v("watch")]),t._v(" 时，那说明用户并没有提供 "),a("code",[t._v("Vue")]),t._v(" 的 "),a("code",[t._v("watch")]),t._v(" 选项，直接重置为 "),a("code",[t._v("undefined")]),t._v("。")],1),a("p",[t._v("然后是这句代码：")]),t._m(195),t._m(196),t._m(197),t._m(198),t._m(199),t._m(200),t._m(201),t._m(202),a("p",[t._v("举个例子：")]),t._m(203),t._m(204),t._m(205),t._m(206),t._m(207),t._m(208),t._m(209),t._m(210),t._m(211),t._m(212),a("p",[t._v("如下图：")]),t._m(213),t._m(214),t._m(215),t._m(216),t._m(217),t._m(218),t._m(219),t._m(220),t._m(221),t._m(222),t._m(223),a("p",[t._v("接下来我们要看的一段代码如下：")]),t._m(224),t._m(225),a("p",[t._v("对于 "),a("code",[t._v("props")]),t._v("、"),a("code",[t._v("methods")]),t._v("、"),a("code",[t._v("inject")]),t._v(" 以及 "),a("code",[t._v("computed")]),t._v(" 这四个选项有一个共同点，就是它们的结构都是纯对象，虽然我们在书写 "),a("code",[t._v("props")]),t._v(" 或者 "),a("code",[t._v("inject")]),t._v(" 选项的时候可能是一个数组，但是在 "),a("router-link",{attrs:{to:"./4vue-normalize.html"}},[t._v("Vue的思路之选项的规范化")]),t._v(" 一节中我们知道，"),a("code",[t._v("Vue")]),t._v(" 内部都将其规范化为了一个对象。所以我们看看 "),a("code",[t._v("Vue")]),t._v(" 是如何处理这些对象散列的。")],1),a("p",[t._v("策略函数内容如下：")]),t._m(226),t._m(227),t._m(228),t._m(229),t._m(230),t._m(231),t._m(232),t._m(233),t._m(234),t._m(235),t._m(236),t._m(237),t._m(238),a("p",[t._v("在 "),a("router-link",{attrs:{to:"./4vue-normalize.html"}},[t._v("Vue选项的规范化")]),t._v(" 一节中，我们讲到了 "),a("code",[t._v("mergeOptions")]),t._v(" 函数中的如下这段代码：")],1),t._m(239),t._m(240),t._m(241),t._m(242),a("p",[t._v("运行以上代码，将打印两句话：")]),t._m(243),t._m(244),t._m(245),t._m(246),t._m(247)])},[function(){var t=this.$createElement,s=this._self._c||t;return s("h1",{attrs:{id:"vue-选项的合并"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#vue-选项的合并","aria-hidden":"true"}},[this._v("#")]),this._v(" Vue 选项的合并")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上一章节我们了解了 "),s("code",[this._v("Vue")]),this._v(" 对选项的规范化，而接下来才是真正的合并阶段，我们继续看 "),s("code",[this._v("mergeOptions")]),this._v(" 函数的代码，接下来的一段代码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" options "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" key\n"),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("mergeField")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" child"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token function"}},[t._v("hasOwn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("mergeField")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeField")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" strat "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" strats"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" defaultStrat\n  options"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("strat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" options\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码的第一句和最后一句说明了 "),a("code",[t._v("mergeOptions")]),t._v(" 函数的的确确返回了一个新的对象，因为第一句代码定义了一个常量 "),a("code",[t._v("options")]),t._v("，而最后一句代码将其返回，所以我们自然可以预估到中间的代码是在充实 "),a("code",[t._v("options")]),t._v(" 常量，而 "),a("code",[t._v("options")]),t._v(" 常量就应该是最终合并之后的选项，我们看看它是怎么产生的。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先我们明确一下代码结构，这里有两个 "),a("code",[t._v("for in")]),t._v(" 循环以及一个名字叫 "),a("code",[t._v("mergeField")]),t._v(" 的函数，而且我们可以发现这两个 "),a("code",[t._v("for in")]),t._v(" 循环中都调用了 "),a("code",[t._v("mergeField")]),t._v(" 函数。我们先看第一段 "),a("code",[t._v("for in")]),t._v(" 代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("mergeField")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段 "),a("code",[t._v("for in")]),t._v(" 用来遍历 "),a("code",[t._v("parent")]),t._v("，并且将 "),a("code",[t._v("parent")]),t._v(" 对象的键作为参数传递给 "),a("code",[t._v("mergeField")]),t._v(" 函数，大家应该知道这里的 "),a("code",[t._v("key")]),t._v(" 是什么，假如 "),a("code",[t._v("parent")]),t._v(" 就是 "),a("code",[t._v("Vue.options")]),t._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Vue"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("options "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  components"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      KeepAlive\n      Transition"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      TransitionGroup\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  directives"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      model"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      show\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  filters"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("create")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  _base"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Vue\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("那么 "),a("code",[t._v("key")]),t._v(" 就应该分别是："),a("code",[t._v("components")]),t._v("、"),a("code",[t._v("directives")]),t._v("、"),a("code",[t._v("filters")]),t._v(" 以及 "),a("code",[t._v("_base")]),t._v("，除了 "),a("code",[t._v("_base")]),t._v(" 其他的字段都可以理解为是 "),a("code",[t._v("Vue")]),t._v(" 提供的选项的名字。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("而第二段 "),s("code",[this._v("for in")]),this._v(" 代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" child"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token function"}},[t._v("hasOwn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("mergeField")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("其遍历的是 "),s("code",[this._v("child")]),this._v(" 对象，并且多了一个判断：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token function"}},[t._v("hasOwn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("总之这两个 "),a("code",[t._v("for in")]),t._v(" 循环的目的就是使用在 "),a("code",[t._v("parent")]),t._v(" 或者 "),a("code",[t._v("child")]),t._v(" 对象中出现的 "),a("code",[t._v("key(即选项的名字)")]),t._v(" 作为参数调用 "),a("code",[t._v("mergeField")]),t._v(" 函数，真正合并的操作实际在 "),a("code",[t._v("mergeField")]),t._v(" 函数中。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("mergeField")]),this._v(" 代码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeField")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" strat "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" strats"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" defaultStrat\n  options"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("strat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("mergeField")]),t._v(" 函数只有两句代码，第一句代码定义了一个常量 "),a("code",[t._v("strat")]),t._v("，它的值是通过指定的 "),a("code",[t._v("key")]),t._v(" 访问 "),a("code",[t._v("strats")]),t._v(" 对象得到的，而当访问的属性不存在时，则使用 "),a("code",[t._v("defaultStrat")]),t._v(" 作为值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这里我们就要明确了，"),s("code",[this._v("strats")]),this._v(" 是什么？想弄明白这个问题，我们需要从整体角度去看一下 "),s("code",[this._v("options.js")]),this._v(" 文件，首先看文件顶部的一堆 "),s("code",[this._v("import")]),this._v(" 语句下的第一句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("/**\n * Option overwriting strategies are functions that handle\n * how to merge a parent option value and a child option\n * value into the final value.\n */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" strats "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" config"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("optionMergeStrategies\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这句代码就定义了 "),a("code",[t._v("strats")]),t._v(" 变量，且它是一个常量，这个常量的值为 "),a("code",[t._v("config.optionMergeStrategies")]),t._v("，这个 "),a("code",[t._v("config")]),t._v(" 对象是全局配置对象，来自于 "),a("code",[t._v("core/config.js")]),t._v(" 文件，此时 "),a("code",[t._v("config.optionMergeStrategies")]),t._v(" 还只是一个空的对象。注意一下这里的一段注释："),a("em",[t._v("选项覆盖策略是处理如何将父选项值和子选项值合并到最终值的函数")]),t._v("。也就是说 "),a("code",[t._v("config.optionMergeStrategies")]),t._v(" 是一个合并选项的策略对象，这个对象下包含很多函数，这些函数就可以认为是合并特定选项的策略。这样不同的选项使用不同的合并策略，如果你使用自定义选项，那么你也可以自定义该选项的合并策略，只需要在 "),a("code",[t._v("Vue.config.optionMergeStrategies")]),t._v(" 对象上添加与自定义选项同名的函数就行。而这就是 "),a("code",[t._v("Vue")]),t._v(" 文档中提过的全局配置："),a("a",{attrs:{href:"https://vuejs.org/v2/api/#optionMergeStrategies",target:"_blank",rel:"noopener noreferrer"}},[t._v("optionMergeStrategies")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"选项-el、propsdata-的合并策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#选项-el、propsdata-的合并策略","aria-hidden":"true"}},[this._v("#")]),this._v(" 选项 el、propsData 的合并策略")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("/**\n * Options with restrictions\n */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  strats"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("el "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" strats"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function-variable function"}},[t._v("propsData")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`option "')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("key"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('" can only be used during instance `')])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),a("span",{attrs:{class:"token string"}},[t._v("'creation with the `new` keyword.'")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("defaultStrat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("非生产环境下在 "),a("code",[t._v("strats")]),t._v(" 策略对象上添加两个策略(两个属性)分别是 "),a("code",[t._v("el")]),t._v(" 和 "),a("code",[t._v("propsData")]),t._v("，且这两个属性的值是一个函数。通过这两个属性的名字可知，这两个策略函数是用来合并 "),a("code",[t._v("el")]),t._v(" 选项和 "),a("code",[t._v("propsData")]),t._v(" 选项的。与其说“合并”不如说“处理”，因为其本质上并没有做什么合并工作。那么我们看看这个策略函数的具体内容，了解一下它是怎么处理的 "),a("code",[t._v("el")]),t._v(" 和 "),a("code",[t._v("propsData")]),t._v(" 选项的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("首先是一段 "),s("code",[this._v("if")]),this._v(" 判断分支，判断是否有传递 "),s("code",[this._v("vm")]),this._v(" 参数：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`option "')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("key"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('" can only be used during instance `')])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'creation with the `new` keyword.'")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果没有传递这个参数，那么便会给你一个警告，提示你 "),s("code",[this._v("el")]),this._v(" 选项或者 "),s("code",[this._v("propsData")]),this._v(" 选项只能在使用 "),s("code",[this._v("new")]),this._v(" 操作符创建实例的时候可用。比如下面的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 子组件")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" ChildComponent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'#app2'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  created"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'child component created'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 父组件")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'#app'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  data"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    test"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  components"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ChildComponent\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面的代码中我们在父组件中使用 "),a("code",[t._v("el")]),t._v(" 选项，这并没有什么问题，但是在子组件中也使用了 "),a("code",[t._v("el")]),t._v(" 选项，这就会得到如上警告。这说明了一个问题，即在策略函数中如果拿不到 "),a("code",[t._v("vm")]),t._v(" 参数，那说明处理的是子组件选项。所以问题来了，为什么通过判断 "),a("code",[t._v("vm")]),t._v(" 是否存在，就能判断出是否是子组件呢？那首先我们要搞清楚策略函数中的 "),a("code",[t._v("vm")]),t._v(" 参数是哪里来的。首先我们还是看一下 "),a("code",[t._v("mergeField")]),t._v(" 函数：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeField")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" strat "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" strats"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" defaultStrat\n  options"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("strat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("函数体的第二句代码中在调用策略函数的时候，第三个参数 "),a("code",[t._v("vm")]),t._v(" 就是我们在策略函数中使用的那个 "),a("code",[t._v("vm")]),t._v("，那么这里的 "),a("code",[t._v("vm")]),t._v(" 是谁呢？它实际上是从 "),a("code",[t._v("mergeOptions")]),t._v(" 函数透传过来的，因为 "),a("code",[t._v("mergeOptions")]),t._v(" 函数的第三个参数就是 "),a("code",[t._v("vm")]),t._v("。我们知道在 "),a("code",[t._v("_init")]),t._v(" 方法中调用 "),a("code",[t._v("mergeOptions")]),t._v(" 函数时第三个参数就是当前 "),a("code",[t._v("Vue")]),t._v(" 实例：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// _init 方法中调用 mergeOptions 函数，第三个参数是 Vue 实例")]),t._v("\nvm"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeOptions")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("resolveConstructorOptions")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("constructor"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  options "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  vm\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("所以我们可以理解为：策略函数中的 "),a("code",[t._v("vm")]),t._v(" 来自于 "),a("code",[t._v("mergeOptions")]),t._v(" 函数的第三个参数。所以当调用 "),a("code",[t._v("mergeOptions")]),t._v(" 函数且不传递第三个参数的时候，那么在策略函数中就拿不到 "),a("code",[t._v("vm")]),t._v(" 参数。所以我们可以猜测到一件事，那就是 "),a("code",[t._v("mergeOptions")]),t._v(" 函数除了在 "),a("code",[t._v("_init")]),t._v(" 方法中被调用之外，还在其他地方被调用，且没有传递第三个参数。那么到底是在哪里被调用的呢？这里可以先明确的告诉大家，就在 "),a("code",[t._v("Vue.extend")]),t._v(" 方法中被调用的，大家可以打开 "),a("code",[t._v("core/global-api/extend.js")]),t._v(" 文件找到 "),a("code",[t._v("Vue.extend")]),t._v(" 方法，其中有这么一段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Sub"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("options "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeOptions")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  Super"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  extendOptions\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以发现，此时调用 "),s("code",[this._v("mergeOptions")]),this._v(" 函数就没有传递第三个参数，也就是说通过 "),s("code",[this._v("Vue.extend")]),this._v(" 创建子类的时候 "),s("code",[this._v("mergeOptions")]),this._v(" 会被调用，此时策略函数就拿不到第三个参数。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("所以现在就比较明朗了，在策略函数中通过判断是否存在 "),a("code",[t._v("vm")]),t._v(" 就能够得知 "),a("code",[t._v("mergeOptions")]),t._v(" 是在实例化时调用(使用 "),a("code",[t._v("new")]),t._v(" 操作符走 "),a("code",[t._v("_init")]),t._v(" 方法)还是在继承时调用("),a("code",[t._v("Vue.extend")]),t._v(")，而子组件的实现方式就是通过实例化子类完成的，子类又是通过 "),a("code",[t._v("Vue.extend")]),t._v(" 创造出来的，所以我们就能通过对 "),a("code",[t._v("vm")]),t._v(" 的判断而得知是否是子组件了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以最终的结论就是："),s("em",[this._v("如果策略函数中拿不到 "),s("code",[this._v("vm")]),this._v(" 参数，那么处理的就是子组件的选项")]),this._v("，花了大量的口舌解释了策略函数中判断 "),s("code",[this._v("vm")]),this._v(" 的意义，实际上这些解释是必要的。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们接着看 "),a("code",[t._v("strats.el")]),t._v(" 和 "),a("code",[t._v("strats.propsData")]),t._v(" 策略函数的代码，在 "),a("code",[t._v("if")]),t._v(" 判断分支下面，直接调用了 "),a("code",[t._v("defaultStrat")]),t._v(" 函数并返回：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("defaultStrat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("code",[this._v("defaultStrat")]),this._v(" 函数就定义在 "),s("code",[this._v("options.js")]),this._v(" 文件内，源码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("/**\n * Default strategy.\n */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token function-variable function"}},[t._v("defaultStrat")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" childVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" undefined\n    "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" parentVal\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" childVal\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("实际上 "),s("code",[this._v("defaultStrat")]),this._v(" 函数就如同它的名字一样，它是一个默认的策略，当一个选项不需要特殊处理的时候就是用默认的合并策略，它的逻辑很简单：只要子选项不是 "),s("code",[this._v("undefined")]),this._v(" 那么就是用子选项，否则使用父选项。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("但是大家还要注意一点，"),a("code",[t._v("strats.el")]),t._v(" 和 "),a("code",[t._v("strats.propsData")]),t._v(" 这两个策略函数是只有在非生产环境才有的，在生产环境下访问这两个函数将会得到 "),a("code",[t._v("undefined")]),t._v("，那这个时候 "),a("code",[t._v("mergeField")]),t._v(" 函数的第一句代码就起作用了：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 当一个选项没有对应的策略函数时，使用默认策略")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" strat "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" strats"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" defaultStrat\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以在生产环境将直接使用默认的策略函数 "),s("code",[this._v("defaultStrat")]),this._v(" 来处理 "),s("code",[this._v("el")]),this._v(" 和 "),s("code",[this._v("propsData")]),this._v(" 这两个选项。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"选项-data-的合并策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#选项-data-的合并策略","aria-hidden":"true"}},[this._v("#")]),this._v(" 选项 data 的合并策略")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("下面我们接着按照顺序看 "),s("code",[this._v("options.js")]),this._v(" 文件的代码，接下来定义了两个函数："),s("code",[this._v("mergeData")]),this._v(" 以及 "),s("code",[this._v("mergeDataOrFn")]),this._v("，我们暂且不关注这两个函数的作用。暂且跳过继续看下面的代码，接下来的代码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("strats"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function-variable function"}},[t._v("data")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  vm"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Component\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Function "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("childVal "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" childVal "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{attrs:{class:"token string"}},[t._v("'The \"data\" option should be a function '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),a("span",{attrs:{class:"token string"}},[t._v("'that returns a per-instance value in component '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n        "),a("span",{attrs:{class:"token string"}},[t._v("'definitions.'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        vm\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" parentVal\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeDataOrFn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeDataOrFn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这段代码的作用是在 "),s("code",[this._v("strats")]),this._v(" 策略对象上添加 "),s("code",[this._v("data")]),this._v(" 策略函数，用来合并处理 "),s("code",[this._v("data")]),this._v(" 选项的。我们看看这个策略函数的内容，首先是一个判断分支：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("与 "),a("code",[t._v("el")]),t._v(" 和 "),a("code",[t._v("propsData")]),t._v(" 这两个策略函数相同，先判断是否传递了 "),a("code",[t._v("vm")]),t._v(" 这个参数，我们知道当没有 "),a("code",[t._v("vm")]),t._v(" 参数时，说明处理的是子组件的选项，那我们就看看对于子组件的选项它是如何处理的，"),a("code",[t._v("if")]),t._v(" 判断语句块内的代码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("childVal "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" childVal "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'The \"data\" option should be a function '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'that returns a per-instance value in component '")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n    "),a("span",{attrs:{class:"token string"}},[t._v("'definitions.'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    vm\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" parentVal\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeDataOrFn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("首先判断是否传递了子组件的 "),a("code",[t._v("data")]),t._v(" 选项(即："),a("code",[t._v("childVal")]),t._v(")，并且检测 "),a("code",[t._v("childVal")]),t._v(" 的类型是不是 "),a("code",[t._v("function")]),t._v("，如果 "),a("code",[t._v("childVal")]),t._v(" 的类型不是 "),a("code",[t._v("function")]),t._v(" 则会给你一个警告，也就是说 "),a("code",[t._v("childVal")]),t._v(" 应该是一个函数，如果不是函数会提示你 "),a("code",[t._v("data")]),t._v(" 的类型必须是一个函数，这就是我们知道的："),a("em",[t._v("子组件中的 "),a("code",[t._v("data")]),t._v(" 必须是一个返回对象的函数")]),t._v("。如果不是函数，除了给你一段警告之外，会直接返回 "),a("code",[t._v("parentVal")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果 "),s("code",[this._v("childVal")]),this._v(" 是函数类型，那说明满足了子组件的 "),s("code",[this._v("data")]),this._v(" 选项需要是一个函数的要求，那么就直接返回 "),s("code",[this._v("mergeDataOrFn")]),this._v(" 函数的执行结果：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeDataOrFn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面的情况是在 "),a("code",[t._v("strats.data")]),t._v(" 策略函数拿不到 "),a("code",[t._v("vm")]),t._v(" 参数时的情况，如果拿到了 "),a("code",[t._v("vm")]),t._v(" 参数，那么说明处理的选项不是子组件的选项，而是正常使用 "),a("code",[t._v("new")]),t._v(" 操作符创建实例时的选项，这个时候则直接返回 "),a("code",[t._v("mergeDataOrFn")]),t._v(" 的函数执行结果，但是会多透传一个参数 "),a("code",[t._v("vm")]),t._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeDataOrFn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("通过上面的分析我们得知一件事，即 "),a("code",[t._v("strats.data")]),t._v(" 策略函数无论合并处理的是子组件的选项还是非子组件的选项，其最终都是调用 "),a("code",[t._v("mergeDataOrFn")]),t._v(" 函数进行处理的，并且以 "),a("code",[t._v("mergeDataOrFn")]),t._v(" 函数的返回值作为策略函数的最终返回值。有一点不同的是在处理非子组件选项的时候所调用的 "),a("code",[t._v("mergeDataOrFn")]),t._v(" 函数多传递了一个参数 "),a("code",[t._v("vm")]),t._v("。所以接下来我们要做的事儿就是看看 "),a("code",[t._v("mergeDataOrFn")]),t._v(" 的代码，看一看它的返回值是什么，因为它的返回值就等价于 "),a("code",[t._v("strats.data")]),t._v(" 策略函数的返回值。"),a("code",[t._v("mergeDataOrFn")]),t._v(" 函数的源码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("/**\n * Data\n */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeDataOrFn")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  vm"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Component\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Function "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// in a Vue.extend merge, both should be functions")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" parentVal\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" childVal\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// when parentVal & childVal are both present,")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// we need to return a function that returns the")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// merged result of both functions... no need to")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// check if parentVal is a function here because")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// it has to be a function to pass previous merges.")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergedDataFn")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeData")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" childVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" parentVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" parentVal\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergedInstanceDataFn")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// instance merge")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" instanceData "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" childVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v("\n        "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" childVal\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" defaultData "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" parentVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v("\n        "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" parentVal\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instanceData"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeData")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instanceData"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" defaultData"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" defaultData\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这个函数整体由 "),a("code",[t._v("if")]),t._v(" 判断分支语句块组成，首先对 "),a("code",[t._v("vm")]),t._v(" 进行判断，我们知道无论是子组件选项还是非子组件选项 "),a("code",[t._v("strats.data")]),t._v(" 策略函数都是通过调用 "),a("code",[t._v("mergeDataOrFn")]),t._v(" 函数来完成处理的，且处理非子组件选项的时候要比处理子组件选项时多传递了一个参数 "),a("code",[t._v("vm")]),t._v("，这就使得 "),a("code",[t._v("mergeDataOrFn")]),t._v(" 也能通过是否有 "),a("code",[t._v("vm")]),t._v(" 来区分处理的是不是子组件选项。如果没有拿到 "),a("code",[t._v("vm")]),t._v(" 参数的话，那说明处理的是子组件选项，程序会走 "),a("code",[t._v("if")]),t._v(" 分支，实际上我们可以看到这里有段注释：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token comment"}},[this._v("// in a Vue.extend merge, both should be functions")]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这段注释的意思是：选项是在调用 "),s("code",[this._v("Vue.extend")]),this._v(" 函数时进行合并处理的，此时父子 "),s("code",[this._v("data")]),this._v(" 选项都应该是函数。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这再次说明了，当拿不到 "),a("code",[t._v("vm")]),t._v(" 这个参数的时候，合并操作是在 "),a("code",[t._v("Vue.extend")]),t._v(" 中进行的，也就是在处理子组件的选项。而且此时 "),a("code",[t._v("childVal")]),t._v(" 和 "),a("code",[t._v("parentVal")]),t._v(" 都应该是函数，那么这里真的能保证 "),a("code",[t._v("childVal")]),t._v(" 和 "),a("code",[t._v("parentVal")]),t._v(" 都是函数了吗？其实是可以的，我们后面会讲到。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" parentVal\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" childVal\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们看第一个 "),a("code",[t._v("if")]),t._v(" 语句块，如果没有 "),a("code",[t._v("childVal")]),t._v("，也就是说子组件的选项中没有 "),a("code",[t._v("data")]),t._v(" 选项，那么直接返回 "),a("code",[t._v("parentVal")]),t._v("，比如下面的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Vue"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("extend")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们使用 "),a("code",[t._v("Vue.extend")]),t._v(" 函数创建子类的时候传递的子组件选项是一个空对象，即没有 "),a("code",[t._v("data")]),t._v(" 选项，那么此时 "),a("code",[t._v("parentVal")]),t._v(" 实际上就是 "),a("code",[t._v("Vue.options")]),t._v("，由于 "),a("code",[t._v("Vue.options")]),t._v(" 上也没有 "),a("code",[t._v("data")]),t._v(" 这个属性，所以压根就不会执行 "),a("code",[t._v("strats.data")]),t._v(" 策略函数，也就更不会执行 "),a("code",[t._v("mergeDataOrFn")]),t._v(" 函数，有的同学可能会问：既然都没有执行，那么这里的 "),a("code",[t._v("return parentVal")]),t._v(" 是不是多余的？当然不多余，因为 "),a("code",[t._v("parentVal")]),t._v(" 存在有值的情况。那么什么时候才会出现 "),a("code",[t._v("childVal")]),t._v(" 不存在但是 "),a("code",[t._v("parentVal")]),t._v(" 存在的情况呢？看下面的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Parent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Vue"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("extend")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  data"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      test"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Child "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("extend")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面的代码中 "),a("code",[t._v("Parent")]),t._v(" 类继承了 "),a("code",[t._v("Vue")]),t._v("，而 "),a("code",[t._v("Child")]),t._v(" 又继承了 "),a("code",[t._v("Parent")]),t._v("，关键就在于我们使用 "),a("code",[t._v("Parent.extend")]),t._v(" 创建 "),a("code",[t._v("Child")]),t._v(" 子类的时候，对于 "),a("code",[t._v("Child")]),t._v(" 类来讲，"),a("code",[t._v("childVal")]),t._v(" 不存在，因为我们没有传递 "),a("code",[t._v("data")]),t._v(" 选项，但是 "),a("code",[t._v("parentVal")]),t._v(" 存在，即 "),a("code",[t._v("Parent.options")]),t._v(" 下的 "),a("code",[t._v("data")]),t._v(" 选项，那么 "),a("code",[t._v("Parent.options")]),t._v(" 是哪里来的呢？实际就是 "),a("code",[t._v("Vue.extend")]),t._v(" 函数内使用 "),a("code",[t._v("mergeOptions")]),t._v(" 生成的，所以此时 "),a("code",[t._v("parentVal")]),t._v(" 必定是个函数，因为 "),a("code",[t._v("strats.data")]),t._v(" 策略函数在处理 "),a("code",[t._v("data")]),t._v(" 选项后返回的始终是一个函数。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" parentVal\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" childVal\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("由于 "),a("code",[t._v("childVal")]),t._v(" 和 "),a("code",[t._v("parentVal")]),t._v(" 必定会有其一，否则便不会执行 "),a("code",[t._v("strats.data")]),t._v(" 策略函数，所以上面判断的意思就是："),a("em",[t._v("如果没有子选项则使用父选项，没有父选项就直接使用子选项，且这两个选项都能保证是函数")]),t._v("，如果父子选项同时存在，则代码继续进行，将执行下面的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// when parentVal & childVal are both present,")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// we need to return a function that returns the")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// merged result of both functions... no need to")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// check if parentVal is a function here because")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// it has to be a function to pass previous merges.")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergedDataFn")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeData")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" childVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" parentVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" parentVal\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("也就是说，当父子选项同时存在，那么就返回一个函数 "),a("code",[t._v("mergedDataFn")]),t._v("，注意：此时代码运行就结束了，因为函数已经返回了("),a("code",[t._v("return")]),t._v(")，至于 "),a("code",[t._v("mergedDataFn")]),t._v(" 函数里面又返回了 "),a("code",[t._v("mergeData")]),t._v(" 函数的执行结果这句代码目前还没有执行。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("以上就是 "),a("code",[t._v("strats.data")]),t._v(" 策略函数在处理子组件的 "),a("code",[t._v("data")]),t._v(" 选项时所做的事，我们可以发现 "),a("code",[t._v("mergeDataOrFn")]),t._v(" 函数在处理子组件选项时返回的总是一个函数，这也就间接导致 "),a("code",[t._v("strats.data")]),t._v(" 策略函数在处理子组件选项时返回的也总是一个函数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("说完了处理子选项的情况，我们再看看处理非子选项的情况，也就是使用 "),s("code",[this._v("new")]),this._v(" 操作符创建实例时的情况，此时程序直接执行 "),s("code",[this._v("strats.data")]),this._v(" 函数的最后一句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeDataOrFn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们发现同样是调用 "),a("code",[t._v("mergeDataOrFn")]),t._v(" 函数，只不过这个时候传递了 "),a("code",[t._v("vm")]),t._v(" 参数，也就是说这将会执行 "),a("code",[t._v("mergeDataOrFn")]),t._v(" 的 "),a("code",[t._v("else")]),t._v(" 分支：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergedInstanceDataFn")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// instance merge")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" instanceData "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" childVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v("\n      "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" childVal\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" defaultData "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" parentVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v("\n      "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" parentVal\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instanceData"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeData")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instanceData"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" defaultData"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" defaultData\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果走了 "),a("code",[t._v("else")]),t._v(" 分支的话那么就直接返回 "),a("code",[t._v("mergedInstanceDataFn")]),t._v(" 函数，注意此时的 "),a("code",[t._v("mergedInstanceDataFn")]),t._v(" 函数同样还没有执行，它是 "),a("code",[t._v("mergeDataOrFn")]),t._v(" 函数的返回值，所以这再次说明了一个问题："),a("em",[a("code",[t._v("mergeDataOrFn")]),t._v(" 函数永远返回一个函数")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" v "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'#app'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  data"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    test"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们的 "),s("code",[this._v("data")]),this._v(" 选项在经过 "),s("code",[this._v("mergeOptions")]),this._v(" 处理之后将变成一个函数，且根据我们的分析，它应该就是 "),s("code",[this._v("mergedInstanceDataFn")]),this._v(" 函数，我们可以在控制台打印如下信息：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"http://ovjvjtt4l.bkt.clouddn.com/2017-10-20-102839.jpg",alt:""}})])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们可以发现 "),a("code",[t._v("data")]),t._v(" 选项确实被 "),a("code",[t._v("mergeOptions")]),t._v(" 处理成了一个函数，且当 "),a("code",[t._v("data")]),t._v(" 选项为非子组件的选项时，该函数就是 "),a("code",[t._v("mergedInstanceDataFn")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("一个简单的总结，现在我们了解到了一个事实，即 "),s("code",[this._v("data")]),this._v(" 选项最终被 "),s("code",[this._v("mergeOptions")]),this._v(" 函数处理成了一个函数，当合并处理的是子组件的选项时 "),s("code",[this._v("data")]),this._v(" 函数可能是以下三者之一：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("1、就是 "),s("code",[this._v("data")]),this._v(" 本身，因为子组件的 "),s("code",[this._v("data")]),this._v(" 选项本身就是一个函数，即如下 "),s("code",[this._v("mergeDataOrFn")]),this._v(" 函数的代码段所示：")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeDataOrFn")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  vm"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Component\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Function "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 返回子组件的 data 选项本身")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" childVal\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("2、父类的 "),s("code",[this._v("data")]),this._v(" 选项，如下代码段所示：：")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeDataOrFn")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  vm"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Component\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Function "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 返回父类的 data 选项")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" parentVal\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("ul",[s("li",[this._v("3、"),s("code",[this._v("mergedDataFn")]),this._v(" 函数，如下代码段所示：")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeDataOrFn")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  vm"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Component\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Function "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 返回 mergedDataFn 函数")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergedDataFn")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeData")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" childVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" parentVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" parentVal\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当合并处理的是非子组件的选项时 "),s("code",[this._v("data")]),this._v(" 函数为 "),s("code",[this._v("mergedInstanceDataFn")]),this._v(" 函数，如下代码段所示：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeDataOrFn")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  vm"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Component\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Function "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("...")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 当合并处理的是非子组件的选项时 `data` 函数为 `mergedInstanceDataFn` 函数")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergedInstanceDataFn")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// instance merge")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" instanceData "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" childVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v("\n        "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" childVal\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" defaultData "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" parentVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v("\n        "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" parentVal\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instanceData"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeData")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instanceData"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" defaultData"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n        "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" defaultData\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以这就是我们一直强调的："),s("em",[s("code",[this._v("data")]),this._v(" 选项最终被处理为一个函数")]),this._v("。但是根据我们之前的分析可知，函数分几种情况，但它们都有一个共同的特点，即："),s("em",[this._v("这些函数的执行结果就是最终的数据")]),this._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们可以发现 "),a("code",[t._v("mergedDataFn")]),t._v(" 和 "),a("code",[t._v("mergedInstanceDataFn")]),t._v(" 这两个函数有一个共同的特点，内部都调用了 "),a("code",[t._v("mergeData")]),t._v(" 处理数据并返回，我们先看一下 "),a("code",[t._v("mergedDataFn")]),t._v(" 函数，其源码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergedDataFn")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeData")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" childVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" parentVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" parentVal\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这个函数直接返回了 "),s("code",[this._v("mergeData")]),this._v(" 函数的执行结果，再看看 "),s("code",[this._v("mergedInstanceDataFn")]),this._v(" 函数，其源码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergedInstanceDataFn")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// instance merge")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" instanceData "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" childVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" childVal\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" defaultData "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" parentVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" parentVal\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instanceData"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeData")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("instanceData"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" defaultData"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" defaultData\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们注意到 "),s("code",[this._v("mergedDataFn")]),this._v(" 和 "),s("code",[this._v("mergedInstanceDataFn")]),this._v(" 这两个函数都有类似这样的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" childVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" childVal\n"),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" parentVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" parentVal\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们知道 "),a("code",[t._v("childVal")]),t._v(" 要么是子组件的选项，要么是使用 "),a("code",[t._v("new")]),t._v(" 操作符创建实例时的选项，无论是哪一种，总之 "),a("code",[t._v("childVal")]),t._v(" 要么是函数，要么就是一个纯对象。所以如果是函数的话就通过执行该函数从而获取到一个纯对象，所以类似上面那段代码中判断 "),a("code",[t._v("childVal")]),t._v(" 和 "),a("code",[t._v("parentVal")]),t._v(" 的类型是否是函数的目的只有一个，获取数据对象(纯对象)。所以 "),a("code",[t._v("mergedDataFn")]),t._v(" 和 "),a("code",[t._v("mergedInstanceDataFn")]),t._v(" 函数内部调用 "),a("code",[t._v("mergeData")]),t._v(" 方法时传递的两个参数就是两个纯对象(当然你可以简单的理解为两个JSON对象)。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以说既然知道了 "),s("code",[this._v("mergeData")]),this._v(" 函数接收的两个参数就是两个纯对象，那么再看看 "),s("code",[this._v("mergeData")]),this._v(" 函数的代码就轻松多了，它才是终极合并策略，其源码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("/**\n * Helper that recursively merges two data objects together.\n */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeData")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("to"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 没有 from 直接返回 to")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token keyword"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" to\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" toVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fromVal\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" keys "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("keys")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 遍历 from 的 key")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" keys"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    key "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" keys"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    toVal "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" to"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    fromVal "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 如果 from 对象中的 key 不在 to 对象中，则使用 set 函数为 to 对象设置 key 及相应的值")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token function"}},[t._v("hasOwn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("to"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token keyword"}},[t._v("set")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("to"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fromVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 如果 from 对象中的 key 也在 to 对象中，且这两个属性的值都是纯对象则递归进行深度合并")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token function"}},[t._v("isPlainObject")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("toVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("isPlainObject")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("fromVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{attrs:{class:"token function"}},[t._v("mergeData")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("toVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" fromVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 其他情况什么都不做")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" to\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("mergeData")]),t._v(" 函数接收两个参数 "),a("code",[t._v("to")]),t._v(" 和 "),a("code",[t._v("from")]),t._v("，根据 "),a("code",[t._v("mergeData")]),t._v(" 函数被调用时参数的传递顺序我们知道，"),a("code",[t._v("to")]),t._v(" 对应的是 "),a("code",[t._v("childVal")]),t._v(" 产生的纯对象，"),a("code",[t._v("from")]),t._v(" 对应 "),a("code",[t._v("parentVal")]),t._v(" 产生的纯对象，我们看 "),a("code",[t._v("mergeData")]),t._v(" 第一句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token keyword"}},[t._v("from")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" to\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果没有 "),a("code",[t._v("from")]),t._v(" 则直接返回 "),a("code",[t._v("to")]),t._v("，也就是说如果没有 "),a("code",[t._v("parentVal")]),t._v(" 产生的值，就直接使用 "),a("code",[t._v("childVal")]),t._v(" 产生的值。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果有 "),s("code",[this._v("parentVal")]),this._v(" 产生的值，则代码继续向下运行，我们看 "),s("code",[this._v("mergeData")]),this._v(" 最后的返回值：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token keyword"}},[this._v("return")]),this._v(" to\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("其返回的仍是 "),a("code",[t._v("to")]),t._v(" 对象，所以你应该能猜的到 "),a("code",[t._v("mergeData")]),t._v(" 函数的作用，可以简单理解为："),a("em",[t._v("将 "),a("code",[t._v("from")]),t._v(" 对象的属性混合到 "),a("code",[t._v("to")]),t._v(" 对象中，也可以说是将 "),a("code",[t._v("parentVal")]),t._v(" 对象的属性混合到 "),a("code",[t._v("childVal")]),t._v(" 中")]),t._v("，最后返回的是处理后的 "),a("code",[t._v("childVal")]),t._v(" 对象。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[a("code",[t._v("mergeData")]),t._v(" 的具体做法就是像上面 "),a("code",[t._v("mergeData")]),t._v(" 函数的代码段中所注释的那样，对 "),a("code",[t._v("from")]),t._v(" 对象的 "),a("code",[t._v("key")]),t._v(" 进行遍历：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[a("p",[t._v("如果 "),a("code",[t._v("from")]),t._v(" 对象中的 "),a("code",[t._v("key")]),t._v(" 不在 "),a("code",[t._v("to")]),t._v(" 对象中，则使用 "),a("code",[t._v("set")]),t._v(" 函数为 "),a("code",[t._v("to")]),t._v(" 对象设置 "),a("code",[t._v("key")]),t._v(" 及相应的值。")])]),a("li",[a("p",[t._v("如果 "),a("code",[t._v("from")]),t._v(" 对象中的 "),a("code",[t._v("key")]),t._v(" 在 "),a("code",[t._v("to")]),t._v(" 对象中，且这两个属性的值都是纯对象则递归的调用 "),a("code",[t._v("mergeData")]),t._v(" 函数进行深度合并。")])]),a("li",[a("p",[t._v("其他情况不做处理。")])])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面提到了一个 "),a("code",[t._v("set")]),t._v(" 函数，这个函数根据 "),a("code",[t._v("options.js")]),t._v(" 文件头部的引用关系，可知这个函数来自于 "),a("code",[t._v("core/observer/index.js")]),t._v(" 文件，实际上这个 "),a("code",[t._v("set")]),t._v(" 函数就是 "),a("code",[t._v("Vue")]),t._v(" 暴露给我们的全局API "),a("code",[t._v("Vue.set")]),t._v("。在这里由于我们还没有讲到 "),a("code",[t._v("set")]),t._v(" 函数的具体实现，所以你就可以简单理解为 "),a("code",[t._v("set")]),t._v(" 函数的功能与我们前面遇到过的 "),a("code",[t._v("extend")]),t._v(" 工具函数功能相似即可了。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("所以我们知道了 "),a("code",[t._v("mergeData")]),t._v(" 函数的执行结果才是真正的数据对象，由于 "),a("code",[t._v("mergedDataFn")]),t._v(" 和 "),a("code",[t._v("mergedInstanceDataFn")]),t._v(" 这两个函数的返回值就是 "),a("code",[t._v("mergeData")]),t._v(" 函数的执行结果，所以 "),a("code",[t._v("mergedDataFn")]),t._v(" 和 "),a("code",[t._v("mergedInstanceDataFn")]),t._v(" 函数的执行将会得到数据对象，我们还知道 "),a("code",[t._v("data")]),t._v(" 选项会被 "),a("code",[t._v("mergeOptions")]),t._v(" 处理成函数，比如处理成 "),a("code",[t._v("mergedInstanceDataFn")]),t._v("，所以："),a("em",[t._v("最终得到的 "),a("code",[t._v("data")]),t._v(" 选项是一个函数，且该函数的执行结果就是最终的数据对象")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"一、为什么最终-strats-data-会被处理成一个函数？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一、为什么最终-strats-data-会被处理成一个函数？","aria-hidden":"true"}},[this._v("#")]),this._v(" 一、为什么最终 "),s("code",[this._v("strats.data")]),this._v(" 会被处理成一个函数？")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这是因为，通过函数返回数据对象，保证了每个组件实例都有一个唯一的数据副本，避免了组件间数据互相影响。后面讲到 "),s("code",[this._v("Vue")]),this._v(" 的初始化的时候大家会看到，在初始化数据状态的时候，就是通过执行 "),s("code",[this._v("strats.data")]),this._v(" 函数来获取数据并对其进行处理的。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"二、为什么不在合并阶段就把数据合并好，而是要等到初始化的时候再合并数据？"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#二、为什么不在合并阶段就把数据合并好，而是要等到初始化的时候再合并数据？","aria-hidden":"true"}},[this._v("#")]),this._v(" 二、为什么不在合并阶段就把数据合并好，而是要等到初始化的时候再合并数据？")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("这个问题是什么意思呢？我们知道合并阶段 "),s("code",[this._v("strats.data")]),this._v(" 将被处理成一个函数，但是这个函数并没有被执行，而是到了后面初始化的阶段才执行的，这个时候才会调用 "),s("code",[this._v("mergeData")]),this._v(" 对数据进行合并处理，那这么做的目的是什么呢？")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("其实这么做是有原因的，后面讲到 "),a("code",[t._v("Vue")]),t._v(" 的初始化的时候，大家就会发现 "),a("code",[t._v("inject")]),t._v(" 和 "),a("code",[t._v("props")]),t._v(" 这两个选项的初始化是先于 "),a("code",[t._v("data")]),t._v(" 选项的，这就保证了我们能够使用 "),a("code",[t._v("props")]),t._v(" 初始化 "),a("code",[t._v("data")]),t._v(" 中的数据，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 子组件：使用 props 初始化子组件的 childData ")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Child "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  template"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'<span></span>'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("data")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      childData"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parentData\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  props"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{attrs:{class:"token string"}},[t._v("'parentData'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("created")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 这里将输出 parent")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("childData"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" vm "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'#app'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 通过 props 向子组件传递数据")]),t._v("\n    template"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'<child parent-data=\"parent\" />'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    components"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      Child\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如上例所示，子组件的数据 "),s("code",[this._v("childData")]),this._v(" 的初始值就是 "),s("code",[this._v("parentData")]),this._v(" 这个 "),s("code",[this._v("props")]),this._v("。而之所以能够这样做的原因有两个")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("1、由于 "),a("code",[t._v("props")]),t._v(" 的初始化先于 "),a("code",[t._v("data")]),t._v(" 选项的初始化")]),a("li",[t._v("2、"),a("code",[t._v("data")]),t._v(" 选项是在初始化的时候才求值的，你也可以理解为在初始化的时候才使用 "),a("code",[t._v("mergeData")]),t._v(" 进行数据合并。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h3",{attrs:{id:"三、你可以这么做。"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三、你可以这么做。","aria-hidden":"true"}},[this._v("#")]),this._v(" 三、你可以这么做。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在上面的例子中，子组件的 "),s("code",[this._v("data")]),this._v(" 选项我们是这么写的：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("data")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    childData"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parentData\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("data")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    childData"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("parentData\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 或者使用更简单的解构赋值")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("data")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" parentData "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    childData"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" parentData\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们可以通过解构赋值的方式，也就是说 "),s("code",[this._v("data")]),this._v(" 函数的参数就是当前实例对象。那么这个参数是在哪里传递进来的呢？其实有两个地方，其中一个地方我们前面见过了，如下面这段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergedDataFn")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeData")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" childVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("typeof")]),t._v(" parentVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'function'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("call")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("this")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" parentVal\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("注意这里的 "),a("code",[t._v("childVal.call(this, this)")]),t._v(" 和 "),a("code",[t._v("parentVal.call(this, this)")]),t._v("，关键在于 "),a("code",[t._v("call(this, this)")]),t._v("，可以看到，第一个 "),a("code",[t._v("this")]),t._v(" 指定了 "),a("code",[t._v("data")]),t._v(" 函数的作用域，而第二个 "),a("code",[t._v("this")]),t._v(" 就是传递给 "),a("code",[t._v("data")]),t._v(" 函数的参数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当然了仅仅在这里这么做是不够的，比如 "),s("code",[this._v("mergedDataFn")]),this._v(" 前面的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" parentVal\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" childVal\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在这段代码中，直接将 "),a("code",[t._v("parentVal")]),t._v(" 或 "),a("code",[t._v("childVal")]),t._v(" 返回了，我们知道这里的 "),a("code",[t._v("parentVal")]),t._v(" 和 "),a("code",[t._v("childVal")]),t._v(" 就是 "),a("code",[t._v("data")]),t._v(" 函数，由于被直接返回，所以并没有指定其运行的作用域，且也没有传递当前实例作为参数，所以我们必然还是在其他地方做这些事情，而这个地方就是我们说的第二个地方，它在哪里呢？当然是初始化的时候，后面我们会讲到的，如果这里大家没有理解也不用担心。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"生命周期钩子选项的合并策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#生命周期钩子选项的合并策略","aria-hidden":"true"}},[this._v("#")]),this._v(" 生命周期钩子选项的合并策略")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在我们看了完 "),s("code",[this._v("strats.data")]),this._v(" 策略函数，我们继续按照 "),s("code",[this._v("options.js")]),this._v(" 文件的顺序看代码，接下来的一段代码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("/**\n * Hooks and props are merged as arrays.\n */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeHook")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Function"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Function "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Function"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Function"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" childVal\n    "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" parentVal\n      "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("concat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" childVal\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" parentVal\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token constant"}},[t._v("LIFECYCLE_HOOKS")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("forEach")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hook "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  strats"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("hook"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" mergeHook\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("看上去，这段代码貌似是用来合并生命周期钩子的，事实上的确是这样，我们看看它是怎么做的，首先上面的代码由两部分组成："),s("code",[this._v("mergeHook")]),this._v(" 函数和一个 "),s("code",[this._v("forEach")]),this._v(" 语句。我们先看下面的 "),s("code",[this._v("forEach")]),this._v(" 语句：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token constant"}},[t._v("LIFECYCLE_HOOKS")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("forEach")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("hook "),a("span",{attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  strats"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("hook"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" mergeHook\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("使用 "),a("code",[t._v("forEach")]),t._v(" 遍历 "),a("code",[t._v("LIFECYCLE_HOOKS")]),t._v(" 常量，那说明这个常量应该是一个数组，我们根据 "),a("code",[t._v("options.js")]),t._v(" 文件头部的引用关系可知 "),a("code",[t._v("LIFECYCLE_HOOKS")]),t._v(" 常量来自于 "),a("code",[t._v("shared/constants.js")]),t._v(" 文件，我们打开这个文件找到 "),a("code",[t._v("LIFECYCLE_HOOKS")]),t._v(" 常量如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("LIFECYCLE_HOOKS")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'beforeCreate'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'created'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'beforeMount'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'mounted'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'beforeUpdate'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'updated'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'beforeDestroy'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'destroyed'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'activated'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'deactivated'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'errorCaptured'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以发现 "),s("code",[this._v("LIFECYCLE_HOOKS")]),this._v(" 常量实际上是由与生命周期钩子同名的字符串组成的数组。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("所以现在再回头来看那段 "),a("code",[t._v("forEach")]),t._v(" 语句可知，它的作用就是在 "),a("code",[t._v("strats")]),t._v(" 策略对象上添加用来合并各个生命周期钩子选项的策略函数，并且这些生命周期钩子选项的策略函数相同："),a("em",[t._v("都是 "),a("code",[t._v("mergeHook")]),t._v(" 函数")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("那么 "),s("code",[this._v("mergeHook")]),this._v(" 函数是怎样合并生命周期选项的呢？我们看看 "),s("code",[this._v("mergeHook")]),this._v(" 函数的代码，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeHook")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Function"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Function "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Function"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Function"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" childVal\n    "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" parentVal\n      "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("concat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" childVal\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" parentVal\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("整个函数体由三组"),s("em",[this._v("三目运算符")]),this._v("组成，有一点值得大家学习的就是这里写三目运算符的方式，是不是感觉非常地清晰易读？那么这段代码的分析我们同样使用与上面代码相同的格式来写：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token function"}},[t._v("retrun")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("是否有 childVal，即判断组件的选项中是否有对应名字的生命周期钩子函数"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" 如果有 childVal 则判断是否有 parentVal\n    "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" 如果有 parentVal 则使用 concat 方法将二者合并为一个数组\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 如果没有 parentVal 则判断 childVal 是不是一个数组\n      "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" 如果 childVal 是一个数组则直接返回\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 否则将其作为数组的元素，然后返回数组\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" 如果没有 childVal 则直接返回 parentVal\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如上就是对 "),a("code",[t._v("mergeHook")]),t._v(" 函数的解读，我们可以发现，在经过 "),a("code",[t._v("mergeHook")]),t._v(" 函数处理之后，组件选项的生命周期钩子函数被合并成一个数组。第一个三目运算符需要注意，它判断是否有 "),a("code",[t._v("childVal")]),t._v("，即组件的选项是否写了生命周期钩子函数，如果没有则直接返回了 "),a("code",[t._v("parentVal")]),t._v("，这里有个问题："),a("code",[t._v("parentVal")]),t._v(" 一定是数组吗？答案是："),a("em",[t._v("如果有 "),a("code",[t._v("parentVal")]),t._v(" 那么其一定是数组，如果没有 "),a("code",[t._v("parentVal")]),t._v(" 那么 "),a("code",[t._v("strats[hooks]")]),t._v(" 函数根本不会执行")]),t._v("。我们以 "),a("code",[t._v("created")]),t._v(" 生命周期钩子函数为例：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  created"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'created'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果以这段代码为例，那么对于 "),a("code",[t._v("strats.created")]),t._v(" 策略函数来讲(注意这里的 "),a("code",[t._v("strats.created")]),t._v(" 就是 "),a("code",[t._v("mergeHooks")]),t._v(")，"),a("code",[t._v("childVal")]),t._v(" 就是我们例子中的 "),a("code",[t._v("created")]),t._v(" 选项，它是一个函数。"),a("code",[t._v("parentVal")]),t._v(" 应该是 "),a("code",[t._v("Vue.options.created")]),t._v("，但 "),a("code",[t._v("Vue.options.created")]),t._v(" 是不存在的，所以最终经过 "),a("code",[t._v("strats.created")]),t._v(" 函数的处理将返回一个数组：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("created "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'created'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("  \n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Parent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Vue"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("extend")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  created"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'parentVal'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Child "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Parent")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  created"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'childVal'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("其中 "),a("code",[t._v("Child")]),t._v(" 是使用 "),a("code",[t._v("new Parent")]),t._v(" 生成的，所以对于 "),a("code",[t._v("Child")]),t._v(" 来讲，"),a("code",[t._v("childVal")]),t._v(" 是：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("created"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'childVal'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("而 "),a("code",[t._v("parentVal")]),t._v(" 已经不是 "),a("code",[t._v("Vue.options.created")]),t._v(" 了，而是 "),a("code",[t._v("Parent.options.created")]),t._v("，那么 "),a("code",[t._v("Parent.options.created")]),t._v(" 是什么呢？它其实是通过 "),a("code",[t._v("Vue.extend")]),t._v(" 函数内部的 "),a("code",[t._v("mergeOptions")]),t._v(" 处理过的，所以它应该是这样的：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("options"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("created "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  created"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'parentVal'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以这个例子最终的结果就是既有 "),s("code",[this._v("childVal")]),this._v("，又有 "),s("code",[this._v("parentVal")]),this._v("，那么根据 "),s("code",[this._v("mergeHooks")]),this._v(" 函数的逻辑：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeHook")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Function"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Function "),a("span",{attrs:{class:"token operator"}},[t._v("|")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Function"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Array"),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v("Function"),a("span",{attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" childVal\n    "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" parentVal\n      "),a("span",{attrs:{class:"token comment"}},[t._v("// 这里，合并且生成一个新数组")]),t._v("\n      "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("concat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n        "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" childVal\n        "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" parentVal\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("关键在这句："),s("code",[this._v("parentVal.concat(childVal)")]),this._v("，将 "),s("code",[this._v("parentVal")]),this._v(" 和 "),s("code",[this._v("childVal")]),this._v(" 合并成一个数组。所以最终结果如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  created"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'parentVal'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  created"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'childVal'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" childVal\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("它判断了 "),s("code",[this._v("childVal")]),this._v(" 是不是数组，这说明什么？说明了生命周期钩子是可以写成数组的，虽然 "),s("code",[this._v("Vue")]),this._v(" 的文档里没有，不信你可以试试：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  created"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'first'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'second'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'third'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"资源-assets-选项的合并策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#资源-assets-选项的合并策略","aria-hidden":"true"}},[this._v("#")]),this._v(" 资源(assets)选项的合并策略")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("在 "),a("code",[t._v("Vue")]),t._v(" 中 "),a("code",[t._v("directives")]),t._v("、"),a("code",[t._v("filters")]),t._v(" 以及 "),a("code",[t._v("components")]),t._v(" 被认为是资源，其实很好理解，指令、过滤器和组件都是可以作为第三方应用来提供的，比如你需要一个模拟滚动的组件，你当然可以选用超级强大的第三方组件 "),a("a",{attrs:{href:"https://github.com/HcySunYang/scroll-flip-page",target:"_blank",rel:"noopener noreferrer"}},[t._v("scroll-flip-page")]),t._v("，所以这样看来 "),a("a",{attrs:{href:"https://github.com/HcySunYang/scroll-flip-page",target:"_blank",rel:"noopener noreferrer"}},[t._v("scroll-flip-page")]),t._v(" 就可以认为是资源，除了组件之外指令和过滤器也都是同样的道理。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("而我们接下来要看的代码就是用来合并处理 "),s("code",[this._v("directives")]),this._v("、"),s("code",[this._v("filters")]),this._v(" 以及 "),s("code",[this._v("components")]),this._v(" 等资源选项的，看如下代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("/**\n * Assets\n *\n * When a vm is present (instance creation), we need to do\n * a three-way merge between constructor options, instance\n * options and parent options.\n */")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeAssets")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  vm"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Component"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  key"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("create")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parentVal "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("assertObjectType")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("extend")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token constant"}},[t._v("ASSET_TYPES")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("forEach")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  strats"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("type "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'s'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" mergeAssets\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("与生命周期钩子的合并处理策略基本一致，以上代码段也分为两部分："),a("code",[t._v("mergeAssets")]),t._v(" 函数以及一个 "),a("code",[t._v("forEach")]),t._v(" 语句。我们同样先看 "),a("code",[t._v("forEach")]),t._v(" 语句，这个 "),a("code",[t._v("forEach")]),t._v(" 循环用来遍历 "),a("code",[t._v("ASSET_TYPES")]),t._v(" 常量，根据 "),a("code",[t._v("options.js")]),t._v(" 文件头部的引用关系可知 "),a("code",[t._v("ASSET_TYPES")]),t._v(" 常量来自于 "),a("code",[t._v("shared/constants.js")]),t._v(" 文件，我们打开 "),a("code",[t._v("shared/constants.js")]),t._v(" 文件找到 "),a("code",[t._v("ASSET_TYPES")]),t._v(" 常量如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("export")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{attrs:{class:"token constant"}},[t._v("ASSET_TYPES")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'component'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'directive'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token string"}},[t._v("'filter'")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们发现 "),s("code",[this._v("ASSET_TYPES")]),this._v(" 其实是由与资源选项“同名”的三个字符串组成的数组，注意所谓的“同名”是带引号的，因为数组中的字符串与真正的资源选项名字相比要少一个字符 "),s("code",[this._v("s")]),this._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("table",[a("thead",[a("tr",[a("th",[t._v("ASSET_TYPES")]),a("th",{staticStyle:{"text-align":"center"}},[t._v("资源选项名字")])])]),a("tbody",[a("tr",[a("td",[t._v("component")]),a("td",{staticStyle:{"text-align":"center"}},[t._v("component"),a("code",[t._v("s")])])]),a("tr",[a("td",[t._v("directive")]),a("td",{staticStyle:{"text-align":"center"}},[t._v("directive"),a("code",[t._v("s")])])]),a("tr",[a("td",[t._v("filter")]),a("td",{staticStyle:{"text-align":"center"}},[t._v("filter"),a("code",[t._v("s")])])])])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以我们再看一下那段 "),s("code",[this._v("forEach")]),this._v(" 语句：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token constant"}},[t._v("ASSET_TYPES")]),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("forEach")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("type"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  strats"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("type "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'s'")]),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" mergeAssets\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们发现在循环内部它有手动拼接上一个 "),s("code",[this._v("'s'")]),this._v("，所以最终的结果就是在 "),s("code",[this._v("strats")]),this._v(" 策略对象上添加与资源选项名字相同的策略函数，用来分别合并处理三类资源。所以接下来我们就看看它是怎么处理的，"),s("code",[this._v("mergeAssets")]),this._v(" 代码如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeAssets")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  vm"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Component"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  key"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("create")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parentVal "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("assertObjectType")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("extend")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("res"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" res\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面的代码本身逻辑很简单，首先以 "),a("code",[t._v("parentVal")]),t._v(" 为原型创建对象 "),a("code",[t._v("res")]),t._v("，然后判断是否有 "),a("code",[t._v("childVal")]),t._v("，如果有的话使用 "),a("code",[t._v("extend")]),t._v(" 函数将 "),a("code",[t._v("childVal")]),t._v(" 上的属性混合到 "),a("code",[t._v("res")]),t._v(" 对象上并返回。如果没有 "),a("code",[t._v("childVal")]),t._v(" 则直接返回 "),a("code",[t._v("res")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("举个例子，大家知道任何组件的模板中我们都可以直接使用 "),a("code",[t._v("<transition/>")]),t._v(" 组件或者 "),a("code",[t._v("<keep-alive/>")]),t._v(" 等，但是我们并没有在我们自己的组件实例的 "),a("code",[t._v("components")]),t._v(" 选项中显示的声明这些组件。那么这是怎么做到的呢？其实答案就在 "),a("code",[t._v("mergeAssets")]),t._v(" 函数中。以下面的代码为例：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("var")]),t._v(" v "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'#app'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  components"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    ChildComponent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ChildComponent\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面的代码中，我们创建了一个 "),a("code",[t._v("Vue")]),t._v(" 实例，并注册了一个子组件 "),a("code",[t._v("ChildComponent")]),t._v("，此时 "),a("code",[t._v("mergeAssets")]),t._v(" 方法内的 "),a("code",[t._v("childVal")]),t._v(" 就是例子中的 "),a("code",[t._v("components")]),t._v(" 选项：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("components"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  ChildComponent"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" ChildComponent\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("而 "),s("code",[this._v("parentVal")]),this._v(" 就是 "),s("code",[this._v("Vue.options.components")]),this._v("，我们知道 "),s("code",[this._v("Vue.options")]),this._v(" 如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("Vue"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("options "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tcomponents"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tKeepAlive\n\t\tTransition"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    TransitionGroup\n\t"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tdirectives"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("create")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tdirectives"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tmodel"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    show\n\t"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\tfilters"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("create")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n\t_base"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Vue\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以 "),s("code",[this._v("Vue.options.components")]),this._v(" 就应该一个对象：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token punctuation"}},[this._v("{")]),this._v("\n  KeepAlive\n  Transition"),s("span",{attrs:{class:"token punctuation"}},[this._v(",")]),this._v("\n  TransitionGroup\n"),s("span",{attrs:{class:"token punctuation"}},[this._v("}")]),this._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("也就是说 "),s("code",[this._v("parentVal")]),this._v(" 就是如上包含三个内置组件的对象，所以经过如下这句话之后：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" res "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("create")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parentVal "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("你可以通过 "),a("code",[t._v("res.KeepAlive")]),t._v(" 访问当 "),a("code",[t._v("KeepAlive")]),t._v(" 对象，因为虽然 "),a("code",[t._v("res")]),t._v(" 对象自身属性没有 "),a("code",[t._v("KeepAlive")]),t._v("，但是它的原型上有。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("然后再经过 "),a("code",[t._v("return extend(res, childVal)")]),t._v(" 这句话之后，"),a("code",[t._v("res")]),t._v(" 变量将被添加 "),a("code",[t._v("ChildComponent")]),t._v(" 属性，最终 "),a("code",[t._v("res")]),t._v(" 如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("res "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  ChildComponent\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 原型")]),t._v("\n  __proto__"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    KeepAlive\n    Transition"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    TransitionGroup\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以这就是为什么我们不用显式地注册组件就能够使用一些内置组件的原因，同时这也是内置组件的实现方式，通过 "),s("code",[this._v("Vue.extend")]),this._v(" 创建出来的子类也是一样的道理，一层一层的通过原型进行组件的搜索。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后说一下 "),s("code",[this._v("mergeAssets")]),this._v(" 函数中的这句话：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("assertObjectType")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("在非生产环境下，会调用 "),s("code",[this._v("assertObjectType")]),this._v(" 函数，这个函数其实是用来检测 "),s("code",[this._v("childVal")]),this._v(" 是不是一个纯对象的，如果不是纯对象会给你一个警告，其源码很简单，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("assertObjectType")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" any"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Component"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),a("span",{attrs:{class:"token function"}},[t._v("isPlainObject")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("warn")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n      "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v('`Invalid value for option "')]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),t._v("name"),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v('": expected an Object, `')])]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("+")]),t._v("\n      "),a("span",{attrs:{class:"token template-string"}},[a("span",{attrs:{class:"token string"}},[t._v("`but got ")]),a("span",{attrs:{class:"token interpolation"}},[a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("${")]),a("span",{attrs:{class:"token function"}},[t._v("toRawType")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("value"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token interpolation-punctuation punctuation"}},[t._v("}")])]),a("span",{attrs:{class:"token string"}},[t._v(".`")])]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n      vm\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("就是使用 "),a("code",[t._v("isPlainObject")]),t._v(" 进行判断。上面我们都在以 "),a("code",[t._v("components")]),t._v(" 进行讲解，对于指令("),a("code",[t._v("directives")]),t._v(")和过滤器("),a("code",[t._v("filters")]),t._v(")也是一样的，因为他们都是用 "),a("code",[t._v("mergeAssets")]),t._v(" 进行合并处理。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"选项-watch-的合并策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#选项-watch-的合并策略","aria-hidden":"true"}},[this._v("#")]),this._v(" 选项 watch 的合并策略")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("/**\n * Watchers.\n *\n * Watchers hashes should not overwrite one\n * another, so we merge them as arrays.\n */")]),t._v("\nstrats"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function-variable function"}},[t._v("watch")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  vm"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Component"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  key"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Object "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// work around Firefox's Object.prototype.watch...")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parentVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" nativeWatch"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" parentVal "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" undefined\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("childVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" nativeWatch"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" childVal "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" undefined\n  "),a("span",{attrs:{class:"token comment"}},[t._v("/* istanbul ignore if */")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("create")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parentVal "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("assertObjectType")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" childVal\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ret "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("extend")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" parent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ret"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" child "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      parent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("parent"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    ret"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" parent\n      "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("concat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n      "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" child "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("child"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ret\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这一段代码的作用是在 "),a("code",[t._v("strats")]),t._v(" 策略对象上添加 "),a("code",[t._v("watch")]),t._v(" 策略函数。所以 "),a("code",[t._v("strats.watch")]),t._v(" 策略函数应该是合并处理 "),a("code",[t._v("watch")]),t._v(" 选项的。我们先看函数体开头的两句代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// work around Firefox's Object.prototype.watch...")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parentVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" nativeWatch"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" parentVal "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" undefined\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("childVal "),a("span",{attrs:{class:"token operator"}},[t._v("===")]),t._v(" nativeWatch"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" childVal "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" undefined\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("create")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parentVal "),a("span",{attrs:{class:"token operator"}},[t._v("||")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("检测了是否有 "),a("code",[t._v("childVal")]),t._v("，即组件选项是否有 "),a("code",[t._v("watch")]),t._v(" 选项，如果没有的话，直接以 "),a("code",[t._v("parentVal")]),t._v(" 为原型创建对象并返回(如果有 "),a("code",[t._v("parentVal")]),t._v(" 的话)。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果组件选项中有 "),s("code",[this._v("watch")]),this._v(" 选项，即 "),s("code",[this._v("childVal")]),this._v(" 存在，则代码继续执行，接下来将执行这段代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("assertObjectType")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" childVal\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("由于此时 "),a("code",[t._v("childVal")]),t._v(" 存在，所以在非生产环境下使用 "),a("code",[t._v("assertObjectType")]),t._v(" 函数对 "),a("code",[t._v("childVal")]),t._v(" 进行类型检测，检测其是否是一个纯对象，我们知道 "),a("code",[t._v("Vue")]),t._v(" 的 "),a("code",[t._v("watch")]),t._v(" 选项需要是一个纯对象。接着判断是否有 "),a("code",[t._v("parentVal")]),t._v("，如果没有的话则直接返回 "),a("code",[t._v("childVal")]),t._v("，即直接使用组件选项的 "),a("code",[t._v("watch")]),t._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("如果存在 "),s("code",[this._v("parentVal")]),this._v("，那么代码继续执行，此时 "),s("code",[this._v("parentVal")]),this._v(" 以及 "),s("code",[this._v("childVal")]),this._v(" 都将存在，那么就需要做合并处理了，也就是下面要执行的代码：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 定义 ret 常量，其值为一个对象")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ret "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 将 parentVal 的属性混合到 ret 中，后面处理的都将是 ret 对象，最后返回的也是 ret 对象")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("extend")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 遍历 childVal")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" key "),a("span",{attrs:{class:"token keyword"}},[t._v("in")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 由于遍历的是 childVal，所以 key 是子选项的 key，父选项中未必能获取到值，所以 parent 未必有值")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" parent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" ret"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// child 是肯定有值的，因为遍历的就是 childVal 本身")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" child "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 这个 if 分支的作用就是如果 parent 存在，就将其转为数组")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    parent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("parent"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  ret"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" parent\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 最后，如果 parent 存在，此时的 parent 应该已经被转为数组了，所以直接将 child concat 进去")]),t._v("\n    "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("concat")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token comment"}},[t._v("// 如果 parent 不存在，直接将 child 转为数组返回")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Array"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("isArray")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v(" child "),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("child"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 最后返回新的 ret 对象")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ret\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上面的代码段中写了很详细的注释。首先定义了 "),a("code",[t._v("ret")]),t._v(" 常量，最后返回的也是 "),a("code",[t._v("ret")]),t._v(" 常量，所以中间的代码是在充实 "),a("code",[t._v("ret")]),t._v(" 常量。之后使用 "),a("code",[t._v("extend")]),t._v(" 函数将 "),a("code",[t._v("parentVal")]),t._v(" 的属性混合到 "),a("code",[t._v("ret")]),t._v(" 中。然后开始一个 "),a("code",[t._v("for in")]),t._v(" 循环遍历 "),a("code",[t._v("childVal")]),t._v("，这个循环的目的是："),a("em",[t._v("检测子选项中的值是否也在父选项中，如果在的话将父子选项合并到一个数组，否则直接把子选项变成一个数组返回")]),t._v("。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 创建子类")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Sub "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Vue"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("extend")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 检测 test 的变化")]),t._v("\n  watch"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    test"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'extend: test change'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 使用子类创建实例")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" v "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Sub")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'#app'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  data"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    test"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 检测 test 的变化")]),t._v("\n  watch"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    test"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'instance: test change'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 修改 test 的值")]),t._v("\nv"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("test "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("上面的代码中，当我们修改 "),s("code",[this._v("v.test")]),this._v(" 的值时，两个观察 "),s("code",[this._v("test")]),this._v(" 变化的函数都将被执行。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们使用子类 "),a("code",[t._v("Sub")]),t._v(" 创建了实例 "),a("code",[t._v("v")]),t._v("，对于实例 "),a("code",[t._v("v")]),t._v(" 来讲，其 "),a("code",[t._v("childVal")]),t._v(" 就是组件选项的 "),a("code",[t._v("watch")]),t._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("watch"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  test"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'instance: test change'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("而其 "),s("code",[this._v("parentVal")]),this._v(" 就是 "),s("code",[this._v("Sub.options")]),this._v("，实际上就是：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("watch"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  test"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'extend: test change'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最终这两个 "),s("code",[this._v("watch")]),this._v(" 选项将被合并为一个数组：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("watch"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  test"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'extend: test change'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'instance: test change'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们可以通过打印实例的 "),s("code",[this._v("$options")]),this._v(" 属性来确认这一点：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("v"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("$options"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"http://ovjvjtt4l.bkt.clouddn.com/2017-10-26-112916.jpg",alt:""}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("可以发现 "),s("code",[this._v("watch.test")]),this._v(" 变成了数组，但是 "),s("code",[this._v("watch.test")]),this._v(" 并不一定总是数组，只有父选项("),s("code",[this._v("parentVal")]),this._v(")也存对该字段的观测时它才是数组，如下：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 创建实例")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" v "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Vue")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  el"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'#app'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  data"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    test"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("1")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token comment"}},[t._v("// 检测 test 的变化")]),t._v("\n  watch"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    test"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'instance: test change'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 修改 test 的值")]),t._v("\nv"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("test "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("2")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("我们直接使用 "),a("code",[t._v("Vue")]),t._v(" 创建实例，这个时候对于实例 "),a("code",[t._v("v")]),t._v(" 来说，父选项是 "),a("code",[t._v("Vue.options")]),t._v("，由于 "),a("code",[t._v("Vue.options")]),t._v(" 并没有 "),a("code",[t._v("watch")]),t._v(" 选项，所以逻辑将直接在 "),a("code",[t._v("strats.watch")]),t._v(" 函数的这句话中返回：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" childVal\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("没有 "),a("code",[t._v("parentVal")]),t._v(" 即父选项中没有 "),a("code",[t._v("watch")]),t._v(" 选项，则直接返回 "),a("code",[t._v("childVal")]),t._v("，也就是直接返回了子选项的 "),a("code",[t._v("watch")]),t._v(" 选项，如就是例子中写的对象：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  test"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'instance: test change'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以此时 "),s("code",[this._v("test")]),this._v(" 字段就不在是数组了，而就是一个函数，同样可以通过打印实例的 "),s("code",[this._v("$options")]),this._v(" 选项证明：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[s("img",{attrs:{src:"http://ovjvjtt4l.bkt.clouddn.com/2017-10-26-113858.jpg",alt:""}})])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("所以大家应该知道："),s("em",[this._v("被合并处理后的 "),s("code",[this._v("watch")]),this._v(" 选项下的每个键值，有可能是一个数组，也有可能是一个函数")]),this._v("。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"选项-props、methods、inject、computed-的合并策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#选项-props、methods、inject、computed-的合并策略","aria-hidden":"true"}},[this._v("#")]),this._v(" 选项 props、methods、inject、computed 的合并策略")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("/**\n * Other object hashes.\n */")]),t._v("\nstrats"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("props "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("\nstrats"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("methods "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("\nstrats"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("inject "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v("\nstrats"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function-variable function"}},[t._v("computed")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  vm"),a("span",{attrs:{class:"token operator"}},[t._v("?")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" Component"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  key"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" string\n"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("?")]),t._v("Object "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("childVal "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{attrs:{class:"token function"}},[t._v("assertObjectType")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" childVal\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ret "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("create")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("extend")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("extend")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ret\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这段代码的作用是在 "),a("code",[t._v("strats")]),t._v(" 策略对象上添加 "),a("code",[t._v("props")]),t._v("、"),a("code",[t._v("methods")]),t._v("、"),a("code",[t._v("inject")]),t._v(" 以及 "),a("code",[t._v("computed")]),t._v(" 策略函数，顾名思义这些策略函数分别用来合并处理同名选项的，并且所使用的策略相同。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token comment"}},[t._v("// 如果存在 childVal，那么在非生产环境下要检查 childVal 的类型")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("childVal "),a("span",{attrs:{class:"token operator"}},[t._v("&&")]),t._v(" process"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("env"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token constant"}},[t._v("NODE_ENV")]),t._v(" "),a("span",{attrs:{class:"token operator"}},[t._v("!==")]),t._v(" "),a("span",{attrs:{class:"token string"}},[t._v("'production'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("assertObjectType")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("key"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// parentVal 不存在的情况下直接返回 childVal")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token operator"}},[t._v("!")]),t._v("parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" childVal\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 如果 parentVal 存在，则创建 ret 对象，然后分别将 parentVal 和 childVal 的属性混合到 ret 中，注意：由于 childVal 将覆盖 parentVal 的同名属性")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" ret "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" Object"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("create")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("null")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token function"}},[t._v("extend")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" parentVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("extend")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("ret"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" childVal"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token comment"}},[t._v("// 最后返回 ret 对象。")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("return")]),t._v(" ret\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("首先，会检测 "),s("code",[this._v("childVal")]),this._v(" 是否存在，即子选项是否有相关的属性，如果有的话在非生产环境下需要使用 "),s("code",[this._v("assertObjectType")]),this._v(" 检测其类型，保证其类型是纯对象。然后会判断 "),s("code",[this._v("parentVal")]),this._v(" 是否存在，不存在的话直接返回子选项。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("如果 "),a("code",[t._v("parentVal")]),t._v(" 存在，则使用 "),a("code",[t._v("extend")]),t._v(" 方法将其属性混合到新对象 "),a("code",[t._v("ret")]),t._v(" 中，如果 "),a("code",[t._v("childVal")]),t._v(" 也存在的话，那么同样会再使用 "),a("code",[t._v("extend")]),t._v(" 函数将其属性混合到 "),a("code",[t._v("ret")]),t._v(" 中，所以如果父子选项中有相同的键，那么子选项会把父选项覆盖掉。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("以上就是 "),a("code",[t._v("props")]),t._v("、"),a("code",[t._v("methods")]),t._v("、"),a("code",[t._v("inject")]),t._v(" 以及 "),a("code",[t._v("computed")]),t._v(" 这四个属性的通用合并策略。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"选项-provide-的合并策略"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#选项-provide-的合并策略","aria-hidden":"true"}},[this._v("#")]),this._v(" 选项 provide 的合并策略")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("最后一个选项的合并策略，就是 "),s("code",[this._v("provide")]),this._v(" 选项的合并策略，只有一句代码，如下：")])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[this._v("strats"),s("span",{attrs:{class:"token punctuation"}},[this._v(".")]),this._v("provide "),s("span",{attrs:{class:"token operator"}},[this._v("=")]),this._v(" mergeDataOrFn\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("也就是说 "),s("code",[this._v("provide")]),this._v(" 选项的合并策略与 "),s("code",[this._v("data")]),this._v(" 选项的合并策略相同，都是使用 "),s("code",[this._v("mergeDataOrFn")]),this._v(" 函数。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"选项处理小结"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#选项处理小结","aria-hidden":"true"}},[this._v("#")]),this._v(" 选项处理小结")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("现在我们了解了 "),s("code",[this._v("Vue")]),this._v(" 中是如何合并处理选项的，接下来我们稍微做一个总结：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ul",[a("li",[t._v("对于 "),a("code",[t._v("el")]),t._v("、"),a("code",[t._v("propsData")]),t._v(" 选项使用默认的合并策略 "),a("code",[t._v("defaultStrat")]),t._v("。")]),a("li",[t._v("对于 "),a("code",[t._v("data")]),t._v(" 选项，使用 "),a("code",[t._v("mergeDataOrFn")]),t._v(" 函数进行处理，最终结果是 "),a("code",[t._v("data")]),t._v(" 选项将变成一个函数，且该函数的执行结果为真正的数据对象。")]),a("li",[t._v("对于 "),a("code",[t._v("生命周期钩子")]),t._v(" 选项，将合并成数组，使得父子选项中的钩子函数都能够被执行")]),a("li",[t._v("对于 "),a("code",[t._v("directives")]),t._v("、"),a("code",[t._v("filters")]),t._v(" 以及 "),a("code",[t._v("components")]),t._v(" 等资源选项，父子选项将以原型链的形式被处理，正是因为这样我们才能够在任何地方都使用内置组件、指令等。")]),a("li",[t._v("对于 "),a("code",[t._v("watch")]),t._v(" 选项的合并处理，类似于生命周期钩子，如果父子选项都有相同的观测字段，将被合并为数组，这样观察者都将被执行。")]),a("li",[t._v("对于 "),a("code",[t._v("props")]),t._v("、"),a("code",[t._v("methods")]),t._v("、"),a("code",[t._v("inject")]),t._v("、"),a("code",[t._v("computed")]),t._v(" 选项，父选项始终可用，但是子选项会覆盖同名的父选项字段。")]),a("li",[t._v("对于 "),a("code",[t._v("provide")]),t._v(" 选项，其合并策略使用与 "),a("code",[t._v("data")]),t._v(" 选项相同的 "),a("code",[t._v("mergeDataOrFn")]),t._v(" 函数。")]),a("li",[t._v("最后，以上没有提及到的选项都将使默认选项 "),a("code",[t._v("defaultStrat")]),t._v("。")]),a("li",[t._v("最最后，默认合并策略函数 "),a("code",[t._v("defaultStrat")]),t._v(" 的策略是："),a("em",[t._v("只要子选项不是 "),a("code",[t._v("undefined")]),t._v(" 就使用子选项，否则使用父选项")]),t._v("。")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("至此，我们大概介绍完了 "),s("code",[this._v("Vue")]),this._v(" 对选项的处理，但留心的同学一定注意到了，"),s("code",[this._v("options.js")]),this._v(" 文件的代码我们都基本逐行分析，唯独剩下一个函数我们始终没有提到，它就是 "),s("code",[this._v("resolveAsset")]),this._v(" 函数。这个函数我们暂且不在这里讲，后面随着我们的深入，自然会再次碰到它，到那个时候应该是讲它的最好时机。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("h2",{attrs:{id:"再看-mixins-和-extends"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#再看-mixins-和-extends","aria-hidden":"true"}},[this._v("#")]),this._v(" 再看 mixins 和 extends")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" extendsFrom "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" child"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token keyword"}},[t._v("extends")]),t._v("\n"),a("span",{attrs:{class:"token class-name"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("extendsFrom"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  parent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeOptions")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" extendsFrom"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mixins"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" child"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mixins"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" l"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    parent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeOptions")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mixins"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("当时候我们并没有深入讲解，因为当时我们还不了解 "),s("code",[this._v("mergeOptions")]),this._v(" 函数的作用，但是现在我们可以回头来看一下这段代码了。")])},function(){var t=this.$createElement,s=this._self._c||t;return s("p",[this._v("我们知道 "),s("code",[this._v("mixins")]),this._v(" 在 "),s("code",[this._v("Vue")]),this._v(" 中用于解决代码复用的问题，比如混入 "),s("code",[this._v("created")]),this._v(" 生命周期钩子，用于打印一句话：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("const")]),t._v(" consoleMixin "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("created")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'created:mixins'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),a("span",{attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{attrs:{class:"token class-name"}},[t._v("Vue")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  mixins"),a("span",{attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("consoleMixin"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{attrs:{class:"token function"}},[t._v("created")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    console"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{attrs:{class:"token function"}},[t._v("log")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token string"}},[t._v("'created:instance'")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])},function(){var t=this.$createElement,s=this._self._c||t;return s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{attrs:{class:"token comment"}},[this._v("// created:mixins")]),this._v("\n"),s("span",{attrs:{class:"token comment"}},[this._v("// created:instance")]),this._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("这是因为 "),a("code",[t._v("mergeOptions")]),t._v(" 函数在处理 "),a("code",[t._v("mixins")]),t._v(" 选项的时候递归调用了 "),a("code",[t._v("mergeOptions")]),t._v(" 函数将 "),a("code",[t._v("minxis")]),t._v(" 合并到了 "),a("code",[t._v("parent")]),t._v(" 中，并将合并后生成的新对象作为新的 "),a("code",[t._v("parent")]),t._v("：")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("child"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mixins"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{attrs:{class:"token keyword"}},[t._v("let")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token number"}},[t._v("0")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" l "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" child"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mixins"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("length"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),a("span",{attrs:{class:"token operator"}},[t._v("<")]),t._v(" l"),a("span",{attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),a("span",{attrs:{class:"token operator"}},[t._v("++")]),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    parent "),a("span",{attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{attrs:{class:"token function"}},[t._v("mergeOptions")]),a("span",{attrs:{class:"token punctuation"}},[t._v("(")]),t._v("parent"),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" child"),a("span",{attrs:{class:"token punctuation"}},[t._v(".")]),t._v("mixins"),a("span",{attrs:{class:"token punctuation"}},[t._v("[")]),t._v("i"),a("span",{attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" vm"),a("span",{attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  "),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("上例中我们只涉及到 "),a("code",[t._v("created")]),t._v(" 生命周期钩子的合并，所以会使用生命周期钩子的合并策略函数进行处理，现在我们已经知道 "),a("code",[t._v("mergeOptions")]),t._v(" 会把生命周期选项合并为一个数组，所以所有的生命周期钩子都会被执行。那么不仅仅是生命周期钩子，任何写在 "),a("code",[t._v("mixins")]),t._v(" 中的选项，都会使用 "),a("code",[t._v("mergeOptions")]),t._v(" 中相应的合并策略进行处理，这就是 "),a("code",[t._v("mixins")]),t._v(" 的实现方式。")])},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("p",[t._v("对于 "),a("code",[t._v("extends")]),t._v(" 选项，与 "),a("code",[t._v("mixins")]),t._v(" 相同，甚至由于 "),a("code",[t._v("extends")]),t._v(" 选项只能是一个对象，而不能是数组，反而要比 "),a("code",[t._v("mixins")]),t._v(" 的实现更为简单，连遍历都不需要。")])}],!1,null,null,null);s.default=e.exports}}]);